{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"Manage GitCode work from the command line"
,
"cn"
:
"在命令行管理 GitCode 工作"
}
,
"#subcmd_help_tip"
:
true
,
"repo"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"repo management"
,
"cn"
:
"repo management"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo of owner"
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--visibility"
:
{
"#desc"
:
"visibility"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"private"
,
"public"
,
"internal"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show detailed information of repo"
,
"--license"
:
{
"#desc"
:
"Include project license data."
}
,
"--statistics"
:
{
"#desc"
:
"Include project statistics. Only available to Reporter or higher level role members."
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response. (administrator only)"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create repo"
,
"-p|--path"
:
{
"#desc"
:
"repo path"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"See project visibility level."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"private"
,
"#cand"
:
[
"private"
,
"internal"
,
"public"
]
}
}
,
"--default_branch"
:
{
"#desc"
:
"The default branch name."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_list"
:
{
"#desc"
:
"The list of tags for a project"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Short project description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_config_path"
:
{
"#desc"
:
"The path to CI configuration file."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--topics"
:
{
"#desc"
:
"The list of topics for a project"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--avatar"
:
{
"#desc"
:
"Image file for avatar of the project."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--import_url"
:
{
"#desc"
:
"URL to import repository from."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_method"
:
{
"#desc"
:
"Set the merge method used."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_timeout"
:
{
"#desc"
:
"The maximum amount of time, in seconds, that a job can run."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_option"
:
{
"#desc"
:
"One of never, always, default_on, or default_off."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--template_name"
:
{
"#desc"
:
"When used without use_custom_template, name of a built-in project template."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wiki_access_level"
:
{
"#desc"
:
"wiki access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_git_strategy"
:
{
"#desc"
:
"The Git strategy. Defaults to fetch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_storage"
:
{
"#desc"
:
"Which storage shard the repository is on."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--pages_access_level"
:
{
"#desc"
:
"Pages access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_access_level"
:
{
"#desc"
:
"Issues access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--builds_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--template_project_id"
:
{
"#desc"
:
"When used with use_custom_template, project ID of a custom project template."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--forking_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--snippets_access_level"
:
{
"#desc"
:
"Snippets access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--analytics_access_level"
:
{
"#desc"
:
"One of disabled, private or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approvals_before_merge"
:
{
"#desc"
:
"How many approvers should approve merge requests by default"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--operations_access_level"
:
{
"#desc"
:
"Operations access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_access_level"
:
{
"#desc"
:
"Repository access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--requirements_access_level"
:
{
"#desc"
:
"Requirements access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--auto_devops_deploy_strategy"
:
{
"#desc"
:
"Auto Deploy strategy"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_access_level"
:
{
"#desc"
:
"Merge requests access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_registry_access_level"
:
{
"#desc"
:
"Set visibility of container registry, for this project"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--group_with_project_templates_id"
:
{
"#desc"
:
"specifies ID of group from which all the custom project templates are sourced."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--security_and_compliance_access_level"
:
{
"#desc"
:
"Security and compliance access level."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_expiration_policy_attributes"
:
{
"#desc"
:
"Update the image cleanup policy for this project. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--external_authorization_classification_label"
:
{
"#desc"
:
"The classification label for the project."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--initialize_with_readme"
:
{
"#desc"
:
"Whether to create a Git repository with just a README.md file"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"--mirror"
:
{
"#desc"
:
"Enables pull mirroring in a project."
}
,
"--lfs_enabled"
:
{
"#desc"
:
"Enable LFS."
}
,
"--jobs_enabled"
:
{
"#desc"
:
"Enable jobs for this project."
}
,
"--wiki_enabled"
:
{
"#desc"
:
"Enable wiki for this project. Use wiki_access_level instead."
}
,
"--public_builds"
:
{
"#desc"
:
"If true, jobs can be viewed by non-project members."
}
,
"--issues_enabled"
:
{
"#desc"
:
"Enable issues for this project."
}
,
"--emails_disabled"
:
{
"#desc"
:
"Disable email notifications."
}
,
"--snippets_enabled"
:
{
"#desc"
:
"Enable snippets for this project. "
}
,
"--packages_enabled"
:
{
"#desc"
:
"Enable or disable packages repository feature."
}
,
"--auto_devops_enabled"
:
{
"#desc"
:
"Enable Auto DevOps for this project."
}
,
"--use_custom_template"
:
{
"#desc"
:
"Use either custom instance or group project template."
}
,
"--merge_trains_enabled"
:
{
"#desc"
:
"Enable or disable merge trains."
}
,
"--mirror_trigger_builds"
:
{
"#desc"
:
"Pull mirroring triggers builds."
}
,
"--shared_runners_enabled"
:
{
"#desc"
:
"Enable shared runners for this project."
}
,
"--request_access_enabled"
:
{
"#desc"
:
"Allow users to request member access."
}
,
"--merge_requests_enabled"
:
{
"#desc"
:
"Enable merge requests for this project."
}
,
"--merge_pipelines_enabled"
:
{
"#desc"
:
"Enable or disable merge pipelines."
}
,
"--container_registry_enabled"
:
{
"#desc"
:
"Enable container registry for this project."
}
,
"--autoclose_referenced_issues"
:
{
"#desc"
:
"Set whether auto-closing referenced issues on default branch."
}
,
"--auto_cancel_pending_pipelines"
:
{
"#desc"
:
"Auto-cancel pending pipelines."
}
,
"--allow_merge_on_skipped_pipeline"
:
{
"#desc"
:
"Set whether or not merge requests can be merged with skipped jobs."
}
,
"--remove_source_branch_after_merge"
:
{
"#desc"
:
"Enable Delete source branch option by default for all new merge requests."
}
,
"--resolve_outdated_diff_discussions"
:
{
"#desc"
:
"Automatically resolve merge request diffs discussions on lines changed with a push."
}
,
"--printing_merge_request_link_enabled"
:
{
"#desc"
:
"Show link to create/view merge request when pushing from the command line."
}
,
"--only_allow_merge_if_pipeline_succeeds"
:
{
"#desc"
:
"Set whether merge requests can only be merged with successful pipelines."
}
,
"--only_allow_merge_if_all_discussions_are_resolved"
:
{
"#desc"
:
"Set whether merge requests can only be merged when all the discussions are resolved."
}
,
"#1"
:
{
"#desc"
:
"repo names"
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Setup repo configure"
,
"--visibility"
:
{
"#desc"
:
"See repo visibility level."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"private"
,
"internal"
,
"public"
]
}
}
,
"--tag_list"
:
{
"#desc"
:
"The list of tags for a repo"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Short repo description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--default_branch"
:
{
"#desc"
:
"The default branch name."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the repo"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"-p|--path"
:
{
"#desc"
:
"Custom repository name for the repo."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_config_path"
:
{
"#desc"
:
"The path to CI configuration file."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--avatar"
:
{
"#desc"
:
"Image file for avatar of the repo."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--import_url"
:
{
"#desc"
:
"URL the repository was imported from."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_timeout"
:
{
"#desc"
:
"The maximum amount of time, in seconds, that a job can run."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_enabled"
:
{
"#desc"
:
"Set the merge method used."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--mirror_user_id"
:
{
"#desc"
:
"User responsible for all the activity surrounding a pull mirror event. (administrators only)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_git_strategy"
:
{
"#desc"
:
"The Git strategy. Defaults to fetch"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_storage"
:
{
"#desc"
:
"Which storage shard the repository is on. (administrators only)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_default_git_depth"
:
{
"#desc"
:
"Default number of revisions for shallow cloning."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approvals_before_merge"
:
{
"#desc"
:
"How many approvers should approve merge request by default. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_template"
:
{
"#desc"
:
"Default description for merge requests. Description is parsed with gcode Flavored Markdown."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wiki_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--pages_access_level"
:
{
"#desc"
:
"One of disabled, private, enabled, or public."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--builds_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--forking_access_level"
:
{
"#desc"
:
"The classification label for the repo."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--snippets_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--analytics_access_level"
:
{
"#desc"
:
"One of disabled, private or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--operations_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--requirements_access_level"
:
{
"#desc"
:
"One of disabled, private, enabled or public"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_registry_access_level"
:
{
"#desc"
:
"Set visibility of container registry, for this repo, to one of , or . disabled private enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--security_and_compliance_access_level"
:
{
"#desc"
:
"Security and compliance access level. One of disabled, private, or enabled"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--auto_devops_deploy_strategy"
:
{
"#desc"
:
"Auto Deploy strategy (continuous, manual, or timed_incremental) "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--auto_cancel_pending_pipelines"
:
{
"#desc"
:
"Auto-cancel pending pipelines. This isnt a boolean, but enabled/disabled. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_expiration_policy_attributes"
:
{
"#desc"
:
"Update the image cleanup policy for this project. Accepts: (string), (integer), (string), (string), (string), (string), (boolean). "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--external_authorization_classification_label"
:
{
"#desc"
:
"The classification label for the project."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_commit_template"
:
{
"#desc"
:
"Template used to create squash commit message in merge requests"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_option"
:
{
"#desc"
:
"One of never, always, default_on, or default_off"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--suggestion_commit_message"
:
{
"#desc"
:
"The commit message used to apply merge request suggestions."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--topics"
:
{
"#desc"
:
"The list of topics for the project. This replaces any existing topics that are already added to the project. (Introduced in gcode 14.0.)."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"--wiki_enabled"
:
{
"#desc"
:
"(Deprecated) Enable wiki for this project. Use instead. wiki_access_level"
}
,
"--mirror_trigger_builds"
:
{
"#desc"
:
"mirror_trigger_builds"
}
,
"--allow_merge_on_skipped_pipeline"
:
{
"#desc"
:
"Set whether or not merge requests can be merged with skipped jobs."
}
,
"--autoclose_referenced_issues"
:
{
"#desc"
:
"Set whether auto-closing referenced issues on default branch "
}
,
"--auto_devops_enabled"
:
{
"#desc"
:
"Enable Auto DevOps for this project. "
}
,
"--ci_forward_deployment_enabled"
:
{
"#desc"
:
"When a new deployment job starts, skip older deployment jobs that are still pending."
}
,
"--ci_separated_caches"
:
{
"#desc"
:
"Set whether or not caches should be separated by branch protection status."
}
,
"--container_registry_enabled"
:
{
"#desc"
:
"(Deprecated) Enable container registry for this project. Use instead."
}
,
"--emails_disabled"
:
{
"#desc"
:
"Disable email notifications.."
}
,
"--merge_pipelines_enabled"
:
{
"#desc"
:
"Enable or disable merge pipelines.."
}
,
"--merge_requests_enabled"
:
{
"#desc"
:
"(Deprecated) Enable merge requests for this project. Use instead."
}
,
"--merge_trains_enabled"
:
{
"#desc"
:
"Enable or disable merge trains.."
}
,
"--mirror_overwrites_diverged_branches"
:
{
"#desc"
:
"Pull mirror overwrites diverged branches."
}
,
"--mirror"
:
{
"#desc"
:
"Enables pull mirroring in a project"
}
,
"--mr_default_target_self"
:
{
"#desc"
:
"For forked projects, target merge requests to this project. If false, the target will be the upstream project"
}
,
"--only_allow_merge_if_pipeline_succeeds"
:
{
"#desc"
:
"Set whether merge requests can only be merged with successful jobs."
}
,
"--only_mirror_protected_branches"
:
{
"#desc"
:
"Only mirror protected branches."
}
,
"--packages_enabled"
:
{
"#desc"
:
"Enable or disable packages repository feature."
}
,
"--printing_merge_request_link_enabled"
:
{
"#desc"
:
"Show link to create/view merge request when pushing from the command line."
}
,
"--public_builds"
:
{
"#desc"
:
"If true, jobs can be viewed by non-project members"
}
,
"--remove_source_branch_after_merge"
:
{
"#desc"
:
"Enable option by default for all new merge requests.Delete source branch "
}
,
"--request_access_enabled"
:
{
"#desc"
:
"Allow users to request member access."
}
,
"--resolve_outdated_diff_discussions"
:
{
"#desc"
:
"Automatically resolve merge request diffs discussions on lines changed with a push."
}
,
"--restrict_user_defined_variables"
:
{
"#desc"
:
"Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline."
}
,
"--service_desk_enabled"
:
{
"#desc"
:
"Enable or disable Service Desk feature."
}
,
"--shared_runners_enabled"
:
{
"#desc"
:
"Enable shared runners for this project."
}
,
"--snippets_enabled"
:
{
"#desc"
:
"(Deprecated) Enable snippets for this project. Use instead. snippets_access_level"
}
,
"#1"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove repo"
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"issue"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo issue"
,
"--repo|-r"
:
{
"#desc"
:
"<ownerPath>/<repoPath> (default ownerPath: current user)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by fields.Default is created_at"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search group issues against their title and description"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"cl|clone"
:
{
"#desc"
:
"Clone repo from gitcode"
}
,
"apply"
:
{
"#desc"
:
"Manage repo by declare configure"
}
,
"mr"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"repo merge request management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"list merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wip"
:
{
"#desc"
:
"Filter merge requests against their wip status."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--view"
:
{
"#desc"
:
"If simple, returns the iid, URL, title, description, and basic state of merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return the request having the given iid."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return requests sorted in asc or desc order."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"desc"
}
}
,
"--state"
:
{
"#desc"
:
"Return all merge requests or just those that are opened, closed, locked, or merged."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return merge requests for the given scope: created_by_me, assigned_to_me or all."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Return merge requests matching a comma-separated list of labels."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search merge requests against their title and description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return requests ordered by created_at or updated_at fields"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"created_at"
}
}
,
"--milestone"
:
{
"#desc"
:
"Return merge requests for a specific milestone. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return prs created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Returns merge requests assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approver_ids"
:
{
"#desc"
:
"Returns merge requests which have specified all the users with the given id as individual approvers."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--source_branch"
:
{
"#desc"
:
"Return merge requests with the given source branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"Return merge requests with the given target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return merge requests created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return merge requests created on or after the given time. Expected in ISO 8601 format."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return prs updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return prs updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approved_by_ids"
:
{
"#desc"
:
"Returns merge requests which have been approved by all the users with the given id, with a maximum of 5. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return merge requests reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return prs created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--with_merge_status_recheck"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"merge requests info"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--render_html"
:
{
"#desc"
:
"If true, response includes rendered HTML for title and description."
}
,
"--include_diverged_commits_count"
:
{
"#desc"
:
"If true, response includes the commits behind the target branch."
}
,
"--include_rebase_in_progress"
:
{
"#desc"
:
"If true, response includes whether a rebase operation is in progress."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The internal ID of the merge request."
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"create merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"Title of MR."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--source_branch"
:
{
"#desc"
:
"The source branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"The target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Labels for the merge request, as a comma-separated list."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"Squash commits into a singcodee commit when merging."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Description of the merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Assignee user ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The ID of the users to assign the MR to. Set to 0 or provide an empty value to unassign all assignees."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The global ID of a milestone."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_collaboration"
:
{
"#desc"
:
"Allow commits from members who can merge to the target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_source_branch"
:
{
"#desc"
:
"Flag indicating if a merge request should remove the source branch when merging"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_project_id"
:
{
"#desc"
:
"Numeric ID of the target project."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"edit merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"Title of MR."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for a merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"Squash commits into a singcodee commit when merging."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--add_labels"
:
{
"#desc"
:
"Comma-separated label names to add to a merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state_event"
:
{
"#desc"
:
"New state (close/reopen). "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"The ID of the user to assign the merge request to."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The ID of the users to assign the merge request to. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Description of the merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The gcodeobal ID of a milestone to assign the merge request to. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_labels"
:
{
"#desc"
:
"Comma-separated label names to remove from a merge request. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"The target branch. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--discussion_locked"
:
{
"#desc"
:
"Flag indicating if the merge request discussion is locked. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_collaboration"
:
{
"#desc"
:
"Allow commits from members who can merge to the target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_source_branch"
:
{
"#desc"
:
"Flag indicating if a merge request should remove the source branch when merging. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of a merge request."
}
}
,
"merge"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"merge merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sha"
:
{
"#desc"
:
" if present, then this SHA must match the HEAD of the source branch, otherwise the merge will fail."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_commit_message"
:
{
"#desc"
:
"Custom merge commit message."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_commit_message"
:
{
"#desc"
:
"Custom squash commit message."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"If true, the commits are squashed into a singcodee commit on merge."
}
,
"--merge_when_pipeline_succeeds"
:
{
"#desc"
:
"If true, the merge request is merged when the pipeline succeeds."
}
,
"--should_remove_source_branch"
:
{
"#desc"
:
"If true, removes the source branch."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of a merge request."
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"delete merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The internal ID of the merge request."
}
}
}
,
"tag"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"repo tag management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo tag"
,
"--repo|-r"
:
{
"#desc"
:
"The URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return tags ordered by name or updated fields. Default is updated"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return tags sorted in asc or desc order. Default is desc"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--include_html_description"
:
{
"#desc"
:
"Return list of tags matching the search criteria. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show repo tag info"
,
"--repo|-r"
:
{
"#desc"
:
"The URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The name of the tag"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create repo tag"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ref"
:
{
"#desc"
:
"Create tag using commit SHA, another tag name, or branch name"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--message"
:
{
"#desc"
:
"Creates annotated tag"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The name of a tag"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove tag"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The name of a tag name"
}
}
}
,
"branch"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"repo branch management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"list repo branch"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Return list of branches containing the search string"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--per_page"
:
{
"#desc"
:
"Results per page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--page"
:
{
"#desc"
:
"Page number of the results to fetch."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"get repo branch info"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"branch name"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Delete repo branch"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merged"
:
{
"#desc"
:
"delete all branches that are merged into the repo default branch"
}
,
"#1"
:
{
"#desc"
:
"branch names"
}
}
,
"default"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"set default branch"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo."
,
"#1"
:
{
"#desc"
:
""
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"branch name"
}
}
,
"protection"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"protection branch management"
,
"#subcmd_help_tip"
:
true
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"protection branch info"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo."
,
"#1"
:
{
"#desc"
:
""
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"branch name"
}
}
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"protection branch list"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo."
,
"#1"
:
{
"#desc"
:
""
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"--search"
:
{
"#desc"
:
"Name or part of the name of protected branches to be searched for"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"unset"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"remove branch protection"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo."
,
"#1"
:
{
"#desc"
:
""
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"#1"
:
{
"#desc"
:
"branch name"
}
}
,
"set"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"set branch to protection branch"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo."
,
"#1"
:
{
"#desc"
:
""
,
"#regex"
:
{
"[-A-Za-z0-9_/.=]+"
:
""
}
}
}
,
"--push_access_level"
:
{
"#desc"
:
"Access levels allowed to push (defaults: 40)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_access_level"
:
{
"#desc"
:
"Access levels allowed to merge (defaults: 40)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--unprotect_access_level"
:
{
"#desc"
:
"Access levels allowed to unprotect (defaults: 40)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_force_push"
:
{
"#desc"
:
"Allow all users with push access to force push."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"branch name"
}
}
}
}
,
"member|collaborator"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"repo member management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo member"
,
"--repo|-r"
:
{
"#desc"
:
"<repo_id> or /<owner>/<repo>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--query"
:
{
"#desc"
:
"Search for specific users."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_users"
:
{
"#desc"
:
"Filter out users with the specified ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--show_seat_info"
:
{
"#desc"
:
"Show seat information for users"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show repo member user info"
,
"--repo|-r"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
}
}
,
"add"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Add repo member"
,
"--repo|-r"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"10"
,
"20"
,
"30"
,
"40"
,
"50"
,
"guest"
,
"reporter"
,
"developer"
,
"maintainer"
,
"owner"
]
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--invite_source"
:
{
"#desc"
:
"The source of the invitation that starts the member creation process."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_to_be_done"
:
{
"#desc"
:
"Tasks the inviter wants the member to focus on."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_repo_id"
:
{
"#desc"
:
"The project ID in which to create the task issues."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Update repo member"
,
"--repo|-r"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"10"
,
"20"
,
"30"
,
"40"
,
"50"
,
"guest"
,
"reporter"
,
"developer"
,
"maintainer"
,
"owner"
]
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove member"
,
"--repo|-r"
:
{
"#desc"
:
"<owner>/<repo> or .id=<repo_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--unassign_issuables"
:
{
"#desc"
:
""
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
}
}
}
,
"release"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"repo release management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo release"
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo or repo ID"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show detailed information of repo"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--include_html_description"
:
{
"#desc"
:
"If true, a response includes HTML rendered Markdown of the release description."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The Git tag the release is associated with"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create repo release"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ref"
:
{
"#desc"
:
"It can be a commit SHA, another tag name, or a branch name."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The release name"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of the release. Can use Markdown str."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestones"
:
{
"#desc"
:
"The title of each milestone the release is associated with. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assets_links"
:
{
"#desc"
:
"An assets.links json object of preset assets links.(stdin -)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--released_at"
:
{
"#desc"
:
"The date when the release is/was ready. Defaults to the current time. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The tag where the release is created from"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Edit release information"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The release name."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of the release. You can use Markdown."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestones"
:
{
"#desc"
:
"The title of each milestone to associate with the release"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--released_at"
:
{
"#desc"
:
"The date when the release is/was ready."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The Git tag the release is associated with"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove the repo release"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The Git tag the release is associated with"
}
}
,
"attachment|asset"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"release attachment management"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List repo release attachment links"
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo or repo ID"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show detailed information of release attachment"
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of the link"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create repo release link"
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the link. Link names must be unique in the release."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--url"
:
{
"#desc"
:
"The URL of the link."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--filepath"
:
{
"#desc"
:
"Optional path for a direct asset link."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--link_type"
:
{
"#desc"
:
"The type of the link."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"other"
,
"#cand"
:
[
"other"
,
"runbook"
,
"image"
,
"package"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Edit repo release attachment link information"
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the link. Link names must be unique in the release."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--url"
:
{
"#desc"
:
"The URL of the link."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--link_type"
:
{
"#desc"
:
"The type of the link."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"other"
,
"runbook"
,
"image"
,
"package"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of the link"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove repo release attachment link"
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The ID of the link"
}
}
,
"upload"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Upload file as asset and create release asset link"
,
"--repo|-r"
:
{
"#desc"
:
"URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_name"
:
{
"#desc"
:
"The Git tag the release is associated with"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the link. (default: filename)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--filepath"
:
{
"#desc"
:
"Optional path for a direct asset link. (default: /filename)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--link_type"
:
{
"#desc"
:
"The type of the link."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"other"
,
"#cand"
:
[
"other"
,
"runbook"
,
"image"
,
"package"
]
}
}
,
"#1"
:
{
"#desc"
:
"Target upload attachment file path"
}
}
}
}
,
"$ref"
:
"x-advise://gcode/data/repo.jso"
}
,
"issue"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"issue management"
,
"cn"
:
"issue management"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"issue list"
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--in"
:
{
"#desc"
:
"Modify the scope of the search attribute. title, description, or a string joining them with comma. Default is title,description"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"Returns issues assigned to milestones with a given timebox value (None, Any, Upcoming, and Started). "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search issues against their title and description"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--non_archived"
:
{
"#desc"
:
"Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"create issue"
,
"--repo|-r"
:
{
"#desc"
:
"<ownerPath>/<repoPath> (default ownerPath: current user)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"The title of an issue "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iid"
:
{
"#desc"
:
"The internal ID of the project issue (requires administrator or project owner rights)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_at"
:
{
"#desc"
:
"When the issue was created. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"The type of issue. One of issue, incident, or test_case. Default is issue."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"The due date."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of an issue. Limited to 1,048,576 characters."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"The ID of the user to assign the issue to. Only appears on gcode Free."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The IDs of the users to assign the issue to."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--discussion_to_resolve"
:
{
"#desc"
:
"The ID of a discussion to resolve"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"ID of the epic to add the issue to. Valid values are greater than or equal to 0."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_iid"
:
{
"#desc"
:
"IID of the epic to add the issue to. Valid values are greater than or equal to 0. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for an issue"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_request_to_resolve_discussions_of"
:
{
"#desc"
:
"The IID of a merge request in which to resolve all issues.  "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The global ID of a milestone to assign issue. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"The weight of the issue. Valid values are greater than or equal to 0."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Set an issue to be confidential. Default is false"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"update issue"
,
"--repo|-r"
:
{
"#desc"
:
"<ownerPath>/<repoPath> (default ownerPath: current user)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--add_labels"
:
{
"#desc"
:
"Comma-separated label names to add to an issue."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The IDs of the users to assign the issue to."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of an issue. Limited to 1,048,576 characters."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"The due date."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"ID of the epic to add the issue to. Valid values are greater than or equal to 0."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_iid"
:
{
"#desc"
:
"IID of the epic to add the issue to. Valid values are greater than or equal to 0. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"The type of issue. One of issue, incident, or test_case. Default is issue."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for an issue"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The global ID of a milestone to assign issue. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_labels"
:
{
"#desc"
:
"Comma-separated label names to remove from an issue. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state_event"
:
{
"#desc"
:
"The state event of an issue. Set close to close the issue and reopen to reopen it "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"The title of an issue "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_at"
:
{
"#desc"
:
"When the issue was updated. Date time string, ISO 8601 formatted,"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"The weight of the issue. Valid values are greater than or equal to 0."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Updates an issue to be confidential"
}
,
"--discussion_locked"
:
{
"#desc"
:
"Flag indicating if the issue discussion is locked If the discussion is locked only project members can add or edit comments."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The internal iid of a project issue"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"delete issue"
,
"--repo|-r"
:
{
"#desc"
:
"<ownerPath>/<repoPath> (default ownerPath: current user)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The internal iid of a project issue"
}
}
,
"$ref"
:
"x-advise://gcode/data/issue.jso"
}
,
"user"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"user management"
,
"cn"
:
"user management"
}
,
"#subcmd_help_tip"
:
true
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show information"
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_login_path> or .id=<user_id>"
}
}
,
"email"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"get current user email"
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"$ref"
:
"x-advise://gcode/data/user.jso"
}
,
"group"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"groups management"
,
"cn"
:
"groups management"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List all groups"
,
"--sort"
:
{
"#desc"
:
"Order groups in asc or desc order."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"asc"
,
"#cand"
:
[
"asc"
,
"desc"
]
}
}
,
"--search"
:
{
"#desc"
:
"Return the list of authorized groups matching the search criteria"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Order groups by"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_groups"
:
{
"#desc"
:
"Skip the group IDs passed"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--min_access_level"
:
{
"#desc"
:
"Limit to groups where current user has at least this access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--per_page"
:
{
"#desc"
:
"Results per page (max 100)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--page"
:
{
"#desc"
:
"Page number of the results to fetch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--owned"
:
{
"#desc"
:
"Limit to groups explicitly owned by the current user"
}
,
"--statistics"
:
{
"#desc"
:
"Include group statistics"
}
,
"--all_available"
:
{
"#desc"
:
"Show all the groups you have access to"
}
,
"--top_level_only"
:
{
"#desc"
:
"Limit to top level groups, excluding all subgroups"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show group information"
,
"--with_projects"
:
{
"#desc"
:
"Include details from projects that belong to the specified group"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create group"
,
"-p|--path"
:
{
"#desc"
:
"The path of the group."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The group description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"The groups visibility."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"private"
,
"internal"
,
"public"
]
}
}
,
"--subgroup_creation_level"
:
{
"#desc"
:
"Allowed to create subgroups."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"maintainer"
,
"owner"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"Output json data"
}
,
"#1"
:
{
"#desc"
:
"The name of the group."
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Update group"
,
"-p|--path"
:
{
"#desc"
:
"groups path"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the group"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The group description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"The groups visibility."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"private"
,
"internal"
,
"public"
]
}
}
,
"--subgroup_creation_level"
:
{
"#desc"
:
"Allowed to create subgroups."
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"maintainer"
,
"owner"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove group"
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
}
}
,
"member"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"group member manage"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List member"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--query"
:
{
"#desc"
:
"A query string to search for members"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--user_ids"
:
{
"#desc"
:
"Filter the results on the given user IDs"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Show groups member user info"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_,/.=]+"
:
""
}
}
}
,
"add"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Add member"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"10"
,
"20"
,
"30"
,
"40"
,
"50"
,
"guest"
,
"reporter"
,
"developer"
,
"maintainer"
,
"owner"
]
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_,/.=]+"
:
""
}
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Update member"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"10"
,
"20"
,
"30"
,
"40"
,
"50"
,
"guest"
,
"reporter"
,
"developer"
,
"maintainer"
,
"owner"
]
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_,/.=]+"
:
""
}
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Remove member"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--unassign_issuables"
:
{
"#desc"
:
"Whether the removed member should be unassigned from any issues or merge requests inside a given group or project."
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"<user_path> or .id=<user_id>"
}
}
}
,
"repo"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"group repo mange"
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"list group repo"
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
,
"#regex"
:
{
"[0-9]+"
:
""
}
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"20"
,
"#regex"
:
{
"[0-9]+"
:
""
}
}
}
,
"--visibility"
:
{
"#desc"
:
"Limit by visibility"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--archived"
:
{
"#desc"
:
"Limit by archived status"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#regex"
:
{
"[-A-Za-z0-9_/]+|https?://.+"
:
""
}
}
}
}
,
"issue"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List group issue"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search group issues against their title and description"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--non_archived"
:
{
"#desc"
:
"Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"mr"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List group merge request"
,
"--group|-g"
:
{
"#desc"
:
"<group_path> or .id=<group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--view"
:
{
"#desc"
:
"If simple, returns the iid, URL, title, description, and basic state of merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return the request having the given iid."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return requests sorted in asc or desc order."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"desc"
}
}
,
"--state"
:
{
"#desc"
:
"Return all merge requests or just those that are opened, closed, locked, or merged."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return merge requests for the given scope: created_by_me, assigned_to_me or all."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Return merge requests matching a comma-separated list of labels."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search merge requests against their title and description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return requests ordered by created_at or updated_at fields"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"created_at"
}
}
,
"--milestone"
:
{
"#desc"
:
"Return merge requests for a specific milestone. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return prs created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Returns merge requests assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approver_ids"
:
{
"#desc"
:
"Returns merge requests which have specified all the users with the given id as individual approvers."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--non_archived"
:
{
"#desc"
:
"Return merge requests from non archived projects only"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--source_branch"
:
{
"#desc"
:
"Return merge requests with the given source branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"Return merge requests with the given target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return merge requests created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return merge requests created on or after the given time. Expected in ISO 8601 format."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return prs updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return prs updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approved_by_ids"
:
{
"#desc"
:
"Returns merge requests which have been approved by all the users with the given id, with a maximum of 5. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return merge requests reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return prs created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--with_merge_status_recheck"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"$ref"
:
"x-advise://gcode/data/group.jso"
}
,
"subgroup"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"subgroups management"
,
"cn"
:
"subgroups management"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"List all subgroups"
,
"--sort"
:
{
"#desc"
:
"Order groups in asc or desc order."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Return the list of authorized groups matching the search criteria"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Order groups by name, path or id. Default is name"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_groups"
:
{
"#desc"
:
"Skip the group IDs passed"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--min_access_level"
:
{
"#desc"
:
"Limit to groups where current user has at least this access level"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--owned"
:
{
"#desc"
:
"Limit to groups explicitly owned by the current user"
}
,
"--statistics"
:
{
"#desc"
:
"Include group statistics (admins only)"
}
,
"--all_available"
:
{
"#desc"
:
"Show all the groups you have access to"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response (admins only)"
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"<group_id> or /<group_path>"
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"Create subgroups"
,
"--parent"
:
{
"#desc"
:
"<parent_group_path> or .id=<parent_group_id>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"-p|--path"
:
{
"#desc"
:
"subgroup path(default subgroup name)"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"subgroup name"
}
}
,
"$ref"
:
"x-advise://gcode/data/subgroup.jso"
}
,
"avatar"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"manage user addressbook for gcode"
,
"cn"
:
"gcode 用户地址薄管理"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"List all address books for the current session record"
,
"cn"
:
"罗列当前会话记录的所有地址薄"
}
,
"--raw"
:
{
"#desc"
:
{
"en"
:
"output format as key=value"
,
"cn"
:
"输出格式为 键=值"
}
}
}
,
"put|add"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"Add or Edit the key and value in the address book"
,
"cn"
:
"添加或修改地址薄中的 key 和 value"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"address book key"
,
"cn"
:
"地址薄键"
}
}
,
"#2"
:
{
"#desc"
:
{
"en"
:
"address book value"
,
"cn"
:
"地址薄值"
}
}
,
"#synopsis"
:
[
{
"x gcode avatar put|add <key> <value>"
:
null
}
]
}
,
"get"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"Get the value of the address book record by key"
,
"cn"
:
"通过 key 获取地址薄记录的 value"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"address book key"
,
"cn"
:
"地址薄键"
}
}
}
,
"#tldr"
:
[
{
"cmd"
:
"x gcode avatar put <key> <user_id>\nx gcode repo member add --repo <owner/repo> <key>\n"
,
"en"
:
"Add the user <user_id> to the addressbook of the current session\nUsing <key> recorded in the address book <user_id> to add the user as a repository member\n"
,
"cn"
:
"添加 user <user_id> 到当前会话的 addressbook\n使用用户地址薄 <key> 记录的 <user_id> 来添加为仓库成员\n"
}
]
}
,
"config|cfg"
:
{
"#desc"
:
{
"en"
:
"manage configuration for gcode"
,
"cn"
:
"gcode 配置管理"
}
,
"#tip"
:
[
{
"en"
:
"When you need to switch between the config and profile, Need to use `current` to switch\n\n`x gcode current <config|profile> <switch_val>`\n"
,
"cn"
:
"当你需要切换使用的 config 和 profile 时候, 需要使用 `current` 进行切换\n\n`x gcode current <config|profile> <switch_val>`\n"
}
]
,
"set"
:
{
"#desc"
:
{
"en"
:
"Setting github config"
,
"cn"
:
"Setting github config"
}
,
"--config"
:
{
"#synopsis"
:
"<path>"
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
,
"#desc"
:
{
"en"
:
"config file path. empty use default"
,
"cn"
:
"config file path. empty use default"
}
}
,
"--profile"
:
{
"#synopsis"
:
"<name>"
,
"#1"
:
null
,
"#desc"
:
{
"en"
:
"config profile name. empty use default"
,
"cn"
:
"config profile name. empty use default"
}
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"token. empty not change"
,
"cn"
:
"token. empty not change"
}
}
,
"#2"
:
{
"#desc"
:
{
"en"
:
"owner. empty not change"
,
"cn"
:
"owner. empty not change"
}
}
,
"#3"
:
{
"#desc"
:
{
"en"
:
"host"
,
"cn"
:
"host"
}
}
}
,
"get"
:
{
"#desc"
:
{
"en"
:
"Output github config"
,
"cn"
:
"Output github config"
}
,
"--config"
:
{
"#synopsis"
:
"<path>"
,
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
,
"#desc"
:
{
"en"
:
"config file path. empty use default"
,
"cn"
:
"config file path. empty use default"
}
}
,
"--profile"
:
{
"#synopsis"
:
"<name>"
,
"#1"
:
null
,
"#desc"
:
{
"en"
:
"config profile name. empty use default"
,
"cn"
:
"config profile name. empty use default"
}
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"configure key. empty output all"
,
"cn"
:
"configure key. empty output all"
}
}
}
}
,
"current|cur"
:
{
"#desc"
:
{
"en"
:
"current session default value management"
,
"cn"
:
"当前会话默认值管理"
}
,
"profile"
:
{
"#desc"
:
{
"en"
:
"switch config profile name in current session"
,
"cn"
:
"switch config profile name in current session"
}
}
,
"config"
:
{
"#1"
:
{
"#exec"
:
"___x_cmd_advise__file"
}
,
"#desc"
:
{
"en"
:
"switch config in current session"
,
"cn"
:
"switch config in current session"
}
}
,
"repo"
:
{
"#desc"
:
{
"en"
:
"switch repo in current session"
,
"cn"
:
"switch repo in current session"
}
}
,
"owner"
:
{
"#desc"
:
{
"en"
:
"switch owner in current session"
,
"cn"
:
"switch owner in current session"
}
}
,
"unset"
:
{
"#desc"
:
{
"en"
:
"unset current value in the session"
,
"cn"
:
"unset current value in the session"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"current name"
,
"cn"
:
"current name"
}
,
"#cand"
:
[
"owner"
,
"repo"
,
"config"
,
"profile"
,
"all"
]
}
}
,
"#subcmd:Main"
:
[
"profile"
,
"config"
,
"repo"
,
"owner"
]
,
"#subcmd:Management"
:
[
"unset"
]
}
,
"token"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"Add or Replace access token"
,
"cn"
:
"添加或更换私人令牌"
}
,
"--host"
:
{
"#desc"
:
{
"en"
:
"Setup request host"
,
"cn"
:
"Setup request host"
}
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"https://gitcode.net/api/v4"
}
,
"#synopsis"
:
"<url>"
}
,
"--profile"
:
{
"#desc"
:
{
"en"
:
"Setup config profile name. empty use default"
,
"cn"
:
"Setup config profile name. empty use default"
}
,
"#1"
:
{
"#desc"
:
""
}
,
"#synopsis"
:
"<name>"
}
,
"--config"
:
{
"#desc"
:
{
"en"
:
"Setup config file path. empty use default"
,
"cn"
:
"Setup config file path. empty use default"
}
,
"#1"
:
{
"#desc"
:
""
,
"#exec"
:
"___x_cmd_advise__file"
}
,
"#synopsis"
:
"<path>"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"access token"
,
"cn"
:
"私人令牌"
}
}
,
"#tip:note"
:
[
{
"en"
:
"Get GitCode access token: https://gitcode.net/-/profile/personal_access_tokens"
,
"cn"
:
"获取 GitCode 私人令牌: https://gitcode.net/-/profile/personal_access_tokens"
}
]
,
"#tip"
:
[
{
"en"
:
"When you need to switch between the config and profile, Need to use `current` to switch\n\n`x gcode current <config|profile> <switch_val>`\n"
,
"cn"
:
"当你需要切换使用的 config 和 profile 时候, 需要使用 `current` 进行切换\n\n`x gcode current <config|profile> <switch_val>`\n"
}
]
,
"#tldr"
:
[
{
"cmd"
:
"x gcode token <access_token>"
,
"en"
:
"add|repleace <access_token>"
,
"cn"
:
"添加或更换私人令牌 <access_token>"
}
,
{
"cmd"
:
"x gcode token"
,
"en"
:
"Output current record access token"
,
"cn"
:
"输出当前记录 access token"
}
]
}
,
"mr"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
{
"en"
:
"shortcut for `x gcode repo mr`"
,
"cn"
:
"`x gcode repo mr` 的简写别名"
}
,
"#subcmd_help_tip"
:
true
,
"ls|l"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"list merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wip"
:
{
"#desc"
:
"Filter merge requests against their wip status."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--view"
:
{
"#desc"
:
"If simple, returns the iid, URL, title, description, and basic state of merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return the request having the given iid."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return requests sorted in asc or desc order."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"desc"
}
}
,
"--state"
:
{
"#desc"
:
"Return all merge requests or just those that are opened, closed, locked, or merged."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return merge requests for the given scope: created_by_me, assigned_to_me or all."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Return merge requests matching a comma-separated list of labels."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search merge requests against their title and description."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return requests ordered by created_at or updated_at fields"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"created_at"
}
}
,
"--milestone"
:
{
"#desc"
:
"Return merge requests for a specific milestone. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return prs created by the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Returns merge requests assigned to the given user id."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approver_ids"
:
{
"#desc"
:
"Returns merge requests which have specified all the users with the given id as individual approvers."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--source_branch"
:
{
"#desc"
:
"Return merge requests with the given source branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"Return merge requests with the given target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return merge requests created on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return merge requests created on or after the given time. Expected in ISO 8601 format."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return prs updated on or after the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return prs updated on or before the given time."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approved_by_ids"
:
{
"#desc"
:
"Returns merge requests which have been approved by all the users with the given id, with a maximum of 5. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return merge requests reacted by the authenticated user by the given emoji. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return prs created by the given username."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--with_merge_status_recheck"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color."
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"false"
}
}
,
"--page"
:
{
"#desc"
:
"page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"30"
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"info|i"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"merge requests info"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--render_html"
:
{
"#desc"
:
"If true, response includes rendered HTML for title and description."
}
,
"--include_diverged_commits_count"
:
{
"#desc"
:
"If true, response includes the commits behind the target branch."
}
,
"--include_rebase_in_progress"
:
{
"#desc"
:
"If true, response includes whether a rebase operation is in progress."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The internal ID of the merge request."
}
}
,
"create|c"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"create merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"Title of MR."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--source_branch"
:
{
"#desc"
:
"The source branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"The target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Labels for the merge request, as a comma-separated list."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"Squash commits into a singcodee commit when merging."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Description of the merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Assignee user ID."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The ID of the users to assign the MR to. Set to 0 or provide an empty value to unassign all assignees."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The global ID of a milestone."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_collaboration"
:
{
"#desc"
:
"Allow commits from members who can merge to the target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_source_branch"
:
{
"#desc"
:
"Flag indicating if a merge request should remove the source branch when merging"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_project_id"
:
{
"#desc"
:
"Numeric ID of the target project."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
}
,
"edit|ed"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"edit merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"Title of MR."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for a merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"Squash commits into a singcodee commit when merging."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--add_labels"
:
{
"#desc"
:
"Comma-separated label names to add to a merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state_event"
:
{
"#desc"
:
"New state (close/reopen). "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"The ID of the user to assign the merge request to."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The ID of the users to assign the merge request to. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Description of the merge request."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The gcodeobal ID of a milestone to assign the merge request to. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_labels"
:
{
"#desc"
:
"Comma-separated label names to remove from a merge request. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--target_branch"
:
{
"#desc"
:
"The target branch. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--discussion_locked"
:
{
"#desc"
:
"Flag indicating if the merge request discussion is locked. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_collaboration"
:
{
"#desc"
:
"Allow commits from members who can merge to the target branch."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_source_branch"
:
{
"#desc"
:
"Flag indicating if a merge request should remove the source branch when merging. "
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of a merge request."
}
}
,
"merge"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"merge merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sha"
:
{
"#desc"
:
" if present, then this SHA must match the HEAD of the source branch, otherwise the merge will fail."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_commit_message"
:
{
"#desc"
:
"Custom merge commit message."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_commit_message"
:
{
"#desc"
:
"Custom squash commit message."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash"
:
{
"#desc"
:
"If true, the commits are squashed into a singcodee commit on merge."
}
,
"--merge_when_pipeline_succeeds"
:
{
"#desc"
:
"If true, the merge request is merged when the pipeline succeeds."
}
,
"--should_remove_source_branch"
:
{
"#desc"
:
"If true, removes the source branch."
}
,
"--json|-j"
:
{
"#desc"
:
"output json data"
}
,
"#1"
:
{
"#desc"
:
"The ID of a merge request."
}
}
,
"rm"
:
{
"#name"
:
{
"gcode"
:
null
}
,
"#desc"
:
"delete merge requests"
,
"--repo|-r"
:
{
"#desc"
:
"The ID or URL-encoded path of the repo owned by the authenticated user."
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--yes|-y"
:
{
"#desc"
:
"Ignore remove prompt interception"
}
,
"#1"
:
{
"#desc"
:
"The internal ID of the merge request."
}
}
}
,
"cl"
:
{
"#desc"
:
{
"en"
:
"shortcut for `x gcode repo clone`"
,
"cn"
:
"`x gcode repo clone` 的简写别名"
}
,
"$ref"
:
"x-advise://git/data/clone.jso"
,
"#1"
:
{
"#desc"
:
{
"en"
:
"<ownerPath>/<repoPath> (default ownerPath: current user)"
,
"cn"
:
"<所属空间地址>/<项目地址> (默认所属空间地址: 当前用户空间地址)"
}
}
}
,
"#useparam"
:
true
,
"#tip"
:
[
{
"en"
:
"Run command `x gcode token <token>` add access token. The token will be save local.\nGet GitCode access token: https://gitcode.net/-/profile/personal_access_tokens\n"
,
"cn"
:
"运行命令 `x gcode token <token>` 添加私人令牌, 私人令牌将存放于本地保存\nGitCode 私人令牌获取: https://gitcode.net/-/profile/personal_access_tokens\n"
}
]
,
"#subcmd:main"
:
[
"repo"
,
"issue"
,
"user"
,
"group"
,
"subgroup"
,
"current|cur"
,
"token"
]
,
"#subcmd:shortcut"
:
[
"cl"
,
"mr"
]
,
"#subcmd:minor"
:
[
"avatar"
,
"config|cfg"
]
}

