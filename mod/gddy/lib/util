# shellcheck shell=dash

___x_cmd_gddy_curl(){
    local op="$1"
    local _api_url="$2"
    shift 2
    local GDDY_KEY=;local GDDY_SECRET=
    GDDY_KEY="$(___x_cmd_gddy_cfg get key)"; GDDY_SECRET="$(___x_cmd_gddy_cfg get secret)"
    # local ___X_CMD_API_GDDY_HEADER="-D \"$___X_CMD_GDDY_TMP/.____x_cmd_GDDY_curl_header\""
    local ___X_CMD_GDDY_SHOW_HTTP_CODE=1
    case "$op" in
        get)
            local ___X_CMD_API_GDDY_HEADER=" -D '$___X_CMD_GDDY_TMP/.____x_cmd_gddy_curl_header' -H 'accept: application/json' -H 'Authorization: sso-key ${GDDY_KEY}:${GDDY_SECRET}' $header"
            if [ -n "$NO_CACHE" ]; then
                ___x_cmd_gddy_api get "$_api_url" "$___X_CMD_API_GDDY_HEADER"
            else
                x ccmd 10s --        eval "___x_cmd_gddy_api \"get\" \"$_api_url\" \"$___X_CMD_API_GDDY_HEADER\""
            fi
            ___x_cmd_gddy_http_error
            ;;
        post)
            local ___X_CMD_API_GDDY_HEADER="-D '$___X_CMD_GDDY_TMP/.____x_cmd_gddy_curl_header' -H 'accept: application/json' -H 'Authorization: sso-key ${GDDY_KEY}:${GDDY_SECRET}' -H 'Content-Type: application/json'$header"
            ___x_cmd_gddy_api post "$_api_url"  "$___X_CMD_API_GDDY_HEADER"  "$gen_gddy_json"
            ___x_cmd_gddy_http_error
            ;;
        patch|put)
            local ___X_CMD_API_GDDY_HEADER="-D '$___X_CMD_GDDY_TMP/.____x_cmd_gddy_curl_header' -H 'accept: application/json' -H 'Authorization: sso-key ${GDDY_KEY}:${GDDY_SECRET}' -H 'Content-Type: application/json' $header"
            ___x_cmd_gddy_api "$op" "$_api_url"  "$___X_CMD_API_GDDY_HEADER"  "$gen_gddy_json"
            ___x_cmd_gddy_http_error
            ;;
        del)
            local ___X_CMD_API_GDDY_HEADER="-D '$___X_CMD_GDDY_TMP/.____x_cmd_gddy_curl_header' -H 'accept: application/json' -H 'Authorization: sso-key ${GDDY_KEY}:${GDDY_SECRET}' $header"
            ___x_cmd_gddy_api del "$_api_url" "$___X_CMD_API_GDDY_HEADER"
            ___x_cmd_gddy_http_error
            ;;
    esac

}

# shellcheck disable=SC2154
___x_cmd_gddy_resp_header() {
    ___x_cmd_cmds_cat "$___X_CMD_GDDY_TMP/.____x_cmd_gddy_curl_header"
}

___x_cmd_gddy_resp_code(){
    ___x_cmd_gddy_resp_header | _____x_cmd_gx_get_resp_code_by_header
}

___x_cmd_gddy_http_error(){
    local http_resp_code=""
    http_resp_code="$(___x_cmd_gddy_resp_code)"
    gddy:debug "HTTP CODE: $http_resp_code"
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 200 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ -z "$___X_CMD_GDDY_SHOW_HTTP_CODE" ] || {
            gddy:error "HTTP Code is $http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_GDDY_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

___x_cmd_gddy____printf_error(){
    if ! ___x_cmd_is_interactive_tty || [ ! -t 2 ] || [ -n "$NO_COLOR" ]; then
        printf "  - ErrorMsg: %s\n" "$1" >&2
    else
        printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m%s\033[0m\n" "$1" >&2
    fi
}
___x_cmd_gddy____handle_resp(){
    [ -z "$gddy_resp_msg" ] || ___x_cmd_gddy____printf_error "$gddy_resp_msg"
    [ -z "$gddy_resp_err" ] || ___x_cmd_gddy____printf_error "$gddy_resp_err"
}
# EndSection

___x_cmd_gddy_genlist(){
    echo "" | ___x_cmd_cmds_awk -v content="$1" '
        BEGIN{
                print "["
        }
        {
            gsub("[\t]+|[,]", " ",content)
            len = split(content, arr, " ")
            for(i=1; i<=len; ++i){
                print "\""arr[i]"\""
                if(i != len) print ","
            }
        }
        END{ print "]"}
    '
}

