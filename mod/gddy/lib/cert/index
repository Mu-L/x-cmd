# shellcheck shell=dash disable=SC2034,SC2154
xrc:mod:lib gddy \
cert/email \
cert/customer \
cert/callback

___x_cmd_gddy_cert(){
    param:subcmd ___x_cmd_gddy_cert                              \
        add         "Create a pending order for certificate"     \
        validate    "Validate a pending order for certificate"   \
        ls          "Retrieve all certificate actions"           \
        rm          "Cancel a pending certificate"               \
        download    "Download  certificate"                      \
        get         "Retrieve certificate detail"                \
        reissue     "Reissue active certificate"                 \
        update      "Renew active certificate"                   \
        revoke      "Revoke active certificate"                  \
        email       "Management Email"                           \
        callback    "Management callback"                        \
        customer    "Management customer's certificates"
    param:subcmd:try
    param:run

    ___x_cmd_gddy_cert _param_help_doc
    return 1
}

___x_cmd_gddy_cert_add(){
    param:dsl    '
options:
    --market_id                          "Setting locale for communications such as emails and error messages"                                             <>="Default locale for shopper account"
    --callbackurl                        "Required if client would like to receive stateful actions via callback during certificate lifecyle"              <>=""
    --commonname                         "Name to be secured in certificate. If provided, CN field in CSR will be ignored"                                 <>=""
    --contact_email                      "Email address of requestor contact"                                                                              <>
    --contact_jobtitle                   "Only used for EVSSL. Job title of requestor contact"                                                             <>=""
    --contact_namefirst                  "First name of requestor contact"                                                                                 <>
    --contact_namelast                   "Last name of requestor contact"                                                                                  <>
    --contact_namemiddle                 "Middle initial of requestor contact"                                                                             <>=""
    --contact_phone                      "Phone number for requestor contact"                                                                              <>
    --suffix                             "Suffix of requestor contact"                                                                                     <>=""
    --csr                                "Certificate Signing Request"                                                                                     <>
    --intelvpro                          "Intel vPro® Platform"                                                                                            <>="false" = true false
    --organization_address_address1      "Address line 1 of organization address"                                                                          <>
    --organization_address_address2      "Address line 2 of organization address"                                                                          <>=""
    --organization_address_city          "City/Locality of organization address"                                                                           <>=""
    --organization_address_country       "Two character country code of organization"                                                                      <>                       = AC AD AE AF AG AI AL AM AN AO AQ AR AS AT AU AW AZ BA BB BD BE BF BG BH BI BJ BM BN BO BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CR CV CX CY CZ DE DJ DK DM DO DZ EC EE EG EH ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IS IT JE JM JO JP KE KG KH KI KM KN KR KW KY KZ LA LB LC LI LK LR LS LT LU LV LY MA MC MD ME MG MH ML MM MN MO MP MQ MR MS MT MU MV MW MX MY MZ NA NC NE NF NG NI NL NO NP NR NU NZ OM PA PE PF PG PH PK PL PM PN PR PS PT PW PY QA RE RO RS RU RW SA SB SC SE SG SH SI SJ SK SL SM SN SO SR ST SV SZ TC TD TF TG TH TJ TK TL TM TN TO TP TR TT TV TW TZ UA UG UM US UY UZ VA VC VE VG VI VN VU WF WS YE YT YU ZA ZM ZW
    --organization_address_postalcode    "Postal code of organization address"                                                                             <>=""
    --organization_address_state         "Full name of State/Province/Territory of organization address"                                                   <>=""
    --organization_assumedname           "Only for EVSSL. The DBA(does business as) name for the organization"                                             <>=""
    --organization_name                  "Name of organization that owns common name"                                                                      <>
    --organization_phone                 "Phone number for organization"                                                                                   <>
    --organization_registrationagent     "Registration agent"                                                                                              <>=""
    --organization_registrationnumber    "Registration number"                                                                                             <>=""
    --period                             "Number of years for certificate validity period"                                                                 <>
    --producttype                        "Type of product requesting a certificate. Only required non-renewal"                                             <>="STARFIELD_SHA_2"    = DV_SSL DV_WILDCARD_SSL EV_SSL OV_CS OV_DS OV_SSL OV_WILDCARD_SSL UCC_DV_SSL UCC_EV_SSL UCC_OV_SSL
    --roottype                           "Root Type"                                                                                                       <>=""                   = GODADDY_SHA_1 GODADDY_SHA_2 STARFIELD_SHA_1 STARFIELD_SHA_2
    --slotsize                           "Number of subject alternative names(SAN) to be included in certificate"                                          <>=""                   = FIVE TEN FIFTEEN TWENTY THIRTY FOURTY FIFTY ONE_HUNDRED
    --subjectalternativename             "Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate"                  <>=""

'
    param:run
    [ -z "$market_id" ]  ||   header="${header} -H 'X-Market-Id: ${market_id}' "
    local gen_gddy_json=;
    gen_gddy_json="$(param:option2json -market_id )"
    gen_gddy_json=$(printf "%s" "$gen_gddy_json" | ___x_cmd_gddy_certificate_gen_json_add | x jo fmt )

    ___x_cmd_gddy_curl post "/v1/certificates" "$gen_gddy_json" | ___x_cmd_gddy_cert___handle_ui add

}

___x_cmd_gddy_cert_validate(){
param:dsl    '
options:
    --market_id                          "Setting locale for communications such as emails and error messages"                                             <>="Default locale for shopper account"
    --callbackurl                        "Required if client would like to receive stateful actions via callback during certificate lifecyle"              <>
    --commonname                         "Name to be secured in certificate. If provided, CN field in CSR will be ignored"                                 <>
    --contact_email                      "Email address of requestor contact"                                                                              <>
    --contact_jobtitle                   "Only used for EVSSL. Job title of requestor contact"                                                             <>
    --contact_namefirst                  "First name of requestor contact"                                                                                 <>
    --contact_namelast                   "Last name of requestor contact"                                                                                  <>
    --contact_namemiddle                 "Middle initial of requestor contact"                                                                             <>
    --contact_phone                      "Phone number for requestor contact"                                                                              <>
    --suffix                             "Suffix of requestor contact"                                                                                     <>
    --csr                                "Certificate Signing Request"                                                                                     <>
    --intelvpro                          "Intel vPro® Platform"                                                                                            <>="false" = true false
    --organization_address_address1      "Address line 1 of organization address"                                                                          <>
    --organization_address_address2      "Address line 2 of organization address"                                                                          <>
    --organization_address_city          "City/Locality of organization address"                                                                           <>
    --organization_address_country       "Two character country code of organization"                                                                      <> = AC AD AE AF AG AI AL AM AN AO AQ AR AS AT AU AW AZ BA BB BD BE BF BG BH BI BJ BM BN BO BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CR CV CX CY CZ DE DJ DK DM DO DZ EC EE EG EH ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IS IT JE JM JO JP KE KG KH KI KM KN KR KW KY KZ LA LB LC LI LK LR LS LT LU LV LY MA MC MD ME MG MH ML MM MN MO MP MQ MR MS MT MU MV MW MX MY MZ NA NC NE NF NG NI NL NO NP NR NU NZ OM PA PE PF PG PH PK PL PM PN PR PS PT PW PY QA RE RO RS RU RW SA SB SC SE SG SH SI SJ SK SL SM SN SO SR ST SV SZ TC TD TF TG TH TJ TK TL TM TN TO TP TR TT TV TW TZ UA UG UM US UY UZ VA VC VE VG VI VN VU WF WS YE YT YU ZA ZM ZW
    --organization_address_postalcode    "Postal code of organization address"                                                                             <>
    --organization_address_state         "Full name of State/Province/Territory of organization address"                                                   <>
    --organization_assumedname           "Only for EVSSL. The DBA(does business as) name for the organization"                                             <>
    --organization_name                  "Name of organization that owns common name"                                                                      <>
    --organization_phone                 "Phone number for organization"                                                                                   <>
    --organization_registrationagent     "Registration agent"                                                                                              <>
    --organization_registrationnumber    "Registration number"                                                                                             <>
    --period                             "Number of years for certificate validity period"                                                                 <>=0
    --producttype                        "Type of product requesting a certificate. Only required non-renewal"                                             <>      = DV_SSL DV_WILDCARD_SSL EV_SSL OV_CS OV_DS OV_SSL OV_WILDCARD_SSL UCC_DV_SSL UCC_EV_SSL UCC_OV_SSL
    --roottype                           "Root Type"                                                                                                       <>=""   = GODADDY_SHA_1 GODADDY_SHA_2 STARFIELD_SHA_1 STARFIELD_SHA_2
    --slotsize                           "Number of subject alternative names(SAN) to be included in certificate"                                          <>=""   = FIVE TEN FIFTEEN TWENTY THIRTY FOURTY FIFTY ONE_HUNDRED
    --subjectalternativename             "Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate"                  <>

'
    param:run
    [ -z "$market_id" ]  ||   header="${header} -H 'X-Market-Id: ${market_id}' "
    local gen_gddy_json=;
    gen_gddy_json="$(param:option2json -market_id )"
    gen_gddy_json=$(printf "%s" "$gen_gddy_json" | ___x_cmd_gddy_certificate_gen_json_add | x jo fmt )

    ___x_cmd_gddy_curl post "/v1/certificates/validate" "$gen_gddy_json"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf  true "[Success]: Validate successful"
    else
        ___x_cmd_ui_tf false "Validate failure" >&2
    fi
}

___x_cmd_gddy_cert_ls(){
param:dsl    '
options:
    #1                   "Certificate id to register for callback"                  <>
'
    param:run
    ___x_cmd_gddy_curl get "/v1/certificates/${1}/actions" | ___x_cmd_gddy_cert___handle_ui ls
}

___x_cmd_gddy_cert_rm(){
    param:dsl    '
options:
    #1                   "Certificate id to cancel"                                 <>
'
    param:run

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure to cancel the pending certificate  $(___x_cmd_ui bold red "$1") ?" || return
    ___x_cmd_gddy_curl post "/v1/certificates/${1}/cancel"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf  true "[Success]: Cancel the pending certificate successful"
    else
        ___x_cmd_ui_tf false "Cancel the pending certificate failure" >&2
    fi
}

___x_cmd_gddy_cert_download(){
    param:dsl    '
options:
    #1                   "Certificate id to download"                               <>
'
    param:run
    ___x_cmd_gddy_curl post "/v1/certificates/${1}/download" | ___x_cmd_gddy_cert___handle_ui download
}

___x_cmd_gddy_cert_get(){
    param:dsl    '
options:
    #1                   "Certificate id to lookup"                                 <>
'
    param:run
    ___x_cmd_gddy_curl get "/v1/certificates/${1}" | ___x_cmd_gddy_cert___handle_ui download get
}

___x_cmd_gddy_cert_reissue(){
    param:dsl    '
options:
    #1                         "Certificate id to reissue"                                                                 <>
    --callbackurl              "Callback URL"                                                                              <>
    --commonname               "The common name of certificate to be reissued"                                             <>="Existing common name"
    --csr                      "Certificate Signing Request"                                                               <>="Existing CSR"
    --delayexistingrevoke      "In hours, time to delay revoking existing certificate after issuance of new certificate"   <>=72
    --roottype                 "Root Type"                                                                                 <>="GODADDY_SHA_1"  =  GODADDY_SHA_1 GODADDY_SHA_2 STARFIELD_SHA_1 STARFIELD_SHA_2
    --subjectalternativenames  "An array of subject alternative names to include in certificate"                           <>
    --forcedomainrevetting     "Domain verification will be required for each domain listed here"                          <>
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -subjectAlternativeNames -forceDomainRevetting )"
    gen_gddy_json="$(printf "%s", $gen_gddy_json | ___x_cmd_gddy_certificate_gen_json $subjectAlternativeNames $forceDomainRevetting)"
    ddy:debug "$gen_gddy_json"
    ___x_cmd_gddy_curl post "/v1/certificates/${1}/reissue" "$gen_gddy_json"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf  true "[Success]: reissue $1 successful"
    else
        ___x_cmd_ui_tf false "reissue $1 failure" >&2
    fi

}

___x_cmd_gddy_cert_update(){
    param:dsl    '
options:
    #1                         "Certificate id to renew"                                             <>
    --callbackurl              "Callback URL"                                                        <>
    --commonname               "The common name of certificate to be renewed"                        <>="Existing common name"
    --csr                      "Certificate Signing Request"                                         <>="Existing CSR"
    --period                   "Number of years for certificate validity period"                     <>=0
    --roottype                 "Root Type"                                                           <>="GODADDY_SHA_1"  =  GODADDY_SHA_1 GODADDY_SHA_2 STARFIELD_SHA_1 STARFIELD_SHA_2
    --subjectalternativenames  "An array of subject alternative names to include in certificate"     <>
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -subjectAlternativeNames -forceDomainRevetting )"
    gen_gddy_json="$(printf "%s", $gen_gddy_json | ___x_cmd_gddy_certificate_gen_json $subjectAlternativeNames | x jo)"
    gddy:debug "$gen_gddy_json"
    ___x_cmd_gddy_curl post "/v1/certificates/${1}/reissue" "$gen_gddy_json"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf  true "[Success]: update $1 successful"
    else
        ___x_cmd_ui_tf false "update $1 failure" >&2
    fi

}

___x_cmd_gddy_cert_revoke(){
    param:dsl    '
options:
    #1                   "Certificate id to revoke"                                    <>
    --reason             "The certificate revocation request"                          <>
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json)"

    ___x_cmd_gddy_curl post "/v1/certificates/${1}/revoke" "$gen_gddy_json"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf  true "[Success]: revoke $1 successful"
    else
        ___x_cmd_ui_tf false "revoke $1 failure" >&2
    fi
}

___x_cmd_gddy_certificate_gen_json(){
    ___x_cmd_cmds_awk -v subjectAlternativeNames="$1" -v forceDomainRevetting="$2" '
    BEGIN{print "{"}
    NR==4{print "callbackUrl: " $0; print ","}
    NR==8{print "commonName: " $0; print ","}
    NR==12{print "csr: " $0; print ","}
    NR==16{print "delayExistingRevoke: " $0; print ","}
    NR==20{print "rootType: " $0; print ","}
    END{
        print "subjectAlternativeNames: ["
        print "\""subjectAlternativeNames"\""
        print "]"
        if (forceDomainRevetting != ""){
            print ","
            print "forceDomainRevetting: ["
            print "\""forceDomainRevetting"\""
            print "]"
        }
        print "}"
    }
    '
}

___x_cmd_gddy_certificate_gen_json_add(){
    ___x_cmd_cmds_awk '
    NR==4{cmd = cmd  "{";cmd = cmd  "callbackUrl: " $0; cmd = cmd  "," }
    NR==8{cmd = cmd  "commonName: " $0; cmd = cmd  ","; cmd = cmd  "contact : {" }
    NR==12{cmd = cmd  "email: " $0; cmd = cmd  ","}
    NR==16{cmd = cmd  "jobtitle: " $0; cmd = cmd  ","}
    NR==20{cmd = cmd  "nameFirst: " $0; cmd = cmd  ","}
    NR==24{cmd = cmd  "nameLast: " $0; cmd = cmd  ","}
    NR==28{cmd = cmd  "nameMiddle: " $0; cmd = cmd  ","}
    NR==32{cmd = cmd  "phone: " $0; cmd = cmd  ","}
    NR==36{cmd = cmd  "suffix: " $0;  cmd = cmd  "},"}
    NR==40{cmd = cmd  "csr: " $0;  cmd = cmd  ","}
    NR==44{cmd = cmd  "intelVPro: " $0;  cmd = cmd  ","; cmd = cmd  "organization : {" ; cmd = cmd  "address: {" }
    NR==48{cmd = cmd  "address1: " $0;  cmd = cmd  ","}
    NR==52{cmd = cmd  "address2: " $0;  cmd = cmd  ","}
    NR==56{cmd = cmd  "city: " $0;  cmd = cmd  ","}
    NR==60{cmd = cmd  "country: " $0;  cmd = cmd  ","}
    NR==64{cmd = cmd  "postalCode: " $0;  cmd = cmd  ","}
    NR==68{cmd = cmd  "state: " $0;  cmd = cmd  ","; cmd = cmd  "},"}
    NR==72{cmd = cmd  "assumedName: " $0;  cmd = cmd  ","}
    NR==76{cmd = cmd  "name: " $0;  cmd = cmd  ","}
    NR==80{cmd = cmd  "phone: " $0;  cmd = cmd  ","}
    NR==84{cmd = cmd  "registrationAgent: " $0;  cmd = cmd  ","}
    NR==88{cmd = cmd  "registrationNumber: " $0;  cmd = cmd  ","; cmd = cmd  "},"}
    NR==92{cmd = cmd  "period: " $0;  cmd = cmd  ","}
    NR==96{cmd = cmd  "productType: " $0;  cmd = cmd  ","}
    NR==100{cmd = cmd  "rootType: " $0;  cmd = cmd  ","}
    NR==104{cmd = cmd  "slotSize: " $0;  cmd = cmd  ","}
    NR==108{cmd = cmd  "subjectAlternativeName: " "["$0"]";  cmd = cmd ; cmd = cmd  "}"}
    END{print cmd}
    '

}


___x_cmd_gddy_cert___handle_ui(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gddy_http_error
        return
    fi
    if ___x_cmd_gddy_http_error; then
        case "$1" in
            add)
                x ja jl2c .certificateId | \
                x csv header --add CertificateId | \
                x csv static_tab
                ;;
            ls)
                x ja jl2c .createdAt .type |\
                x csv header --add  CreatedAt  Type | \
                x csv static_tab
                ;;
            download)
                x ja jl2c .pems.certificate .pems.cross .pems.intermediate .pems.root |\
                x csv header --add Certificate Cross Intermediate Root |\
                x csv static_tab
                ;;
            get)
                x ja jl2c .certificateId .commonName .contact.email .status |\
                x csv header --add Certificate CommonName Email Status |\
                x csv static_tab
                ;;
        esac
    fi


}

