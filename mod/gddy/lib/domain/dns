# shellcheck shell=dash disable=SC2034,SC2154
___x_cmd_gddy_domain_dns(){
    param:subcmd ___x_cmd_gddy_domain_dns                                                                                   \
        add                "Add the specified DNS Records to the specified Domain"                                          \
        replace            "Replace all DNS Records for the specified Domain"                                               \
        get                "Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name"  \
        replacebyname      "Replace all DNS Records for the specified Domain with the specified Type and Name"              \
        rm                 "Delete all DNS Records for the specified Domain with the specified Type and Name"               \
        replacebytype      "Replace all DNS Records for the specified Domain with the specified Type"

    param:subcmd:try
    param:run
    return 1
}

___x_cmd_gddy_domain_dns_add(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be augmented"                       <>
    --id           "Shopper ID which owns the domain"                                   <>=""
    --data         "data"                                                               <>
    --name         "domain name"                                                        <>
    --port         "Service port (SRV only)"                                            <>="65535"
    --priority     "Record priority (MX and SRV only)"                                  <>=0
    --protocol     "Service protocol (SRV only)"                                        <>
    --service      "Service type (SRV only)"                                            <>
    --ttl          "Time To Live"                                                       <>=0
    --type         "type"                                                               <>    = A AAAA CNAME MX NS SOA SRV TXT
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'

    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gddy:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl patch "/v1/domains/$1/records"

    if ! ___x_cmd_gddy_http_error; then
            ___x_cmd_ui_tf  true "[Success]: Domain adds DNS successful"
    else
        ___x_cmd_ui_tf false "Domain adds DNS failure" >&2
    fi
}

___x_cmd_gddy_domain_dns_replace(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be replaced"                        <>
    --id           "Shopper ID which owns the domain"                                   <>=""
    --data         "data"                                                               <>
    --name         "domain name"                                                        <>
    --port         "Service port (SRV only)"                                            <>=65535
    --priority     "Record priority (MX and SRV only)"                                  <>=""
    --protocol     "Service protocol (SRV only)"                                        <>
    --service      "Service type (SRV only)"                                            <>
    --ttl          "Time To Live"                                                       <>=0
    --type         "type"                                                               <>= A AAAA CNAME MX NS SOA SRV TXT
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gh:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl put "/v1/domains/$1/records"

    if ! ___x_cmd_gddy_http_error; then
            ___x_cmd_ui_tf  true "[Success]: Domain replaces DNS successful"
    else
        ___x_cmd_ui_tf false "Domain replaces DNS failure" >&2
    fi
}

___x_cmd_gddy_domain_dns_get(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be retrieved"                       <>
    --id           "Shopper ID which owns the domain"                                   <>=""
    --type         "DNS Record Type for which DNS Records are to be retrieved"          <>="A"     = A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be retrieved"          <>
    --offset       "Number of results to skip for pagination"                           <>=""
    --limit        "Maximum number of items to return"                                  <>=""

    --json|-j      "output raw JSON data"
'
    param:run
    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    [ -z "$offset" ] || local offset_content="offset=$offset"
    [ -z "$limit" ] || local limit_content="limit=$limit"
    if [ -z "$offset"  ] && [ -z "$limit" ]; then
        ___x_cmd_gddy_curl get "/v1/domains/$1/records/${type}/${name}"
    elif [ -n "$offset"  ] && [ -n "$limit" ];then
        ___x_cmd_gddy_curl get "/v1/domains/$1/records/${type}/${name}?${offset_content}&${limit_content}" | ___x_cmd_gddy_domain_dns___handle_ui get
    else
        ___x_cmd_gddy_curl get "/v1/domains/$1/records/${type}/${name}?${offset_content}${limit_content}" | ___x_cmd_gddy_domain_dns___handle_ui get
    fi
}


___x_cmd_gddy_domain_dns_replacebytype(){
param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    --id           "Shopper ID which owns the domain"                                   <>=""
    --domain       "Domain whose DNS Records are to be replaced"                        <>
    --type         "DNS Record Type for which DNS Records are to be replaced"           <>= A AAAA CNAME MX NS SOA SRV TXT
    --data         "data"                                                               <>
    --name         "name"                                                               <>
    --port         "Service port (SRV only)"                                            <>="65535"
    --priority     "Record priority (MX and SRV only)"                                  <>=0
    --protocol     "Service protocol (SRV only)"                                        <>
    --service      "Service type (SRV only)"                                            <>
    --ttl          "Time To Live"                                                       <>=0
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id -type -domain)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gddy:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl put "/v1/domains/$1/records/${type}"

    if ! ___x_cmd_gddy_http_error; then
            ___x_cmd_ui_tf  true "[Success]: Replace dns record  successful"
    else
        ___x_cmd_ui_tf false "Replace dns record  failure" >&2
    fi
}

___x_cmd_gddy_domain_dns_rm(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be deleted"                    <>
    --id           "Shopper ID which owns the domain"                              <>=""
    --type         "DNS Record Type for which DNS Records are to be deleted"       <>="A"  = A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be deleted"       <>

    --yes          "Ignore remove prompt interception"
    --json|-j      "output raw JSON data"
'
    param:run
    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl del "/v1/domains/$1/records/${type}/${name}"

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure to delete dns record for the specified domain with the  $(___x_cmd_ui bold red "$type") and  $(___x_cmd_ui bold red "$name") ?" || return

    if ! ___x_cmd_gddy_http_error; then
            ___x_cmd_ui_tf  true "[Success]: Deleted dns record for doamin($domain) successful"
    else
        ___x_cmd_ui_tf false "Deleted dns record for doamin($domain) failure" >&2
    fi
}

___x_cmd_gddy_domain_dns_replacebyname(){
param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be replaced"                        <>
    --id           "Shopper ID which owns the domain"                                   <>=""
    --type         "DNS Record Type for which DNS Records are to be replaced"           <>= A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be replaced"           <>
    --data         "data"                                                               <>
    --port         "Service port (SRV only)"                                            <>=65535
    --priority     "Record priority (MX and SRV only)"                                  <>=""
    --protocol     "Service protocol (SRV only)"                                        <>
    --service      "Service type (SRV only)"                                            <>
    --ttl          "Time To Live"                                                       <>=0
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id -type -name)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gddy:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl put "/v1/domains/$1/records/${type}/${name}"


    if ! ___x_cmd_gddy_http_error; then
            ___x_cmd_ui_tf  true "[Success]: Replace dns record  successful"
    else
        ___x_cmd_ui_tf false "Replace dns record  failure" >&2
    fi

}

___x_cmd_gddy_domain_dns___handle_ui(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        ___x_cmd_cmds cat
        ___x_cmd_gddy_http_error
        return
    fi
    if ___x_cmd_gddy_http_error; then
        case "$1" in

            get)
                x jo 2c .data .name .port .priority .type | \
                x csv header --add  Name    Port  Priority Type | \
                x csv static_tab
                ;;
        esac

    else
        ___x_cmd_cmds cat
        ___x_cmd_gddy_http_error
    fi
}
