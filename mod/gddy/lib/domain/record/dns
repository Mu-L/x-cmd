# shellcheck shell=dash disable=SC2034,SC2154
# https://developer.godaddy.com/doc/endpoint/domains#/
___x_cmd_gddy_domain_record(){
    param:subcmd ___x_cmd_gddy_domain_record                                                                                  \
        ls                 "Retrieve DNS Records for the specified Domain with interactive UI table"                  \
        ll                 "Retrieve DNS Records for the specified Domain with terminal table"                        \
        add                "Add the specified DNS Records to the specified Domain"                                    \
        rm                 "Delete all DNS Records for the specified Domain with the specified Type and Name"         \
        "edit|ed"          "Edit the specified DNS Records to the specified Domain"

    param:subcmd:try
    param:run
    ___x_cmd_gddy_domain_record  _param_help_doc
    return 1
}

# https://developer.godaddy.com/doc/endpoint/domains#/v1/recordAdd
___x_cmd_gddy_domain_record_add(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be augmented"                       <>
    --shopper_id   "Shopper ID which owns the domain"                                   <>=""
    --data         "data"                                                               <>=""
    --name         "domain name"                                                        <>
    --port         "Service port (SRV only)"                                            <>="65535"
    --priority     "Record priority (MX and SRV only)"                                  <>=0
    --protocol     "Service protocol (SRV only)"                                        <>=""
    --service      "Service type (SRV only)"                                            <>=""
    --ttl          "Time To Live"                                                       <>
    --type         "type"                                                               <>=CNAME    = A AAAA CNAME MX NS SOA SRV TXT
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'

    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gddy:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl patch "/v1/domains/$1/records" | ___x_cmd_gddy_dns___handle_ui add

}


___x_cmd_gddy_domain_record_edit(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be augmented"                       <>
    --shopper_id   "Shopper ID which owns the domain"                                   <>=""
    --data         "data"                                                               <>=""
    --name         "domain name"                                                        <>
    --port         "Service port (SRV only)"                                            <>="65535"
    --priority     "Record priority (MX and SRV only)"                                  <>=0
    --protocol     "Service protocol (SRV only)"                                        <>=""
    --service      "Service type (SRV only)"                                            <>=""
    --ttl          "Time To Live"                                                       <>
    --type         "type"                                                               <>=CNAME    = A AAAA CNAME MX NS SOA SRV TXT
    --wright       "Record weight (SRV only)"                                           <>=0

    --json|-j      "output raw JSON data"
'

    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json -id)"
    gen_gddy_json="$(x jo list $gen_gddy_json)"
    gddy:debug "$gen_gddy_json"

    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
    ___x_cmd_gddy_curl del "/v1/domains/$1/records/${type}/${name}"

    if ! ___x_cmd_gddy_http_error; then
        ___x_cmd_ui_tf false "Edit Dns failed"
        return 1
    else
        [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"
        ___x_cmd_gddy_curl patch "/v1/domains/$1/records" | ___x_cmd_gddy_dns___handle_ui edit
    fi
}


# https://developer.godaddy.com/doc/endpoint/domains#/v1/recordGet
___x_cmd_gddy_domain_record_ls(){
    ___x_cmd_gx_is_interactive_env || { ___x_cmd_gddy_domain_record_ll "$@"; return; }
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be retrieved"                       <>
    --shopper_id   "Shopper ID which owns the domain"                                   <>=""
    --type         "DNS Record Type for which DNS Records are to be retrieved"          <>=""     = A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be retrieved"          <>=""
    --offset       "Number of results to skip for pagination"                           <>="0"
    --limit        "Maximum number of items to return"                                  <>=""

    --json|-j      "output raw JSON data"
'
    param:run
    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"

    if
    ___x_cmd_gddy_curl get "/v1/domains/$1/records/${type}/${name}" offset limit |\
    ___x_cmd_gddy_dns___handle_ui ls

}

___x_cmd_gddy_domain_record_ll(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be retrieved"                       <>
    --shopper_id   "Shopper ID which owns the domain"                                   <>=""
    --type         "DNS Record Type for which DNS Records are to be retrieved"          <>=""     = A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be retrieved"          <>=""
    --offset       "Number of results to skip for pagination"                           <>="0"
    --limit        "Maximum number of items to return"                                  <>=""

    --json|-j      "output raw JSON data"
'
    param:run
    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"

    ___x_cmd_gddy_curl get "/v1/domains/$1/records/${type}/${name}" offset limit |\
    ___x_cmd_gddy_dns___handle_ui ll

}


# https://developer.godaddy.com/doc/endpoint/domains#/v1/recordDeleteTypeName
___x_cmd_gddy_domain_record_rm(){
    param:scope     ___x_cmd_gddy
    param:dsl    '
options:
    #1             "Domain whose DNS Records are to be deleted"                    <>
    --shopper_id   "Shopper ID which owns the domain"                              <>=""
    --type         "DNS Record Type for which DNS Records are to be deleted"       <>=""  = A AAAA CNAME MX NS SOA SRV TXT
    --name         "DNS Record Name for which DNS Records are to be deleted"       <>

    --yes          "Ignore remove prompt interception"
    --json|-j      "output raw JSON data"
'
    param:run
    [ -z "$id" ] || local header="-H 'X-Shopper-Id: $id'"

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure to delete dns record for the specified domain with the  $(___x_cmd_ui bold red "$type") and  $(___x_cmd_ui bold red "$name") ?" || return

    ___x_cmd_gddy_curl del "/v1/domains/$1/records/${type}/${name}" |\
    ___x_cmd_gddy_dns___handle_ui rm

}


___x_cmd_gddy_dns___handle_ui(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        ___x_cmd_cmds cat
        ___x_cmd_gddy_http_error
        return
    fi
    local successful_msg= ; local error_msg=
    (
        local data
        x jo env data=.

        case "$1" in

            ls)

                if ! ___x_cmd_gddy_http_error; then
                    printf "%s" "$data"
                else
                    printf "%s" "$data" | \
                    x ja 2c .data .name  .ttl .type| \
                    x csv header --add  Data Name  ttl Type | \
                    x csv app --width 25%,25%,25%,- --return print
                fi

                return
                ;;
            ll)
                if ! ___x_cmd_gddy_http_error; then
                    printf "%s" "$data"
                else
                    printf "%s" "$data" | \
                    x ja 2c .data .name  .ttl .type| \
                    x csv header --add  Data Name  ttl Type | \
                     x csv static_tab
                fi
                return
                ;;

            *)
                successful_msg="[Success]: Domain $1 transferin successful"
                error_msg="Domain $1 transferin failure"
                x jo env err_msg=.message
                ;;

        esac

        if ! ___x_cmd_gddy_http_error; then
            gddy:error "$err_msg"
            ___x_cmd_ui_tf false "$error_msg"
        else
            ___x_cmd_ui_tf true "$successful_msg"
        fi
    )

}


