# shellcheck shell=dash disable=SC2034
___x_cmd_gddy_sub(){
    param:subcmd ___x_cmd_gddy_sub                                                    \
        ls              "Retrieve a list of Subscriptions for the specified Shopper"  \
        productgroups   "Retrieve a list of ProductGroups for the specified Shopper"  \
        rm              "Cancel the specified Subscription"                           \
        info            "Retrieve details for the specified Subscription"             \
        update          "Update details for the specified Subscription"
    param:subcmd:try
    param:run

    ___x_cmd_gddy_sub _param_help_doc
    return 1
}

___x_cmd_gddy_sub_ls(){
    param:dsl    '
options:
    --shopper_id               "Shopper ID to return subscriptions for when not using JWT"                                   <>=""
    --market_id                "The market that the response should be formatted for"                                        <>="en-US"  = da-DK de-AT de-CH de-DE el-GR en-AE en-AU en-CA en-GB en-HK en-IE en-IL en-IN en-MY en-NZ en-PH en-PK en-SG en-US en-ZA es-AR es-CL es-CO es-ES es-MX es-PE es-US es-VE fi-FI fr-BE fr-CA fr-CH fr-FR hi-IN id-ID it-CH it-IT ja-JP ko-KR mr-IN nb-NO nl-BE nl-NL pl-PL pt-BR pt-PT ru-RU sv-SE ta-IN th-TH tr-TR uk-UA vi-VN zh-HK zh-SG zh-TW
    --productgroupkeys         "Only return Subscriptions with the specified product groups(separated by comma)"             <>=""
    --includes                 "Optional details to be included in the response"                                             <>=""
    --offset                   "Number of Subscriptions to skip before starting to return paged results"                     <>=0
    --limit                    "Number of Subscriptions to retrieve in this page, starting after offset"                     <>=25
    --sort                     "Property name that will be used to sort results"                                             <>="-expiresAt"   =  expiresAt -expiresAt

    --json|-j                  "output raw JSON data"
'
    param:run

    ___x_cmd_gddy_curl get "/v1/subscriptions?${cmd}" | ___x_cmd_gddy_sub____ui_handler ls

}

___x_cmd_gddy_sub_productgroups(){
    param:dsl    '
options:
    --shopper_id               "Shopper ID to return subscriptions for when not using JWT"                                   <>=""
    --market_id                "The market that the response should be formatted for"                                        <>="en-US"  = da-DK de-AT de-CH de-DE el-GR en-AE en-AU en-CA en-GB en-HK en-IE en-IL en-IN en-MY en-NZ en-PH en-PK en-SG en-US en-ZA es-AR es-CL es-CO es-ES es-MX es-PE es-US es-VE fi-FI fr-BE fr-CA fr-CH fr-FR hi-IN id-ID it-CH it-IT ja-JP ko-KR mr-IN nb-NO nl-BE nl-NL pl-PL pt-BR pt-PT ru-RU sv-SE ta-IN th-TH tr-TR uk-UA vi-VN zh-HK zh-SG zh-TW

    --json|-j                   "output raw JSON data"
'
    param:run
    [ -z "$shopper_id" ] ||  header=" -H 'X-Shopper-Id: ${shopper_id}' "
    [ -z "$market_id" ] ||   header="${header} -H 'X-Market-Id: ${market_id}' "

    ___x_cmd_gddy_curl get "/v1/subscriptions/productGroups" |  ___x_cmd_gddy_sub____ui_handler productgroups

}

___x_cmd_gddy_sub_rm(){
    param:dsl    '
options:
    #1                         "Unique identifier of the Subscription to cancel"                             <>
    --shopper_id               "Shopper ID to cancel subscriptions for when not using JWT"                   <>=""

    --yes                      "Ignore remove prompt interception"
    --json|-j                  "output raw JSON data"
'
    param:run

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure to cancel the specified subscription: $(___x_cmd_ui bold red "$shopper_id") ?" || return
    ___x_cmd_gddy_curl del "/v1/subscriptions/$1" | (
                [ -z "$json" ] || { command cat; return; }
                if ___x_cmd_gh_http_error; then
                    ___x_cmd_ui_tf  true "[Success]: cancel the specified subscription: $1"
                else
                    ___x_cmd_ui_tf false "cancel the specified subscription: $1  failure:" >&2
                    return 1
                fi
            )
}


___x_cmd_gddy_sub_info(){
    param:dsl    '
options:
    #1                         "Unique identifier of the Subscription to retrieve"                           <>
    --shopper_id               "Shopper ID to cancel subscriptions for when not using JWT"                   <>=""
    --market_id                "Unique identifier of the Market in which the request is happening"           <>="en-US"  = da-DK de-AT de-CH de-DE el-GR en-AE en-AU en-CA en-GB en-HK en-IE en-IL en-IN en-MY en-NZ en-PH en-PK en-SG en-US en-ZA es-AR es-CL es-CO es-ES es-MX es-PE es-US es-VE fi-FI fr-BE fr-CA fr-CH fr-FR hi-IN id-ID it-CH it-IT ja-JP ko-KR mr-IN nb-NO nl-BE nl-NL pl-PL pt-BR pt-PT ru-RU sv-SE ta-IN th-TH tr-TR uk-UA vi-VN zh-HK zh-SG zh-TW

    --json|-j                   "output raw JSON data"
'
    param:run
    local header=
    [ -z "$shopper_id" ] ||  header=" -H 'X-Shopper-Id: ${shopper_id}' "
    [ -z "$market_id" ] ||   header="${header} -H 'X-Market-Id: ${market_id}' "

    ___x_cmd_gddy_curl get "/v1/subscriptions/$1" | ___x_cmd_gddy_sub____ui_handler info
}

___x_cmd_gddy_sub_update(){
        param:dsl    '
options:
    #1                         "Unique identifier of the Subscription to update"                                           <>
    --paymentprofileid         "Unique identifier of the payment profile you want to be used for automatic renewal"        <>="0"
    --renewauto                "Whether or not you want the Subscription renew automatically"                              <>=true   = true false

    --json|-j                   "output raw JSON data"

'
    param:run
    local gen_gddy_json=""
    gen_gddy_json="$(param:option2json)"
    gddy:debug "$gen_gddy_json"

    ___x_cmd_gddy_curl patch "/v1/subscriptions/$1" "$gen_gddy_json" | ___x_cmd_gddy_sub____ui_handler update

}

___x_cmd_gddy_sub____ui_handler(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gddy_http_error
        return
    fi
    if ___x_cmd_gddy_http_error; then
        case "$1" in

            ls)
                x ja jl2c .pagination.last   .pagination.total | \
                x csv header --add  Last   Total   | \
                x csv static_tab
                ;;

            productgroups)
                x jo 2c 1.productGroupKey 1.subscriptionCount | \
                x csv header --add  ProductGroupKey   Count   | \
                x csv static_tab
                ;;
            info)
                x ja jl2c  1.billing.commitment 1.cancelable 1.product.namespace  1.product.pfid | \
                x csv header --add  Billing.Status  Cancelable  Product_Namespace   Product_Pfid  | \
                x csv static_tab
                ;;
            update)
                x ja jl2c 1.paymentProfileId 1.renewAuto |\
                x csv header --add  PaymentProfileId  RenewAuto  | \
                x csv static_tab
                ;;
        esac
    fi
}


