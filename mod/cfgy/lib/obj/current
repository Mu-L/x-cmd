
___x_cmd_cfgy_obj_current(){
    local op="$1"; shift
    case "$op" in
        get|get_|set|getset|profile)
            ___x_cmd_cfgy_obj_current_"$op" "$@" ;;
        *)  x help -m cfgy obj current >&2
            return 1
            ;;
    esac
}

___x_cmd_cfgy_obj_current_getset(){
    local envvarname="$1"
    local key="$2"
    [ -n "$envvarname" ] || N=cfgy M="Provide current env varname" log:ret:64
    [ -n "$key" ] || N=cfgy M="Provide current key" log:ret:64
    shift 2
    if [ $# -eq 0 ]; then   ___x_cmd_cfgy_obj_current_get "$envvarname" "$key"
    else                    ___x_cmd_cfgy_obj_current_set "$envvarname" "$key"  "$@"
    fi
}

___x_cmd_cfgy_obj_current_get(){
    local x_
    ___x_cmd_cfgy_obj_current_get_ "$@" || return
    printf "%s\n" "$x_"
}

# x chat proxy get X_CHAT_PROXY key
___x_cmd_cfgy_obj_current_get_(){
    local envvarname="$1";
    [ -n "$envvarname" ] || N=cfgy M="Provide current env varname" log:ret:64
    shift;  x_=""
    [ -z "$envvarname" ] || eval x_=\"\$"$envvarname"\"

    [ -z "$x_" ] || return 0
    ___x_cmd_cfgy_obj_get_ "$1"
}


# x chat proxy set --save
# x cfgy obj current set X_CHAT_PROXY proxy --save sock://

# generate code
# gen
___x_cmd_cfgy_obj_current_set(){
    local envvarname="$1";
    local key="$2";         shift 2
    [ -n "$envvarname" ] || N=cfgy M="Provide current env varname" log:ret:64
    [ -n "$key" ] || N=cfgy M="Provide current key" log:ret:64

    local _save=""
    case "$1" in
        --save|-s)  _save=1; shift ;;
    esac

    [ -z "$_save" ] || ___x_cmd_cfgy_obj_set "$key=$1"
    eval "$envvarname=\"\$1\""
}
