# shellcheck shell=dash disable=SC2317
___x_cmd_ls_app(){
    local ___X_CMD_TUI_NAVI_CUR_FILE=
    local ___X_CMD_TUI_NAVI_FINAL_COMMAND=
    local ___X_CMD_TUI_APP_IS_SMALL_SCREEN=
    local ___X_CMD_LS_APP_TMP_EXITCODE=;
    ___x_cmd_ls_app_ "$@"
    ___X_CMD_LS_APP_TMP_EXITCODE="$?"

    if [ "$___X_CMD_LS_APP_TMP_EXITCODE" -eq 0 ]; then
        case "$___X_CMD_TUI_NAVI_FINAL_COMMAND" in
            q)  ;;      # Just quit
            d)  ;;      # remove
            r)  ;;      # rename
            *)
                if [ ! -t 1 ]; then
                    printf "%s\n" "$___X_CMD_TUI_NAVI_CUR_FILE"
                else
                    ___x_cmd_ls_app_handle "$___X_CMD_TUI_NAVI_CUR_FILE"
                fi
                ;;
        esac
    fi
    return "$___X_CMD_LS_APP_TMP_EXITCODE"
}

___x_cmd_ls_app_handle(){
    local fp="$1"
    local id=""
    if [ -d "$fp" ]; then
        x ui select id "Action for [dir=$fp]"   \
            "cd to the directory"               \
            "open directory using Explorer"     \
            "x stat <dir>"                      \
            "remove the directory recursively"   \
            "echo directory path"             \
            "EXIT" || return

        case "$id" in
            1)      x cd "$fp" ;;
            2)      x open "$fp" ;;
            3)      x:info "Stat of [dir=$fp]"
                    x stat "$fp" ;;
            4)      ! x ui yesno -r "Confirm to recursively removing [dir=$fp] ?" \
                        || x rmrf "$fp"
                    ;;
            5)      printf "%s\n" "$fp" ;;
            *)      return 1 ;;
        esac
    elif [ -f "$fp" ]; then
        x ui select id "Action for [file=$fp]"              \
            "cd to ${fp%/*}"                                \
            "open file using system default application"    \
            "x stat <file>"                                 \
            "remove the file"                               \
            "echo file path"                              \
            "EXIT" || return

        case "$id" in
            1)      x cd "${fp%/*}"             ;;
            2)      x open "$fp"                ;;
            3)      x:info "Stat of [file=$fp]"
                    x stat "$fp"                ;;
            4)      ! x ui yesno -r "Confirm to removing [file=$fp] ?" \
                        || x rmrf "$fp"
                    ;;
            5)      printf "%s\n" "$fp" ;;
            *)      return 1 ;;
        esac
    fi
}

___x_cmd_ls_app_(){
    local basepath=; local x_=;
    if [ -z "$___X_CMD_LS_APP_BASEDATA" ]; then
        x_=; x abspath_ "${1:-"$PWD"}"
        [ -d "$x_" ] || return
        basepath="$x_"
    fi

    x_=; x tui position get_ lsapp
    local position="$x_"

    local position_isfuzzy=
    ! x os is win || position_isfuzzy=1

    local ___X_CMD_LS_APP_TMP_EXITCODE=
    local ___X_CMD_TUI_CURRENT_NAVI_POSITION=
    ___x_cmd_tui_app_processer(){ ___x_cmd_ls_app_processer "$@"; }
    ___X_CMD_LS_APP_BASEPATH="$basepath" \
    ___X_CMD_LS_APP_BASEDATA="$___X_CMD_LS_APP_BASEDATA" \
    ___X_CMD_TUI_NAVI_POSITION="$position" \
    ___X_CMD_TUI_NAVI_POSITION_ISFUZZY="$position_isfuzzy" \
    x tui bigapp --clear-on-exit \
        -f "$___X_CMD_ROOT_MOD/tui/lib/eg.comp/navi.comp.awk"  \
        -f "$___X_CMD_ROOT_MOD/ls/lib/app/lsapp.awk"
    ___X_CMD_LS_APP_TMP_EXITCODE="$?"

    unset -f ___x_cmd_tui_app_processer
    x tui position store lsapp "$___X_CMD_TUI_CURRENT_NAVI_POSITION"
    return "$___X_CMD_LS_APP_TMP_EXITCODE"
}

___x_cmd_ls_app_processer(){
    local item=; local dirpath=;
    local command_log=; local content=
    case "$1" in
        data:request:*)
            item="${1#data:request:}"
            dirpath="${item#*"$___X_CMD_UNSEENCHAR_NEWLINE"}"
            item="${item%%"$___X_CMD_UNSEENCHAR_NEWLINE"*}"
            printf "data:item:%s\n" "$item"
            command_log="$( ___x_cmd_cmds_cd "$dirpath" 2>&1 )"
            (
                if ___x_cmd_cmds_cd "$dirpath" 2>/dev/null; then
                    content="$(___x_cmd_cmds_ls -lAhL 2>/dev/null)" || command_log="Fail to list $dirpath"
                fi
                printf "data:log:%s\n" "$command_log"
                printf "%s\n" "$content"
            )
            ___x_cmd_ls_app_processer___fix_gitbash "$dirpath"
            ;;
        x:open:*)   x open      "${1#x:open:}"   ;;
        x:browse:*) x browse    "${1#x:browse:}" ;;
    esac
}

___x_cmd_ls_app_processer___fix_gitbash(){
    local dir="$1"
    { x os is win && [ "$dir" = "/" ] ; } || return 0
    local fp
    [ "$PWD" = "/" ] || {
        fp="${PWD%%/"${PWD#/*/}"*}"
        [ ! -d "$fp" ] || ___x_cmd_cmds_ls -lAhLd "$fp" 2>/dev/null
    }

    fp="${HOME%%/"${HOME#/*/}"*}"
    [ ! -d "$fp" ] || ___x_cmd_cmds_ls -lAhLd "$fp" 2>/dev/null
}
