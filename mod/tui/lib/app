# shellcheck shell=dash

xrc cawk
command -v ___x_cmd_tui_app_processer >/dev/null || ___x_cmd_tui_app_processer(){   $1;   }
___x_cmd_tui_app(){
    ___x_cmd_tui_util___acquire_old_trap
    trap '' INT
    local ___X_CMD_TUI_APP_TMP_EXITCODE=0
    ! command -v ___x_cmd_tui_app_begin >/dev/null || ___x_cmd_tui_app_begin
    eval "$(___x_cmd_tui_app_main "$@")"
    ! command -v ___x_cmd_tui_app_end >/dev/null || ___x_cmd_tui_app_end

    # UI_CURSOR_NORMAL UI_LINEWRAP_ENABLE
    printf "\033[34h\033[?25h\033[?7h" >&2

    ___x_cmd_tui_util___release_old_trap
    return "$___X_CMD_TUI_APP_TMP_EXITCODE"
}

___x_cmd_tui_app_main_clock___inner(){
    x tty update
    printf "${___X_CMD_UNSEENCHAR_001}%02d${___X_CMD_UNSEENCHAR_001}%d${___X_CMD_UNSEENCHAR_001}%d${___X_CMD_UNSEENCHAR_001}%d\n" \
        "${i}" "$LINES" "$COLUMNS" "$exchange"
}

___x_cmd_tui_app_main_clock(){
    x pidofsubshell
    local exchange=0;   trap 'i=$(( ((i+1)<100) ? i+1: 0 )); exchange=1 ___x_cmd_tui_app_main_clock___inner;'   USR1    # Data Exchange
    local on=1;         trap 'on='          USR2

    local i=0
    while [ -n "$on" ]; do
        i=$(( ((i+1)<100) ? i+1: 0 ))
        {
            ___x_cmd_tui_app_main_clock___inner
            sleep 0.1
        } &         # 0.05, 0.2
        exchange=0
        wait
    done
}

___x_cmd_tui_app_main_processcmd(){
    ___X_CMD_TUI_APP_TMP_CMD=
    local tmpline; while read -r tmpline; do
        [ "$tmpline" != "$INDICATOR_CMD" ] || break
        ___X_CMD_TUI_APP_TMP_CMD="${___X_CMD_TUI_APP_TMP_CMD}${___X_CMD_UNSEENCHAR_NEWLINE}${tmpline}"
    done
}

___x_cmd_tui_app_main_processeval(){
    local tmpline; while read -r tmpline; do
        [ "$tmpline" != "$INDICATOR_FINALCMD" ] || break
        ___X_CMD_TUI_APP_TMP_FINALCMD="${___X_CMD_TUI_APP_TMP_FINALCMD}${___X_CMD_UNSEENCHAR_NEWLINE}${tmpline}"
    done
}

___X_CMD_TUI_EXCHAGE_STORE_DEFAULT="$___X_CMD_ROOT_TMP/tui/store/exchange"

xrc wchar
___x_cmd_tui_app_main___input()(
    trap '' INT             # Interrupt by user
    x pidofsubshell
    ___x_cmd_tui_app_main_clock &
    ___x_cmd_wchar___getloop_native   # I think this should be reintroduce into this.
)

___x_cmd_tui_app_main(){

    {
        ___x_cmd_tui_app_main___input 2>/dev/null   # In order to hide the log of the kill signal in the dash environment.
    } | {
        trap '' INT
        read -r PID_OF_GETLOOP;     read -r PID_OF_CLOCK
        printf "%s\n%s\n" "$PID_OF_GETLOOP" "$PID_OF_CLOCK"

        local EXCHANGE_DIR; EXCHANGE_DIR="${___X_CMD_TUI_EXCHAGE_STORE_DEFAULT}/$PID_OF_GETLOOP"
        x mkdirp "$EXCHANGE_DIR"

        printf "\r\0337" >&2     # Save Posistion
        x tty update
        ___x_cmd_tui_app_main___awk "$@"
    } | (
        trap '' INT
        read -r PID_OF_GETLOOP;     read -r PID_OF_CLOCK

        ___X_CMD_TUI_APP_TMP_ACC=0
        allow_to_send=1

        INDICATOR_SIGNAL="$___X_CMD_UNSEENCHAR_001"
        INDICATOR_CMD="${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_001}"
        INDICATOR_FINALCMD="${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_001}"

        local ___X_CMD_TUI_APP_TMP_CMD;     local ___X_CMD_TUI_APP_TMP_OUT
        local ___X_CMD_TUI_APP_TMP_FINALCMD

        local tmpline; while read -r tmpline; do
            case "$tmpline" in
                "$INDICATOR_SIGNAL")        allow_to_send=1 ;;
                "$INDICATOR_CMD")
                                            ___x_cmd_tui_app_main_processcmd
                                            read -r ___X_CMD_TUI_APP_TMP_OUT
                                            ___x_cmd_tui_app_processer "${___X_CMD_TUI_APP_TMP_CMD#*"${___X_CMD_UNSEENCHAR_NEWLINE}"}" >"${___X_CMD_TUI_APP_TMP_OUT}"
                                            ___X_CMD_TUI_APP_TMP_ACC=$(( ___X_CMD_TUI_APP_TMP_ACC+1 ))
                                            ;;
                "$INDICATOR_FINALCMD")      ___x_cmd_tui_app_main_processeval
                                            ;;
                *)                          tui:warn "Unknown instruction - '$tmpline'"
            esac

            if [ "$___X_CMD_TUI_APP_TMP_ACC" -gt 0 ] && [ -n "$allow_to_send" ]; then
                ___X_CMD_TUI_APP_TMP_ACC=$(( ___X_CMD_TUI_APP_TMP_ACC-1 ))
                kill -s USR1 "$PID_OF_CLOCK"    # Data Exchange
                allow_to_send=
            fi
        done

        printf "%s\n" "${___X_CMD_TUI_APP_TMP_FINALCMD#*"${___X_CMD_UNSEENCHAR_NEWLINE}"}"
        kill -s KILL "$PID_OF_GETLOOP";     kill -s USR2 "$PID_OF_CLOCK"     # Shutdown everything.
        # kill -s TERM "$PID_OF_GETLOOP";     kill -s USR2 "$PID_OF_CLOCK"     # Shutdown everything.

        x rmrf "${___X_CMD_TUI_EXCHAGE_STORE_DEFAULT}/$PID_OF_GETLOOP"
    )

    command stty -raw 2>/dev/null   # TODO: Using better method than kill -9 on getloop
    command stty echo 2>/dev/null
}

___x_cmd_tui_app_main___awk(){
    LC_ALL="$___X_CMD_AWK_LANGUAGE_UTF8" \
    ___x_cmd_cawk___run \
        -v ROWS="$LINES" -v COLS="$COLUMNS" \
        -v IS_TH_NO_COLOR="$NO_COLOR" \
        -v FOLDER_ROOT="${EXCHANGE_DIR}/"       \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk"            \
        -f "$___X_CMD_ROOT_MOD/awk/lib/sh.awk"              \
        -f "$___X_CMD_ROOT_MOD/awk/lib/k.awk"               \
        -f "$___X_CMD_ROOT_MOD/awk/lib/ui/ui.awk"           \
        -f "$___X_CMD_ROOT_MOD/awk/lib/ui/cursor.awk"       \
        -f "$___X_CMD_ROOT_MOD/awk/lib/u/u8wc.awk"          \
        -f "$___X_CMD_ROOT_MOD/awk/lib/u/wcwidth.awk"       \
        -f "$___X_CMD_ROOT_MOD/tui/lib/draw.awk"            \
        -f "$___X_CMD_ROOT_MOD/tui/lib/painter.awk"         \
        -f "$___X_CMD_ROOT_MOD/tui/lib/ctrl.awk"            \
        -f "$___X_CMD_ROOT_MOD/tui/lib/layout.awk"          \
        -f "$___X_CMD_ROOT_MOD/tui/lib/model.awk"           \
        -f "$___X_CMD_ROOT_MOD/tui/lib/comp/share.awk"      \
        "$@" \
        -f "$___X_CMD_ROOT_MOD/tui/lib/app.awk"
}
