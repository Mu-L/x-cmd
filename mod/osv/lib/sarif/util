# shellcheck shell=dash
___x_cmd_osv_sarif___raw(){
    ___x_cmd osv scanner --format sarif --lockfile "$1"
    local code="$?"
    case "$code" in
        1|0) return 0       ;;
        *)   return $code   ;;
    esac
}


___x_cmd_osv_sarif___auto(){
    # ___x_cmd_osv_sarif___rpm
    # ___x_cmd_osv_sarif___dpkg
    # ___x_cmd_osv_sarif___apk


    local x_=
    # ___x_cmd_osv_sarif___docker --all

    if ___x_cmd_osv_sarif___pip_which_lockfile_ ".";then
        ___x_cmd_osv_sarif___pip "."
    else
        osv:info "No pip project was detected in the current directory, skipping the corresponding scan."
    fi

    if ___x_cmd_osv_sarif___npm_which_lockfile_ ".";then
        ___x_cmd_osv_sarif___npm "."
    else
        osv:info "No npm project was detected in the current directory, skipping the corresponding scan."
    fi
    osv:info "Scan completed."
}


___x_cmd_osv_sarif___rpm(){
    [ -d "/var/lib/rpm" ] || return 1

    ___x_cmd syft dir:/var/lib/rpm -o cyclonedx-json > "$___X_CMD_OSV___TMP_PATH/sbom.spdx.json"
    ___x_cmd grype --distro rhel:8 sbom:"$___X_CMD_OSV___TMP_PATH/sbom.spdx.json"
    # ___x_cmd osv scanner --sbom \
    #     "$___X_CMD_OSV___TMP_PATH/sbom.spdx.json"
}

___x_cmd_osv_sarif___dpkg(){
    [ -f "/var/lib/dpkg/status" ] || return 1
    ___x_cmd_osv_sarif___raw dpkg-status:/var/lib/dpkg/status
}

___x_cmd_osv_sarif___apk(){
    [ -f "/lib/apk/db/installed" ] || return 1
    ___x_cmd_osv_sarif___raw apk-installed:/lib/apk/db/installed
}

# ___x_cmd_osv_sarif___pacman(){
#     :
# }


# ___x_cmd_osv_sarif___nix(){
#     [ -d "/nix/store" ] || return 1

#     ___x_cmd syft dir:/nix/store -o cyclonedx-json > "$___X_CMD_OSV___TMP_PATH/sbom.spdx.json"
#     ___x_cmd osv scanner --sbom \
#         "$___X_CMD_OSV___TMP_PATH/sbom.spdx.json"
# }

___x_cmd_osv_sarif___docker(){
    local image="$1"

    case "$image" in
        -h|--help)  ___x_cmd help -m osv sarif docker                       ;;
        --all)      ___x_cmd_osv_sarif___docker_all                         ;;
        *)          ___x_cmd osv scanner --format sarif --docker "$image"   ;;
    esac

}

___x_cmd_osv_sarif___docker_all(){
    # TODOï¼šScanning Fedora-based Docker images is not effective.
    osv:info "Scan all docker images."
    ___x_cmd_cmds docker images --format "{{.Repository}}:{{.Tag}}" | while read -r image;do
        osv:info "scan docker image: $image"
        ___x_cmd osv scanner --format sarif --docker "$image"
    done
}

