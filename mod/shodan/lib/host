# shellcheck shell=dash
___x_cmd_shodan_host(){
    local op="$1";  shift
    case "$op" in
        ls|ll)      ___x_cmd_shodan_host_"$op"      "$@" ;;
        count)      ___x_cmd_shodan_host_count      "$@" ;;
        search)     ___x_cmd_shodan_host_search     "$@" ;;

        -h|--help)  x help -m shodan host           "$@" ;;
    esac
}

___x_cmd_shodan_host_ls(){
    local ip="$1"

    if [ -z "$ip" ]; then
        shodan:info "Fetch your public IP to query"
        ip="$(x ip echo)" || return
    fi

    [ -n "$ip" ] || return 1
    x is ip "$ip" || shodan:info "Fetching the IP of the [host=$ip]"
    shodan:info "Returns all services that have been found on the given host [IP=$ip]"

    if ___x_cmd_shodan_is_interactive_env; then
        ___x_cmd_shodan_curl get "/shodan/host/${ip}?"  | {
        x jo  env .  .ip_str .city .country_name .org .last_update  .data .error
        [ -n "$ip_str" ] || N=shodan M="$error" log:ret:1

        printf "\n IP: %s\n Org: %s\n City: %s\n Country: %s\n Last Update: %s" "${ip_str}" "${org}" "${city}" "${country_name}"   "${last_update}"
        printf "%s\n" "${data}" | x ja 2c .port .transport .http.title .domains.1 .timestamp | \
        x csv header --add  Port  Protocol  Description Domains Timestamp | \
        x csv app
    }
    else
        ___x_cmd_shodan_curl get "/shodan/host/${ip}"
    fi
}


___x_cmd_shodan_host_ll(){
    local ip="$1"

    if [ -z "$ip" ]; then
        shodan:info "Fetch your public IP to query"
        ip="$(x ip echo)" || return
    fi

    [ -n "$ip" ] || return 1
    x is ip "$ip" || shodan:info "Fetching the IP of the [host=$ip]"
    shodan:info "Returns all services that have been found on the given host [IP=$ip]"

    local ip_str=; local city=; local country_name=; local org=; local last_update=; local data=; local error
    ___x_cmd_shodan_curl get "/shodan/host/${ip}?" | {
        x jo  env .  .ip_str .city .country_name .org .last_update  .data .error
        [ -n "$ip_str" ] || [ -n "$ip_str" ] || N=shodan M="$error" log:ret:1

        printf "\nIP: %s\nOrg: %s\nCity: %s\nCountry: %s\nLast Update: %s\n\n" "${ip_str}" "${org}" "${city}" "${country_name}"   "${last_update}"
        printf "\n%s\n" "${data}" | x ja 2c .port .transport .http.title .domains.1 .timestamp | \
        x csv header --add  Port  Protocol  Description Domains Timestamp | \
        x csv static_tab
    }
}

___x_cmd_shodan_host_count(){
    local query=; local facet=; local arg=
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --facet)
                    facet="$2"; shift 2
                ;;
            *)
                    query="$1";
                    break
                ;;
        esac
    done
    [ -n "${query}" ] || N=shodan M="Empty search query" log:ret:1

    if [ -z "$facet" ]; then
        arg="&query=${query}"
    else
        arg="&query=${query}&facets=${facet}"
    fi

    if ___x_cmd_shodan_is_interactive_env; then
        ___x_cmd_shodan_curl get "/shodan/host/count?" "${arg}"  | x y2j
    else
        ___x_cmd_shodan_curl get "/shodan/host/count?" "${arg}"

    fi
}

___x_cmd_shodan_host_search(){
    local query=; local facet=; local arg=
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --facet)
                    facet="$2"; shift 2
                ;;
            *)
                    query="$1";
                    break
                ;;
        esac
    done
    [ -n "${query}" ] || N=shodan M="Empty search query" log:ret:1

    if [ -z "$facet" ]; then
        arg="&query=${query}"
    else
        arg="&query=${query}&facets=${facet}"
    fi

    if ___x_cmd_shodan_is_interactive_env; then
        ___x_cmd_shodan_curl get "/shodan/host/search?" "${arg}"  | x y2j
    else
        ___x_cmd_shodan_curl get "/shodan/host/search?" "${arg}"

    fi
}

___x_cmd_shodan_host_facet(){
    if ___x_cmd_shodan_is_interactive_env; then
        ___x_cmd_shodan_curl get "/shodan/host/search/facets?" "${arg}"  | x y2j
    else
        ___x_cmd_shodan_curl get "/shodan/host/search/facets?" "${arg}"

    fi
}

