# shellcheck shell=dash
___x_cmd_shodan_dns(){
    [ $# -gt 0 ] || set - -h

    local op="$1";  shift
    case "$op" in
        d|domain)       ___x_cmd_shodan_dns_domain "$@"     ;;
        res|resolve)    ___x_cmd_shodan_dns_resolve "$@"    ;;
        rev|reverse)    ___x_cmd_shodan_dns_reverse "$@"    ;;

        -h|--help)      x help -m shodan dns ;;
    esac
}

___x_cmd_shodan_dns_domain(){
    local domain="$1"
    local data=; local error=
    [ -n "$domain" ] ||  N=shodan M="Provide a domain" log:ret:1
    shodan:info "Get all the subdomains and other DNS entries for the given [domain=${domain}]"

    if  ___x_cmd_shodan_is_interactive_env; then
        ___x_cmd_shodan_curl get "/dns/domain/${domain}?" | {
            x jo env . .data .error
            [ -z "$error" ] || N=shodan M="$error" log:ret:1
            printf "%s" "$data" | x ja 2c .value .type .ports .subdomain .last_seen |\
            x csv header --add  Value Type Ports Subdomain  Last_seen | \
            x csv app --return print
        }
    else
        ___x_cmd_shodan_curl get "/dns/domain/${domain}?"
    fi

}
___x_cmd_shodan_dns_resolve(){
    local hose_name="$1"

    [ -n "$hose_name" ] ||  N=shodan M="Provide a domain" log:ret:1
    shodan:info "Look up the IP address for the provided list of [hostnames=${hose_name}]"

    if  ___x_cmd_is_interactive_tty; then
        ___x_cmd_shodan_curl get "/dns/resolve?hostnames=${hose_name}&" | x j2y
    else
        ___x_cmd_shodan_curl get "/dns/resolve?hostnames=${hose_name}&"
    fi
}

___x_cmd_shodan_dns_reverse(){
    local ip="$1"

    [ -n "$ip" ] ||  N=shodan M="Provide a ip" log:ret:1
    shodan:info "Look up the hostnames that have been defined for the given list of [IP addresses=${ip}]"

    if  ___x_cmd_is_interactive_tty; then ___x_cmd_shodan_curl get "/dns/resolve?ips=${ip}&" | x j2y
    else                                  ___x_cmd_shodan_curl get "/dns/resolve?ips=${ip}&"
    fi
}



