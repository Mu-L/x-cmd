# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gh_repo_branch(){
    param:subcmd ___x_cmd_gh_repo_branch            \
        "ls|l"              "list repo branch"          \
        "info|i"            "get repo branch info"      \
        rename              "rename the repo branch"    \
        default             "set default branch"        \
        protection          "protection branch management"
    param:subcmd:try
    param:run


    ___x_cmd_gh_repo_branch _param_help_doc
    return 1
}

# Section:list & info
___x_cmd_gh_repo_branch_ls(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --protected     "returns only protected branches."

    --per_page      "Results per page"                                                  <>=30
    --page          "Page number of the results to fetch."                              <>=1
    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local ___gh_error_msg="get repo ${owner_repo} branch list fail"

    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json BranchName=.name Protected=.protected LastCommit=.commit.sha -- $@' \
         ___x_cmd_gh_get_multi "/repos/${owner_repo}/branches" protected per_page page
}

___x_cmd_gh_repo_branch_info(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1      "branch name"                                                       <>:Branch
    --repo  "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName

    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_get_multi "/repos/${owner_repo}/branches/$1" | (_____x_cmd_gh_branch_ui_utils Info)
}

# EndSection

# Section: rename & default
___x_cmd_gh_repo_branch_rename(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --branch        "branch name"                                                       <>
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --new_name      "branch new name"                                                   <>
    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl post "/repos/${owner_repo}/branches/$branch/rename" -- new_name | (_____x_cmd_gh_branch_ui_utils Rename)
}

___x_cmd_gh_repo_branch_default(){
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    #1          "branch name"                                                       <>
    --json|-j   "output json data"

'
    param:run

    # TODO:source data
    ___x_cmd_gh_repo_edit -j --default_branch "$1" "$repo" |(_____x_cmd_gh_branch_ui_utils Default)
}
# EndSection

___x_cmd_gh_repo_branch_protection(){
    param:subcmd ___x_cmd_gh_repo_branch_protection \
        "info|i"            "protection branch info"            \
        "ls|l"              "protection branch list"            \
        unset               "remove branch protection"          \
        set                 "set branch to protection branch"
    param:subcmd:try
    param:run


    ___x_cmd_gh_repo_branch_protection _param_help_doc
    return 1
}

# Section:protection
___x_cmd_gh_repo_branch_protection_ls(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName

    --per_page      "Results per page"                                                  <>=30
    --page          "Page number of the results to fetch."                              <>=1
    --json|-j       "output json data"
'
    param:run
    ___X_CMD_UI_STATIC=1 ___x_cmd_gh_repo_branch_ls --protected --per_page "$per_page" --page "$page" --repo "$repo"
}

___x_cmd_gh_repo_branch_protection_info(){
    param:dsl       '
options:
    #1          "branch name"       <>
    --repo      "repo name"         <>:RepoName
    --json|-j   "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl get "/repos/${owner_repo}/branches/${1}/protection" | (
        if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
            cat
            ___x_cmd_gh_http_error
            return
        fi

        x jo env . admins=.enforce_admins.enabled \
        deletions=.allow_deletions.enabled linear=.required_linear_history.enabled \
        pushes=.allow_force_pushes.enabled signatures=.required_signatures.enabled error=.
        if [ -n "$admins" ]; then
            ___x_cmd_ui_tf true "protection branch $1 info" "enforce_admins:$admins" \
                "allow_deletions:$deletions" "required_linear_history:$linear" "allow_force_pushes:$pushes" \
                 "required_signatures:$signatures"
        else
            ___x_cmd_ui_tf false "protection branch $1 info failed" "ErrorMsg:$error"
            return 1
        fi
    )
}

___x_cmd_gh_repo_branch_protection_set(){
    param:dsl       '
options:
    #1              "branch name"                                                               <>:Branch
    --repo          "repo name"                                                                 <>:RepoName
    --strict        "Require branches to be up to date before merging"                          <>:Boolean=""
    --admins        "enforce required status checks for repository administrators"              <>="null" = true false null
    --history       "Prevent merge commits from being pushed to matching branches."             <>:Boolean=""
    --force_push    "Permit force pushes for all users with push access."                       <>:Boolean=""
    --deletions     "Allow users with push access to delete matching branches."                 <>:Boolean=""
    --json|-j       "output json data"
'
    param:run

    # TODO:限制成员的设计 checks:[{context:xxx,app_id:111}]
    # --checks   "The list of status checks to require in order to merge into this branch."  <>=""
    # https://docs.github.com/en/rest/branches/branch-protection#update-branch-protection
    local required_status_checks="null"
    local enforce_admins="$admins"
    local required_pull_request_reviews="null"
    local restrictions="null"
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo -admins -history -force_push -deletions +required_status_checks +enforce_admins \
        +required_pull_request_reviews +restrictions ${history+"required_linear_history=history"} \
        ${force_push+"allow_force_pushes=force_push"} ${deletions+"allow_deletions=deletions"})"

    gh:debug "data:$gen_gh_json"
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl put "/repos/${owner_repo}/branches/${1}/protection" "gen_gh_json" | (
        if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
            cat
            ___x_cmd_gh_http_error
            return
        fi

        x jo env . url=.url msg=.message
        if [ -n "$url" ]; then
            ___x_cmd_ui_tf true "set protection branch $1 success"
        else
            ___x_cmd_ui_tf false "set protection branch $1 failed." "ErrorMsg:$msg"
            return 1
        fi
    )
}

___x_cmd_gh_repo_branch_protection_unset(){
    param:dsl       '
options:
    #1          "branch name"                                                       <>
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl delete "/repos/${owner_repo}/branches/${1}/protection"| (
        x jo env . error=.
        if ___x_cmd_gh_http_error; then
            ___x_cmd_ui_tf  true "del ${1} branch protection success"
        else
            ___x_cmd_ui_tf false "del ${1} branch protection fail" "ErrorMsg:$error"
            return 1
        fi
    )
}
# EndSection

# Section: branch utils
_____x_cmd_gh_branch_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="Protected=.protected sha=.commit.sha url=._links.html"
            msg="get repo ${owner_repo} branch info success"
            error_msg="get repo ${owner_repo} branch info fail"
            ;;
        Rename)
            msg="branch renamed from $branch to $new_name successfully"
            error_msg="${owner_repo} branch rename from $branch to $new_name failed"
            ;;
        Default)
            msg="Successfully set repo default branch"
            error_msg="Failed to set repo default branch"
            ;;
    esac
    x jo env . name=.name error=. $data
    if [ -n "$name" ]; then
        ___x_cmd_ui_tf true "$msg" ${name+"Name: $name"} ${Protected+"Protected: $Protected"}  ${sha+"LastCommit: $sha"} ${url+"Url: $url"} 
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
}
# EndSection