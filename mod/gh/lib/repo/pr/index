# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo_pr(){
    param:subcmd ___x_cmd_gh_repo_pr            \
        "ls|l"              "list pull requests"    \
        "info|i"            "pull request info"     \
        "create|c"          "create pull request"   \
        "edit|ed"           "update pull requests"  \
        merge               "merge pull requests"
    param:subcmd:try
    param:run


    ___x_cmd_gh_repo_pr _param_help_doc
    return 1
}

# Section: List
# https://docs.github.com/en/rest/pulls/pulls#list-pull-requests
# shellcheck disable=SC2154
___x_cmd_gh_repo_pr_ls() {

    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --base          "target branch. Format: [username:]<branch>"                        <>=""
    --state         "state"                                                             <>:PrState="open"
    --sort          "sort"                                                              <>:PrSort="created"
    --direction     "direction"                                                         <>:Direction="desc"

    --json|-j   "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local ___gh_error_msg="get $owner_repo pull request list fail"
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json number=.number state=.state title=.title url=.html_url -- $@' \
        ___x_cmd_gh_curl get "/repos/$owner_repo/pulls" state base sort direction
}
# EndSection

# Section: Info
# https://docs.github.com/en/rest/pulls/pulls#get-a-pull-request
___x_cmd_gh_repo_pr_info() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1              "pr number"     <>:Number
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName

    --json|-j   "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl get "/repos/${owner_repo}/pulls/$1" | _____x_cmd_gh_pr_ui_utils Info
}
# EndSection

# Section: Create
# https://docs.github.com/en/rest/pulls/pulls#create-a-pull-request
___x_cmd_gh_repo_pr_create() {
    param:scope     ___x_cmd_github
    param:dsl       '
type:
    bool = true false
options:
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --title                 "pr title"                                                          <>
    --head                  "source branch. Format: [username:]<branch>"                        <>:name
    --base                  "target branch. Format: [username:]<branch>"                        <>:name
    --body                  "pull request content"                                              <>=""
    --maintainer_can_modify "Indicates whether maintainers can modify the pull request."        <>:Bool=true
    --issue                 "association issue"                                                 <>=""
    --draft                 "is draft"
    --json|-j               "output json data"
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo draft=^^draft)"
    gh:debug "$gen_gh_json"

    ___x_cmd_gh_curl post "/repos/$owner_repo/pulls" "gen_gh_json" | _____x_cmd_gh_pr_ui_utils Creating
}
# EndSection

# Section: Edit
# https://docs.github.com/en/rest/pulls/pulls#update-a-pull-request
___x_cmd_gh_repo_pr_edit() {
    param:scope     ___x_cmd_github
##TODO:state
    param:dsl       '
type:
    state = closed open
options:
    #1                      "pr number"                                                         <>:number
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --state                 "state"                                                             <>:state
    --base                  "target branch. Format: [username:]<branch>"                        <>:name=""
    --title                 "pr title"                                                          <>=""
    --body                  "pull request content"                                              <>=""
    --maintainer_can_modify "Indicates whether maintainers can modify the pull request."        <>:Bool=true
    --json|-j               "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"
    gh:debug "$gen_gh_json"

    ___x_cmd_gh_curl patch "/repos/${owner_repo}/pulls/$1" "gen_gh_json" | _____x_cmd_gh_pr_ui_utils Edit
}
# EndSection

# Section: Merge
# https://docs.github.com/en/rest/pulls/pulls#merge-a-pull-request
# shellcheck disable=2154
___x_cmd_gh_repo_pr_merge() {
    param:scope     ___x_cmd_github
    param:dsl       '
type:
    merge = squash merge rebase
options:
    #1                      "pr id"                                                             <>
    --repo                  "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --merge_method          "merge method(squash,merge)"                                        <>:merge="merge"
    --commit_title          "Title for the automatic commit message."                           <>=""
    --commit_message        "Extra detail to append to automatic commit message."               <>=""
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"
    gh:debug "$gen_gh_json"

    ___x_cmd_gh_curl put "/repos/${owner_repo}/pulls/$1/merge" "gen_gh_json" | (
        x jo env . merged=.merged gh_resp_err=.message
        if [ "$merged" = "true" ]; then
            ___x_cmd_ui_tf true "Merge $1 to repo ${owner_repo} successfully"
        else
            ___x_cmd_ui_tf false "Merge $1 to repo ${owner_repo} failed"
            ___x_cmd_gh____handle_resp
            return 1
        fi
    )
}
# EndSection

# Section: TODO
___x_cmd_gh_repo_pr_view() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1             "pr number"         <>:number
'
    param:run

    ___x_cmd_gh_param_init_owner_repo

    x http browse "https://github.com/${owner_repo}/pulls/$1"
}

___x_cmd_gh_repo_pr_comments(){
    param:subcmd ___x_cmd_gh_repo_pr_comments   \
        "ls|l"          "list pull requests comments"   \
        "info|i"        "pull request comments info"    \
        "create|c"      "create pull request comments"  \
        "edit|ed"       "edit pull requests comments"
    param:subcmd:try
    param:run


    ___x_cmd_gh_repo_pr_comments _param_help_doc
    return 1
}
# TODO:github API error
___x_cmd_gh_repo_pr_comments_ls() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --pr        "pr number."                                                        <>
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local ___gh_error_msg="get $owner_repo pull request comments list fail"
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json id=.id body=.body url=.url -- $@' \
        ___x_cmd_gh_curl get "/repos/${owner_repo}/pulls/$pr/comments"
}

___x_cmd_gh_repo_pr_comments_create(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --number        "pr number"                                                         <>
    --body          "The text of the review comment."                                   <>
    --commit_id     "The SHA of the commit needing a comment"                           <>=""
    -p|--path       "The relative path to the file"                                     <>=""
    --position      "The position in the diff where you want to add a review comment"   <>=""
    --side          ""                                                                  <>=""
    --line          ""                                                                  <>=""
    --start_line    ""                                                                  <>=""
    --start_side    ""                                                                  <>=""
    --in_reply_to   ""                                                                  <>=""
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo)"
    gh:debug "$gen_gh_json"
    ___x_cmd_gh_curl post "/repos/${owner_repo}/pulls/$number/comments" "gen_gh_json"
}

___x_cmd_gh_repo_pr_comments_rm(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    #1          "The unique identifier of the comment."                             <>
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    ___x_cmd_gh_param_init_owner_repo
    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure $org to remove user: $(___x_cmd_ui bold red "$username") ?" || return
    ___x_cmd_gh_curl delete "/repos/${owner_repo}/pulls/comments/$1" | (
        x jo env . gh_resp_err=.message
        if ___x_cmd_gh_http_error; then
            ___x_cmd_ui_tf  true "Delete repo pr comment successful"
        else
            ___x_cmd_ui_tf false "Failed to delete repo pr comment."
            ___x_cmd_gh____handle_resp
            return 1
        fi
    )
}

___x_cmd_gh_repo_pr_comments_edit(){
    param:void
    :
}

# EndSection

# Section: pr utils
_____x_cmd_gh_pr_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi
    (
        case "$1" in
            Info)
                _data="url=.html_url state=.state title=.title body=.body"
                _msg="Successfully obtained PR information"
                _error_msg="Failed to get PR information"
                ;;
            Creating)
                _data="url=.html_url state=.state title=.title body=.body"
                _msg="Successfully obtained PR information"
                _error_msg="Failed to get PR information"
                ;;
            Edit)
                _data="url=.html_url state=.state title=.title body=.body"
                _msg="Edit PR success"
                _error_msg="Failed to Edit PR"
                ;;
        esac
        eval x jo env . id=.id gh_resp_err=.message "$_data"
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true "$_msg" ${url+"Url: $url"}  ${state+"State:$state"} ${title+"Title:$title"} ${body+"Body:$body"}
        else
            ___x_cmd_ui_tf false "$_error_msg"
            ___x_cmd_gh____handle_resp
            return 1
        fi
    )
}

# EndSection
