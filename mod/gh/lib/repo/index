# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo(){
    param:scope     ___x_cmd_github
    param:subcmd ___x_cmd_gh_repo                               \
        "ls|l"          "list repo of owner"                    \
        "create|c"      "create repo"                           \
        "edit|ed"       "update repo"                           \
        "info|i"        "Show detailed information of repo"     \
        rm              "Remove repo"                           \
        apply           "manage repo by declare configure"      \
        collaborator    "manage collaborator"                   \
        branch          "manage branch"                         \
        pr              "manage pr"                             \
        hook            "repo webhook manage"                   \
        release         "repo release manage"                   \
        team            "List repository teams"                 \
        tag             "list repo tags"
    param:subcmd:try
    param:run

    ___x_cmd_gh_repo _param_help_doc
    return 1
}


# Section: List Repos
___x_cmd_gh_repo_ls() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --sort          "sort"                                      <>:UserSort="updated"
    --direction     "direction"                                 <>:Direction="desc"
    --type          "type"                                      <>="all"    = all private public
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"
    --affiliation   "affiliation.(query user repo available)"   <>:UserGroup="owner"

    --json|-j   "output json data"
'
    param:run

    local owner_type
    if [ $# -eq 0 ]; then
        owner_type=user
    else
        local owner="$1"
        owner_type="$(___x_cmd_gh_owner_type_query "$owner")"
    fi
    if [ "$owner_type" = "user" ];then
        ___x_cmd_gh_user_repo_ls  --sort "$sort" --affiliation "$affiliation" \
            --direction "$direction" --type "$type" --per_page "$per_page" --page "$page" "$@"
    else
        ___x_cmd_gh_org_repo_ls  --sort "$sort" \
            --direction "$direction" --type "$type" --per_page "$per_page" --page "$page" "$@"
    fi

}
# EndSection

# Section: Info
___x_cmd_gh_repo_info() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --json|-j       "output json data"

    #1    "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
'
    param:run

    local repo="${1:?repo name must be specified}"
    ___x_cmd_gh_param_init_owner_repo

    ___x_cmd_gh_curl get "/repos/${owner_repo}" | (
        _____x_cmd_gh_repo_ui_utils Info
    )
}

# EndSection

# Section: Creation
___x_cmd_gh_repo_create() {

    param:scope     ___x_cmd_github
    param:dsl       '
type:
    access  =   private public
option:
    #1                          "repo names"                                                            <>
    --access                    "private,public"                                                        <>:access=private
    --description               "description"                                                           <>:Repo_Description=""
    --homepage                  "homepage"                                                              <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""

    --gitignore_template        "The desired language or platform to apply to the .gitignore."          <>:Ignore=""
    --license_template          "The license keyword of the open source license for this repository."   <>:License=""

    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --auto_init                 "auto init README"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --has_downloads             "Whether downloads are enabled."
    --is_template               "can be used to generate new repositories"
    --json|-j                   "output json data"
'
    param:run

    local private=true
    [ "$access" = "public" ] && private=false

    local name="${___X_CMD_TX}"
    local gen_gh_json
    gen_gh_json="$(
        param:option2json +name +private -access \
            has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
            allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit)"

    for name in "$@"; do
        gh:debug "___x_cmd_gh_repo_create_data:$(x tmpl "$gen_gh_json"  "${name##%/}")"
        x tmpl "$gen_gh_json"  "${name##%/}" | \
        ___x_cmd_gh_curl post "/user/repos" "@-" | (
            _____x_cmd_gh_repo_ui_utils Creating
        )
    done
}
# EndSection

# Section: rm
___x_cmd_gh_repo_rm() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1          "Provide repo list.(separated by spaces)"    <>
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    local owner_repo
    local i
    for i in "$@"; do
        ___x_cmd_gh_param_normalize_repo "$i"
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete repo : $(___x_cmd_ui bold red "$owner_repo") ?" || continue
        ___x_cmd_gh_curl delete "/repos/$owner_repo" | (
                x jo env . error=.
                if ___x_cmd_gh_http_error; then
                    ___x_cmd_ui_tf  true "deleted repo $owner_repo success"
                else
                    ___x_cmd_ui_tf false "Deleting repo failure: $owner_repo." "ErrorMsg:$error"
                    return 1
                fi
            )
    done
}
# EndSection

# Section: Update
___x_cmd_gh_repo_edit() {
  param:scope     ___x_cmd_github
    param:dsl       '
type:
    Access  =   private "" public
option:
    #1                          "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --name                      "repo alias"                                                            <>=""
    --access                    "private,public"                                                        <>:Access=""
    --default_branch            "Updates the default branch for this repository."                       <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""

    --homepage                  "homepage"                                                              <>=""
    --description               "description"                                                           <>=""
    --advanced_security         "enable or disable GitHub Advanced Security for this repository."       <>:Status=""

    --scanning                  "enable or disable secret scanning for this repository"                 <>:Status=""
    --scanning_push_protection  "enable or disable secret scanning push protection for this repository" <>:Status=""

    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --allow_forking             "allow private forks."
    --archived                  "Mark this repository as archived and read-only."
    --is_template               "can be used to generate new repositories"

    --json|-j                   "output json data"
'
    param:run
    local private=""
    [ "$access" = "public" ]  && private=false
    [ "$access" = "private" ] && private=true

    xrc jo
    [ -n "$scanning" ] || unset scanning
    [ -n "$advanced_security" ] || unset advanced_security
    [ -n "$scanning_push_protection" ] || unset scanning_push_protection
    local security
    security="$(___x_cmd_jo "{
            security_and_analysis:{
                secret_scanning:{
                    ${scanning+"status: $scanning"}
                },
                advanced_security:{
                    ${advanced_security+"status: $advanced_security"}
                },
                secret_scanning_push_protection:{
                    ${scanning_push_protection+"status: $scanning_push_protection"}
                }
            }
        }"
    )"

    local repo="${1:?repo name must be specified}"
    [ -n "$access" ] || unset access

    local gen_gh_json
    gen_gh_json="$(param:option2json -repo ${access+"private"} +security ${access+"visibility=access"} \
        has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
        allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit)"
    ___x_cmd_gh_param_init_owner_repo
    printf "%s" "${gen_gh_json}"  | ___x_cmd_gh_curl patch "/repos/${owner_repo}" "@-" | (
        _____x_cmd_gh_repo_ui_utils Edit
    )
}


# EndSection

# Section: repo Tags ls
___x_cmd_gh_repo_tag(){
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    #1              "Provide owner name and repo name.(default:the current user repo)" <>:RepoName="$(_____x_cmd_git_repo)"
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"

    --json|-j       "output json data"
A
    param:run
    local repo="$1"
    ___x_cmd_gh_param_init_owner_repo
    ___gh_ui_mutual '___ui_table_json Name=.name Commit=.commit.sha Url=.commit.url -- $@' \
        ___x_cmd_gh_get_multi "/repos/${owner_repo}/tags" visibility affiliation sort direction
}
# EndSection

# Section: repo team ls
___x_cmd_gh_repo_team(){
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    #1              "Provide owner name and repo name.(default:the current user repo)" <>:RepoName="$(_____x_cmd_git_repo)"
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"

    --json|-j       "output json data"
A
    param:run
    local repo="$1"
    ___x_cmd_gh_param_init_owner_repo
    ___gh_ui_mutual '___ui_table_json Name=.name Slug=.slug Description=.description Privacy=.privacy Permission=.permission -- $@' \
        ___x_cmd_gh_get_multi "/repos/${owner_repo}/teams" visibility affiliation sort direction
}
# EndSection

# Section: repo utils
_____x_cmd_gh_repo_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi

    local data
    local msg="$1 issue  success."
    local error_msg="$1 issue failure."
    case "$1" in
        Info)
            data="full_name=.full_name visibility=.visibility"
            msg="repo $owner_repo info:"
            error_msg="Fail. Couldn't find any repo: ${owner_repo}"
            ;;
        Creating|Edit)
            data="owner=.owner.login"
            msg="$1 repo $name success"
            error_msg="$1 repo failure: $name."
            ;;
    esac
    x jo env . id=.id url=.html_url error=. $data
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true "$msg" "repo_id: $id" ${full_name+"name: $full_name"}  ${url+"url: $url"} ${owner+"repo_owner: $owner"} ${visibility+"visibility":"$visibility"}
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
}
# EndSection