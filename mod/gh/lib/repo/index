# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo(){
    param:scope     ___x_cmd_github
    param:subcmd ___x_cmd_gh_repo                               \
        app             "Interactive UI show repo by owner"     \
        "ls|l"          "list repo of owner"                    \
        "info|i"        "Show detailed information of repo"     \
        "create|c"      "create repo"                           \
        "edit|ed"       "update repo"                           \
        rm              "Remove repo"                           \
        apply           "manage repo by declare configure"      \
        collaborator    "manage collaborator"                   \
        branch          "manage branch"                         \
        pr              "manage pr"                             \
        hook            "repo webhook manage"                   \
        release         "repo release manage"                   \
        team            "List repository teams"                 \
        tag             "list repo tags"
    param:subcmd:try
    param:run

    ___x_cmd_gh_repo _param_help_doc
    return 1
}

# Section: App
# shellcheck disable=SC2154
___x_cmd_gh_repo_app() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --type          "type"                                      <>="all"    = all private public
    --sort          "sort"                                      <>:UserSort="updated"
    --direction     "direction"                                 <>:Direction="desc"
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"
'
    param:run

    local owner_type=user
    [ -z "$1" ] || {
        if ! owner_type="$(___x_cmd_gh_owner_type_query "$1")"; then
            gh:error "No found any onwer type. Please check owner exist: $1"
            return 1
        fi
    }
    eval "___x_cmd_gh_${owner_type}_repo_app"  --sort "$sort" --direction "$direction" --type "$type"  \
        --per_page "$per_page" --page "$page" "$1"
}
# EndSection

# Section: List
# shellcheck disable=SC2154
___x_cmd_gh_repo_ls() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --type          "type"                                      <>="all"    = all private public
    --sort          "sort"                                      <>:UserSort="updated"
    --direction     "direction"                                 <>:Direction="desc"
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"

    --json|-j   "output json data"
'
    param:run

    local owner_type=user
    [ -z "$1" ] || {
        if ! owner_type="$(___x_cmd_gh_owner_type_query "$1")"; then
            gh:error "No found any onwer type. Please check owner exist: $1"
            return 1
        fi
    }
    eval "___x_cmd_gh_${owner_type}_repo_ls"  --sort "$sort" --direction "$direction" --type "$type"  \
        --per_page "$per_page" --page "$page" "$1"
}
# EndSection

# Section: Info
# https://docs.github.com/en/rest/repos/repos#get-a-repository
___x_cmd_gh_repo_info() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --json|-j       "output json data"

    #1    "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
'
    param:run

    local repo="${1:?repo name must be specified}"
    ___x_cmd_gh_param_init_owner_repo

    ___x_cmd_gh_curl get "/repos/${owner_repo}" | _____x_cmd_gh_repo_ui_utils Info
}

# EndSection

# Section: Create
# shellcheck disable=SC2034,SC2154
___x_cmd_gh_repo_create() {

    param:scope     ___x_cmd_github
    param:dsl       '
type:
    access  =   private public
option:
    #1                          "repo names"                                                            <>

    --access                    "private,public"                                                        <>:access=private
    --description               "description"                                                           <>:Repo_Description=""
    --homepage                  "homepage"                                                              <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""
    --gitignore_template        "The desired language or platform to apply to the .gitignore."          <>:Ignore=""
    --license_template          "The license keyword of the open source license for this repository."   <>:License=""

    --no_wiki                   "Whether to disable wiki"
    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --auto_init                 "auto init README"
    --is_template               "can be used to generate new repositories"
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --json|-j                   "output json data"
'
    param:run
    [ -z "$json" ] || local ENFORCE_JSON=1
    local name
    for name in "$@"; do
        local _cmd_opt="--access ${access}      ${description:+"--homepage '$description'"}     ${homepage:+"--homepage '$homepage'"} \
            ${team_id:+"--team_id '$team_id'"}  ${gitignore_template:+"--gitignore_template '$gitignore_template'"}     ${license_template:+"--license_template '$license_template'"} \
            ${no_merge_commit:+"--no_merge_commit"}   ${no_rebase_merge:+"--no_rebase_merge"}       ${no_squash_merge:+"--no_squash_merge"} \
            ${no_issue:+"--no_issue"}                 ${no_projects:+"--no_projects"}               ${auto_init:+"--auto_init"}     ${no_wiki:+"--no_wiki"}   \
            ${allow_auto_merge:+"--allow_auto_merge"} ${delete_branch_on_merge:+"--delete_branch_on_merge"}  ${is_template:+"--is_template"} "
        local owner_type=user
        [ "${name%%/*}" = "$name" ] || {
            if ! owner_type="$(___x_cmd_gh_owner_type_query "${name%%/*}")"; then
                gt:error "No found any onwer type. Please check owner exist: ${name%%/*}"
                return 1
            fi
        }

        eval  "___x_cmd_gt_${owner_type}_repo_create" "$_cmd_opt" "$name"
    done
}
# EndSection

# Section: Edit
# https://docs.github.com/en/rest/repos/repos#update-a-repository
# shellcheck disable=SC2034
___x_cmd_gh_repo_edit() {
  param:scope     ___x_cmd_github
    param:dsl       '
type:
    Access  =   private public internal ""
option:
    #1                          "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --name                      "repo alias"                                                            <>=""
    --access                    "private,public"                                                        <>:Access=""
    --default_branch            "Updates the default branch for this repository."                       <>=""
    --team_id                   "the id of the team that will be granted access to this repository"     <>=""

    --homepage                  "homepage"                                                              <>=""
    --description               "description"                                                           <>=""

    --advanced_security         "enable or disable GitHub Advanced Security for this repository."       <>:Status=""
    --scanning                  "enable or disable secret scanning for this repository"                 <>:Status=""
    --scanning_push_protection  "enable or disable secret scanning push protection for this repository" <>:Status=""

    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_wiki                   "Whether to disable wiki"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Whether to delete head branches when pull requests are merged"
    --allow_forking             "allow private forks."
    --archived                  "Mark this repository as archived and read-only."
    --is_template               "can be used to generate new repositories"

    --json|-j                   "output json data"
'
    param:run
    local private
    local visibility
    case "$access" in
        private)        private=true            ;;
        public)         private=false           ;;
        internal)       visibility=internal     ;;
    esac

    [ -n "$scanning" ] || unset scanning
    [ -n "$advanced_security" ] || unset advanced_security
    [ -n "$scanning_push_protection" ] || unset scanning_push_protection
    xrc jo
    local security
    security="$(___x_cmd_jo "{
            security_and_analysis:{
                secret_scanning:{
                    ${scanning+"status: $scanning"}
                },
                advanced_security:{
                    ${advanced_security+"status: $advanced_security"}
                },
                secret_scanning_push_protection:{
                    ${scanning_push_protection+"status: $scanning_push_protection"}
                }
            }
        }"
    )"

    local repo="${1:?repo name must be specified}"
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo -access +security "${private:+"+private"}" "${visibility:+"+visibility"}" \
        has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
        allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit)"
    gh:debug "$gen_gh_json"

    ___x_cmd_gh_param_init_owner_repo
    printf "%s" "${gen_gh_json}"  | ___x_cmd_gh_curl patch "/repos/${owner_repo}" "@-" | _____x_cmd_gh_repo_ui_utils Edit
}


# EndSection

# Section: Remove
# https://docs.github.com/en/rest/repos/repos#delete-a-repository
___x_cmd_gh_repo_rm() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1          "Provide repo list.(separated by spaces)"    <>
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    local owner_repo
    local i
    for i in "$@"; do
        ___x_cmd_gh_param_normalize_repo "$i"
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete repo : $(___x_cmd_ui bold red "$owner_repo") ?" || continue
        ___x_cmd_gh_curl delete "/repos/$owner_repo" | (
                x jo env . gh_resp_err=.message
                if ___x_cmd_gh_http_error; then
                    ___x_cmd_ui_tf  true "deleted repo $owner_repo success"
                else
                    ___x_cmd_ui_tf false "Deleting repo failure: $owner_repo."
                    ___x_cmd_gh____handle_resp
                    return 1
                fi
            )
    done
}
# EndSection

# Section: repo Tags ls
# https://docs.github.com/en/rest/repos/repos#list-repository-tags
___x_cmd_gh_repo_tag(){
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)" <>:RepoName="$(_____x_cmd_git_repo)"
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"
    --json|-j       "output json data"
A
    param:run
    [ -n "$repo" ] || { gh:error "Please provide --repo <owner/repo>"; return 1; }
    ___x_cmd_gh_param_init_owner_repo
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json Name=.name Commit=.commit.sha -- $@' \
        ___x_cmd_gh_get_multi "/repos/${owner_repo}/tags"
}
# EndSection

# Section: repo team ls
# https://docs.github.com/en/rest/repos/repos#list-repository-teams
# shellcheck disable=SC2034
___x_cmd_gh_repo_team(){
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName="$(_____x_cmd_git_repo)"
    --per_page      "Results per page"                                                  <>="30"
    --page          "Page number of the results to fetch."                              <>="1"
    --json|-j       "output json data"
A
    param:run
    [ -n "$repo" ] || { gh:error "Please provide --repo <owner/repo>"; return 1; }
    ___x_cmd_gh_param_init_owner_repo
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json Name=.name Slug=.slug Privacy=.privacy Permission=.permission Description=.description -- $@' \
        ___x_cmd_gh_get_multi "/repos/${owner_repo}/teams"
}
# EndSection

# Section: repo utils
_____x_cmd_gh_repo_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi
    (
        case "$1" in
            Info)
                _data="full_name=.full_name visibility=.visibility"
                _msg="repo $owner_repo info:"
                _error_msg="Fail. Couldn't find any repo: ${owner_repo}"
                ;;
            Creating|Edit)
                _data="owner=.owner.login"
                _msg="$1 repo $name success"
                _error_msg="$1 repo failure: $name."
                ;;
        esac
        eval x jo env . id=.id url=.html_url gh_resp_err=.message "$_data"
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true "$_msg" "repo_id: $id" ${full_name+"name: $full_name"}  ${url+"url: $url"} ${owner+"repo_owner: $owner"} ${visibility+"visibility":"$visibility"}
        else
            ___x_cmd_ui_tf false "$_error_msg"
            ___x_cmd_gh____handle_resp
            return 1
        fi
    )
}
# EndSection