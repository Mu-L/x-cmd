# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# Section: Dev0
# printf "%s" "1,2,3" | ___x_cmd_gits_util___to_string_arr
#          => "1","2","3",
___x_cmd_gits_util___to_string_arr(){
    awk -v RS=',' 'BEGIN {ORS=","} { print "\"" $0 "\""}'
}

___x_cmd_git_config_get(){
    local data=""
    data="$(awk -v host="$2" -v tmp="$3" -v check="false" '
{
    gsub(":","")
    if($1==host){
        check="true"
    }else if($2=="") {
        check="false"
    }
    if(check=="true" && $1==tmp){
        print $2
        exit(0)
    }
}'<<A
$(command cat "$1")
A
)"
    printf "%s\n" "$data"
}

___x_cmd_git_config_set(){
    local url="${1:?Provide config url}"
    local host="${2:?need to provide host}"
    local key="${3:?Provide parameters that need to be set}"
    local val="${4:?Provide the value that needs to be set}"

    local config
    config=$(command cat "$url" 2>/dev/null)
    if [ -z "$config" ];then
        printf "%s\n" "$host:
    $key: $val">"$url"
    return 0
    fi

    local data
    data="$(command awk -v host="$host" -v key="$key" -v val="$val" -v check="false" '
{
    gsub(":","")

    if($1==host){
        check="true"
    }else if($2=="" && check=="true") {
        check="false"
        print key,":",val
    }

    if(check=="true" && $1==key){
        $2=val
        check="false"
    }
    print $1,":",$2
}
END {
    if(check=="true")
        print key,":",val
}
'<<A
$config
A
)"
    printf "%s\n" "$data">"$url"
}
# EndSection

_____x_cmd_git_repo() {
    printf "%s" "$(
        git config --get remote.origin.url 2>/dev/null | \
            sed -E 's#(git@|https?://)([^/:]*)[:/]([^/]*)/([^/]*)(\.git)?$#\3/\4#' | \
            sed 's/\.git$//'
    )"
}

# TODO:
# 使用 AWK 修改 get_owner_repo函数让他支持
# `get_owner_repo git@gitlab.com:gitlab-org/secure/dast/api-on-demand-test.git` => `gitlab-org/secure/dast/api-on-demand-test`
# `get_owner_repo https://gitlab.com/gitlab-org/secure/dast/api-on-demand-test.git` => `gitlab-org/secure/dast/api-on-demand-test`
# `get_owner_repo https://github.com/Zhengqbbb/x-cmd.git` => `Zhengqbbb/x-cmd`
# `get_owner_repo git@github.com:Zhengqbbb/x-cmd => Zhengqbbb/x-cmd`
# _____x_cmd_git_repo_get_owner_repo(){
#   # use awk command
#   echo "$1" | awk
# }



# wait http mod refactor. The "BROWSER" variable have space can't use in ZSH env
_____x_cmd_git_browse(){
    local __website="${1:?Provide websites}"
    if [ -n "$BROWSER" ]; then
        # e.g: BROWSER="open -a '/Applications/Google Chrome.app'"
        eval "$BROWSER" "$__website"
    elif uname -a | grep -q Darwin; then
        open -a "/Applications/Safari.app" "$__website"
    elif command -v xdg-open >/dev/null; then
        xdg-open "$__website"
    elif command -v gnome-open >/dev/null; then
        gnome-open "$__website"
    else
        x log :gits info "Could not detect the web browser to use."
        return 1
    fi
}

# shellcheck disable=SC2016
_____x_cmd_git___avatar_sdict_to_csv(){
    x csv awk 'BEGIN{ printf("%s,%s\n", "Key","Value") }
        {
            l = split($0,arr, "=")
            if (l > 2){
                for (i=1 ; i<=l-2; ++i){
                    _name = _name  arr[i] "="
                }
                _name = _name  arr[ l-1 ]
                print "\""_name"\"" "," arr[l]
                _name=""
            } else if (l == 2){
                dex = index($0, "=")
                name = substr($0, 1, dex-1 )
                id = substr($0, dex+1 )
                print "\""name"\"" "," id
            }
        }'
}
