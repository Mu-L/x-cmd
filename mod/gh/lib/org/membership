# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gh_org_membership(){
    param:subcmd ___x_cmd_gh_org_membership             \
        "ls|l"              "list membership"               \
        "info|i"            "get org membership user info"  \
        add                 "add org membership"            \
        "edit|ed"           "update org membership"         \
        rm                  "Remove membership"             \
        app                 "Interactive UI show org of user"
    param:subcmd:try
    param:run


    ___x_cmd_gh_org_membership _param_help_doc
    return 1
}

# Section: App
___x_cmd_gh_org_membership_app(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --org           "org space address"                         <>:Address
    --filter        "Filter members returned in the list."      <>:OrgMemberFilter="all"
    --role          "Filter members returned by their role."    <>:OrgMemberRole="all"

    --per_page      "Results per page"                          <>:Number=30
    --page          "Page number of the results to fetch."      <>:Number=1
'
    param:run

    local ___gh_error_msg="get membership list fail"
    local ___X_CMD_TUI_TABLE_FINAL_COMMAND
    local ___X_CMD_TUI_TABLE_CUR_LINE
    local ___X_CMD_TUI_TABLE_CUR_ITEM
    local ___X_CMD_GH_TUI_TABLE_REQUSET_DATA='___x_cmd_gh_get_multi "/orgs/${org##*/}/members" role filter per_page page'
    ___x_cmd_gh_tui_app "org.membership.app.awk"

    ___x_cmd_gh_org_membership_app_status_handler

}
___x_cmd_gh_org_membership_app_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gh_http_error
        return
    fi
    local repo_name
    user_name="${___X_CMD_TUI_TABLE_CUR_LINE##*UserName: }"
    user_name=${user_name%%
Url:*}
    case "$___X_CMD_TUI_TABLE_FINAL_COMMAND" in
            "ENTER")        printf "%s\n" "$___X_CMD_TUI_TABLE_FINAL_COMMAND"  ;;
            "c")            ___x_cmd_gh_org_membership_add    --org "${org}"                     ;;
            "u")            ___x_cmd_gh_org_membership_edit   --org "${org##*/}"    "$user_name"     ;;
            "d")            ___x_cmd_gh_org_membership_rm     --org "${org##*/}"    "$user_name"     ;;
            *)              return   ;;
    esac
}
# EndSection

# Section: List
# https://docs.github.com/en/rest/orgs/members#list-organization-members
___x_cmd_gh_org_membership_ls() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --org           "org space address"                         <>:Address
    --filter        "Filter members returned in the list."      <>:OrgMemberFilter="all"
    --role          "Filter members returned by their role."    <>:OrgMemberRole="all"

    --per_page      "Results per page"                          <>:Number=30
    --page          "Page number of the results to fetch."      <>:Number=1
    --json|-j       "output json data"
'
    param:run
    local ___gh_error_msg="get membership list fail"
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json Id=.id UserName=.login Url=.html_url -- $@' \
        ___x_cmd_gh_get_multi "/orgs/${org##*/}/members" role filter per_page page
}
# EndSection

# Section: Info
# https://docs.github.com/en/rest/orgs/members#get-organization-membership-for-a-user
___x_cmd_gh_org_membership_info() {
    param:scope     ___x_cmd_github
    param:dsl      <<A
options:
    #1                  "username:space address"    <>
    --org               "org space address"         <>:Address

    --json|-j   "output json data"
A
    param:run

    ___x_cmd_gh_curl get "/orgs/${org##*/}/memberships/${1##*/}" | ___x_cmd_gh_org_membership____ui_handler Info
}
# EndSection

# Section: Add
# https://docs.github.com/en/rest/orgs/members#set-organization-membership-for-a-user
___x_cmd_gh_org_membership_add() {
    param:scope     ___x_cmd_github
    param:dsl       <<A
type:
    role = admin member
options:
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role="member"
    #1              "username"                                          <>

    --json|-j   "output json data"
A
    param:run
    if [ $# -eq 0 ];then
        gh:error -h 'x gh org membership add -h' "accepts at least 1 arg(s) username"
        return 1
    fi
    local username=""
    for username in "$@"; do
        {
            ___x_cmd_gh_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | ___x_cmd_gh_org_membership____ui_handler Add
        }
    done
}
# EndSection

# Section: Edit
# https://docs.github.com/en/rest/orgs/members#set-organization-membership-for-a-user
___x_cmd_gh_org_membership_edit() {
    param:scope     ___x_cmd_github
    param:dsl       <<A
type:
    role = admin member
options:
    #1              "username"                                          <>:Username_multiple
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role
    --json|-j       "output json data"
A
    param:run
    local username="$1"
    ___x_cmd_gh_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | ___x_cmd_gh_org_membership____ui_handler Edit
}
# EndSection

# Section: Remove
# https://docs.github.com/en/rest/orgs/members#remove-organization-membership-for-a-user
# shellcheck disable=SC2154
___x_cmd_gh_org_membership_rm() {
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    --org       "org space address"        <>:Address
    #1          "username"                 <>:Username_multiple
    --yes|-y    "Ignore remove prompt interception"
A
    param:run

    local username=""
    for username in "$@"; do
        {
            [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure $org to remove user: $(___x_cmd_ui bold red "$username") ?" || continue
            ___x_cmd_gh_curl del "/orgs/${org##*/}/members/${username##*/}" | (
                    [ -z "$___X_CMD_GH_IN_TEST_ENV" ] || { command cat; return; }
                    x jo env . gh_resp_msg=.message gh_resp_err=.errors
                    if ___x_cmd_gh_http_error; then
                        ___x_cmd_ui_tf  true "Remove $username to organizations successfully:"
                    else
                        ___x_cmd_ui_tf false "Remove $username to organizations failure:" >&2
                        ___x_cmd_gh____handle_resp
                        return 1
                    fi
                )

        }
    done
}
# EndSection

# Section: org membership UI
___x_cmd_gh_org_membership____ui_handler(){
    if  [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi
    (
        case "$1" in
        Info)
            _data="role=.role url=.organization_url name=.user.login"
            _inf_msg="Membership in organizations info:"
            _err_msg="Get membership in organizations info failure:"
            ;;
        Add|Edit)
            _inf_msg="$1 $username to organizations successfully:"
            _err_msg="$1 $username to organizations failure:"
            ;;
        esac
        eval x jo env . state=.state gh_resp_msg=.message gh_resp_err=.errors "$_data"
        if [ -n "$state" ]; then
            ___x_cmd_ui_tf  true "${_inf_msg}:" ${name:+"Name: $name"}  ${role:+"Role: $role"} ${state:+"State: $state"} ${url:+"Url: $url"}
        else
            ___x_cmd_ui_tf false "${_err_msg}:" >&2
            ___x_cmd_gh____handle_resp
            return 1
        fi
    )
}
# EndSection