# shellcheck shell=sh
# shellcheck disable=SC2039,3043,2154
___x_cmd_gh_org_repo(){
    param:scope  ___x_cmd_github
    param:subcmd ___x_cmd_gh_org_repo                                   \
        ll                  "List organization repo"                    \
        create              "Create organization repo"                  \
        ls                  "Interactive UI show organization repo"
    param:subcmd:try
    param:run

    ___x_cmd_gh_org_repo_ls
}

# https://docs.github.com/en/rest/repos/repos#list-organization-repositories
# shellcheck disable=SC2120
___x_cmd_gh_org_repo_ls() {
    if ___x_cmd_gx_has_format_args "$@"; then
        ___x_cmd_gh_org_repo_ll "$@"
        return
    fi

    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    #1          "org space address"                                         <>:Address
    --type      "Specifies the types of repositories you want returned"     <>="all" =  all private public forks sources member
    --sort      "The property to sort the results by"                       <>:UserSort="updated"
    --direction "The order to sort by"                                      <>:Direction="desc"

    --per_page  "Results per page"                                          <>:Number="30"
    --page      "Page number of the results to fetch."                      <>:Number="1"
A
    param:run

    local Address="${1%%/*}"
    if ___x_cmd_gx_is_interactive_env; then
        local ___X_CMD_TUI_TABLE_FINAL_COMMAND
        local ___X_CMD_TUI_TABLE_CUR_LINE
        local ___X_CMD_TUI_TABLE_CUR_ITEM
        ___x_cmd_gh_tui_app --Address "$Address" --type "$type" --sort "$sort" --direction "$direction" --per_page "$per_page" --page "$page" \
            --request-code '___x_cmd_gh_get_multi  "/orgs/$Address/repos" type sort direction' \
            --error-msg "Couldn't find any data by ${Address}" \
            --end ___x_cmd_gh_org_repo_app_status_handler \
            "org.repo.app.awk"
    else
        ___x_cmd_gh_get_multi  "/orgs/$Address/repos" type sort direction per_page page | \
            x jo 2c    .full_name
    fi

}

___x_cmd_gh_org_repo_app_status_handler(){
    if [ "$___X_CMD_TUI_TABLE_FINAL_COMMAND" = "c" ]; then
        ___x_cmd_gh_org_repo_create --org "$Address"
    fi
}

# https://docs.github.com/en/rest/repos/repos#list-organization-repositories
___x_cmd_gh_org_repo_ll() {
    param:scope     ___x_cmd_github
    param:dsl       <<A
options:
    #1          "org space address"                                         <>:Address
    --type      "Specifies the types of repositories you want returned"     <>="all"    = all private public forks sources member
    --sort      "The property to sort the results by"                       <>:UserSort="updated"
    --direction "The order to sort by"                                      <>:Direction="desc"

    --per_page  "Results per page"                                          <>:Number=30
    --page      "Page number of the results to fetch."                      <>:Number=1

    --json|-j   "output origin json data"
    --csv       "output csv data"
    --yml       "output yml data"
A
    param:run
    local Address="${1%%/*}"
    if ___x_cmd_gx_output_is_format; then
        ___x_cmd_gh_get_multi  "/orgs/$Address/repos" type sort direction | ___x_cmd_gx_output_format
    elif [ "$type" = "member" ] ; then
        ___x_cmd_gh_get_multi  "/orgs/$Address/repos" type sort direction | \
            x jo 2c            .full_name  .visibility .permissions.push .permissions.maintain .description | \
            x csv header --add  RepoPath    Visibility  Push              Maintain              Description | \
            if [ -n "$csv" ]; then  ___x_cmd_cmds cat
            else                    ___x_cmd_gh_st_tab
            fi
    else
        ___x_cmd_gh_get_multi  "/orgs/$Address/repos" type sort direction | \
            x jo 2c            .full_name  .visibility .description | \
            x csv header --add  RepoPath    Visibility  Description | \
            if [ -n "$csv" ]; then  ___x_cmd_cmds cat
            else                    ___x_cmd_gh_st_tab  -           10          100%
            fi

    fi
}

# https://docs.github.com/en/rest/repos/repos#create-an-organization-repository
# shellcheck disable=SC2034
___x_cmd_gh_org_repo_create() {
    param:scope     ___x_cmd_github
    param:dsl       <<A
type:
    Access  =   private public internal
option:
    #1                          "repo names"                                                           <>
    --org                       "organization create repo"                                             <>=""

    --access                    "Can be public or private."                                            <>:Access=private
    --description               "A short description of the repository."                               <>:Org_Description=""
    --homepage                  "A URL with more information about the repository."                    <>:URL=""
    --team_id                   "the id of the team that will be granted access to this repository"    <>=""
    --gitignore_template        "Desired language or platform"                                         <>:Ignore=""
    --license_template          "The license keyword of the open source license for this repository."  <>:License=""

    --no_wiki                   "Whether to disable wiki"
    --no_issues                 "Whether to disable issue"
    --no_projects               "Whether to disable has_projects"
    --no_squash_merge           "Whether to allow squash merges for pull requests."
    --no_merge_commit           "Whether to allow merge commits for pull requests."
    --no_rebase_merge           "Whether to allow rebase merges for pull requests."
    --auto_init                 "Disable auto init README"
    --is_template               "make this repo available as a template,Default:false"
    --allow_auto_merge          "Whether to allow Auto-merge to be used on pull requests,Default:false"
    --delete_branch_on_merge    "Either to allow automatically deleting head branches when pull requests are merged,Default:false"
    --json|-j                   "output json data"
A
    param:run

    local private=""
    local visibility=""
    case "$access" in
        private)        private=true            ;;
        public)         private=false           ;;
        internal)       visibility=internal     ;;
    esac

    local name=""
    [ -n "$org" ] || {
        for name in "$@"; do
            case "$name" in
                */*)    ;;
                *)      gh:error "Please provide --org or add organization prefix before reponame"
                        return 1 ;;
            esac
        done
    }

    name="${___X_CMD_TX}"
    local gen_gh_json=""
    gen_gh_json="$(param:option2json +name ${private:+"+private"} ${visibility:+"+visibility"} -access -org     \
        'has_issues=^no_issues'                   'allow_merge_commit=^no_merge_commit'     'has_projects=^no_projects'   \
        'allow_rebase_merge=^no_rebase_merge'     'allow_squash_merge=^no_squash_merge'     'has_wiki=^no_wiki')"

    for name in "$@"; do
        local this_org="${name%%/*}"
        [ "$this_org" != "$name" ] || this_org="$org"
        gh:debug "$(x tmpl "$gen_gh_json"  "${name##*/}")"
        x tmpl "$gen_gh_json"  "${name##*/}" | ___x_cmd_gh_curl post "/orgs/$this_org/repos" "@-" | ___x_cmd_gh_repo____ui_handler Creating
    done
}
