# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_action_workflow() {
    param:subcmd  ___x_cmd_gh_action_workflow          \
        "ls|l"  "lists the workflow in a repository."  \
        view    "View the summary of a workflow"        \
        disable "Disable a workflow"                    \
        enable  "Enable a workflow"                     \
        run     "Run a workflow by creating a workflow_dispatch event"
    param:subcmd:try
    param:run
    ___x_cmd_gh_action_workflow _param_help_doc
    return 1
}

___x_cmd_gh_action_workflow_view() {
    param:scope ___x_cmd_github
    param:dsl <<A
type:
    run_status = Success Failure
options:
    --repo              "Provide repo name.(default:the current user repo)"                 <>:RepoName
    --workflow_id       "The ID of the workflow"                                            <>:workflow

    --branch            "Returns workflow runs associated with a branch."                   <>=""
    --actor             "returns someone workflow runs."                                    <>:Username=""
    --event             "Returns workflow run triggered by the event you specify."          <>:Run_event=""
    --sta|--status      "Returns workflow runs with the check run status."                  <>:run_status=""
    --per_page          "Results per page (max 100)"                                        <>:Per_page=""
    --page              "Page number of the results to fetch."                              <>:Numbers=""
    --created           "Returns workflow runs created within the given date-time range."   <>:ISOTime=""
    --check_suite_id    "Returns workflow runs with the check_suite_id that you specify."   <>=""
    --json|-j           "output json data"
    --exclude_pull_requests
A
    param:run

    ___x_cmd_gh_param_init_owner_repo
    local ___workflow_view_tmp="___x_cmd_gh_curl get /repos/$owner_repo/actions/workflows/${workflow_id##*/}/runs \
        actor branch event sta per_page page created check_suite_id exclude_pull_requests"

    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 $___workflow_view_tmp
    else
        ___X_CMD_UI_STATIC=1 ___ui_table_json Id=.id commit=.head_commit.message name=.name conclusion=.conclusion branch=.head_branch -- \
            "$___workflow_view_tmp | x jo q0 .workflow_runs"
    fi
}

___x_cmd_gh_action_workflow_ls() {
    param:scope ___x_cmd_github
    param:dsl <<A
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --per_page  "Results per page (max 100)"                                            <>:Per_page="30"
    --page      "Page number of the results to fetch."                                  <>:Numbers="1"
    --json|-j   "output json data"
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local ___workflow_ls_tmp="___x_cmd_gh_curl get /repos/$owner_repo/actions/workflows per_page page"

    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 $___workflow_ls_tmp
    else
        ___X_CMD_UI_STATIC=1 ___ui_table_json Id=.id name=.name path=.path state=.state -- \
            "$___workflow_ls_tmp | x jo q0 .workflows"
    fi
}

___x_cmd_gh_action_workflow_disable() {
    param:scope ___x_cmd_github
    param:dsl <<A
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --workflow_id   "The ID of the workflow"                                            <>:workflow
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    
    ___x_cmd_gh_curl put  "/repos/${owner_repo}/actions/workflows/${workflow_id}/disable" | (
            x jo env . error=.message
            if ___x_cmd_gh_http_error; then
                ___x_cmd_ui_tf  true "Disabled ${workflow_id} success"
            else
                ___x_cmd_ui_tf false "Disabled ${workflow_id} failure" "ErrorMsg:$error"
                return 1
            fi
        )
}

___x_cmd_gh_action_workflow_enable() {
    param:scope ___x_cmd_github
    param:dsl <<A
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --workflow_id   "The ID of the workflow"                                            <>:workflow
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    
    ___x_cmd_gh_curl put  "/repos/${owner_repo}/actions/workflows/${workflow_id}/enable" | (
            x jo env . error=.message
            if ___x_cmd_gh_http_error; then
                ___x_cmd_ui_tf  true "Enable ${workflow_id} success"
            else
                ___x_cmd_ui_tf false "Enable ${workflow_id} failure" "ErrorMsg:$error"
                return 1
            fi
        )
}


___x_cmd_gh_action_workflow_run() {
    param:scope ___x_cmd_github
    param:dsl <<A
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    --workflow_id   "The ID of the workflow"                                                <>:workflow
    --ref           "The git reference for the workflow. The reference can be a branch or tag name."    <>="main"
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    local gen_gh_json
    gen_gh_json="$(param:option2json -repo -workflow_id)"
    ___x_cmd_gh_curl post "/repos/${owner_repo}/actions/workflows/${workflow_id}/dispatches" gen_gh_json | (
            x jo env . error=.message
            if ___x_cmd_gh_http_error; then
                ___x_cmd_ui_tf  true "Created workflow_dispatch event for ${workflow_id} at $ref"
            else
                ___x_cmd_ui_tf false "ErrorMsg:$error"
                return 1
            fi
        )
}