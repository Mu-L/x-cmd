# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_config(){
    param:subcmd ___x_cmd_gh_config                                 \
        which      "Show current config path"                       \
        get        "Print the value of a given configuration key"   \
        set        "Update configuration with a value for the given key"
    param:subcmd:try
    param:run

    gh:warn "Subcmd Not Found."
    ___x_cmd_gh_config _param_help_doc
    return 1
}

# Section: config which
___x_cmd_gh_config_which() {
    param:void
    printf "%s\n" "$HOME/.x-cmd/.config/x-bash/app.github.config/___x_cmd_gh_GITHUB_DEFAULT"
}
# EndSection

# Section get and set
___x_cmd_gh_config_get() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --host        "host name"                               <>="github.com"
    #1            "The name of the configuration to get"    <>:ConfigName
'
    param:run
    [ -e  "$HOME/.x-cmd/.config/x-bash/app.github.config/___x_cmd_gh_GITHUB_DEFAULT" ] || return 1
    ___x_cmd_git_config_get "$HOME/.x-cmd/.config/x-bash/app.github.config/___x_cmd_gh_GITHUB_DEFAULT" "$host" "$1"
}

___x_cmd_gh_config_set() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --host    "host name"                           <>="github.com"
    #1        "Please provide configuration key"    <>:ConfigName
    #2        "Please provide configuration val"    <>
'
    param:run
    local ___github_path="$HOME/.x-cmd/.config/x-bash/app.github.config"
    [ -d  "${___github_path}" ] || mkdir -p "${___github_path}"
    ___github_path="$___github_path/___x_cmd_gh_GITHUB_DEFAULT"
    ___x_cmd_git_config_set "$___github_path" "$host" "$1" "$2" && ___x_cmd_ui_tf true "set config successfully" && return 0
    gh:error "gh config set Fail"
}
# EndSection