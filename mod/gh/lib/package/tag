# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_package_tag(){
    param:scope     ___x_cmd_github
    param:subcmd ___x_cmd_gh_package_tag                               \
        "ls|l"  "List packages for a specified organization or user."   \
        "info|i"  "get user packages info"                                \
        "rm"    "remove user packages"
    param:subcmd:try
    param:run

    ___x_cmd_gh_package_tag _param_help_doc
    return 1
}


# Section: List
# https://docs.github.com/en/rest/packages#list-package-versions-for-a-package-owned-by-a-user
# shellcheck disable=SC2154
___x_cmd_gh_package_tag_ls() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --package_name  "The name of the package."                  <>
    --owner         "Specify an organization or user."          <>=""
    --package_type  "The type of supported package."            <> = container npm maven rubygems docker nuget
    --per_page      "Results per page"                          <>="30"
    --page          "Page number of the results to fetch."      <>="1"
    --json|-j   "output json data"
'
    param:run
    local owner_type=""
    owner_type="$(___x_cmd_gh_owner_type_query "$owner" 2>/dev/null)"
    [ -n "$owner" ] || owner="$(___x_cmd_gh_config_get owner)"
    ___x_cmd_gh_get_multi "/${owner_type}s/${owner}/packages/${package_type}/${package_name}/versions"

}
# EndSection

# Section: Info
# https://docs.github.com/en/rest/packages#get-a-package-version-for-a-user
___x_cmd_gh_package_tag_info() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1              "Unique identifier of the package version." <>
    --package_name  "The name of the package."                  <>
    --owner         "Specify an organization or user."          <>=""
    --package_type  "The type of supported package."            <> = container npm maven rubygems docker nuget
'
    param:run

    local owner_type=""
    owner_type="$(___x_cmd_gh_owner_type_query "$owner" 2>/dev/null)"
    [ -n "$owner" ] || owner="$(___x_cmd_gh_config_get owner)"
    ___x_cmd_gh_curl get "/${owner_type}s/${owner}/packages/${package_type}/${package_name}/versions/$1"
}
# EndSection

# Section: Remove
# https://docs.github.com/en/rest/packages#delete-package-version-for-a-user
# shellcheck disable=SC2154
___x_cmd_gh_package_tag_rm() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1              "Unique identifier of the package version." <>
    --package_name  "The name of the package."                  <>
    --owner         "Specify an organization or user."          <>=""
    --package_type  "The type of supported package."            <> = container npm maven rubygems docker nuget
    --yes|-y        "Ignore remove prompt interception"
'
    param:run
    local owner_type=""
    owner_type="$(___x_cmd_gh_owner_type_query "$owner" 2>/dev/null)"
    [ -n "$owner" ] || owner="$(___x_cmd_gh_config_get owner)"

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete this packages: $(___x_cmd_ui bold red "$1") ?" || return
    ___x_cmd_gh_curl del "/${owner_type}s/${owner}/packages/${package_type}/${package_name}/versions/$1" | (
            [ -z "$___X_CMD_GH_IN_TEST_ENV" ] || { command cat; return; }
            x jo env . gh_resp_msg=.message gh_resp_err=.errors
            if ___x_cmd_gh_http_error; then
                ___x_cmd_ui_tf  true "Remove $1 packages successfully:"
            else
                ___x_cmd_ui_tf false "Remove $1 packages failure:" >&2
                ___x_cmd_gh____handle_resp
                return 1
            fi
        )
}
# EndSection