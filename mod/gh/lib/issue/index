# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_issue() {
    param:subcmd ___x_cmd_gh_issue          \
        "ls|l"          "List repo issue"           \
        "create|c"      "create an issue"           \
        "edit|ed"       "update an issue"           \
        close           "Close issue"               \
        reopen          "Reopen issue"
    param:subcmd:try
    param:run


    ___x_cmd_gh_issue _param_help_doc
    return 1
}

# Section: Create
___x_cmd_gh_issue_create(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    --title     "The title of the issue."                                               <>:string

    --body      "The contents of the issue."                                            <>:string=""
    --assignees "User responsible for this issue.(separated by commas)"                                      <>:array=""
    --milestone "milestone number"                                                      <>:number="null"
    --labels    "Labels to associate with this issue.(separated by commas)"             <>:array=""

    --json|-j   "output json data"
'
    param:run
    assignees=$(x jo "[$assignees]")
    labels=$(x jo "[$labels]")
    local gen_gh_json
    gen_gh_json="$(param:option2json -json)"
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl post "/repos/$owner_repo/issues" gen_gh_json | _____x_cmd_gh_issue_ui_utils Creating
}
# EndSection

# Section: List
___x_cmd_gh_issue_ls(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --state         "Indicates the state of the issues to return."                          <>="all"        = open closed all
    --milestone     "milestone number"                                                      <>:number=""
    --assignee      "User responsible for this issue."                                      <>:string=""
    --creator       "The user that created the issue."                                      <>:string=""
    --mentioned     "A user that mentioned in the issue."                                   <>:string=""
    --labels        "Labels to associate with this issue.(separated by commas)"             <>:array=""
    --sort          "What to sort results by"                                               <>="updated"    = created updated comments
    --direction     "The direction to sort the results by."                                 <>="desc"       = asc desc

    --per_page      "Results per page"                                                      <>="30"
    --page          "Page number of the results to fetch."                                  <>="1"

    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___X_CMD_UI_STATIC=1 ___gh_ui_mutual '___ui_table_json Number=.number Title=.title State=.state Url=.html_url -- $@' \
        ___x_cmd_gh_get_multi "/repos/${owner_repo}/issues" state milestone assignee creator mentioned labels sort direction
}
# EndSection

# Section: Edit
___x_cmd_gh_issue_edit() {
    param:scope ___x_cmd_github
    param:dsl '
options:
    #1          "The number that identifies the issue."                                 <>:number
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --title     "The title of the issue."                                               <>:string=""
    --body      "The contents of the issue."                                            <>:string=""
    --state     "State of the issue"                                                    <>:string="" = open closed
    --assignees "User responsible for this issue."                                      <>:string=""
    --milestone "milestone number"                                                      <>:number=""
    --labels    "Labels to associate with this issue.(separated by commas)"             <>:array=""

    --json|-j   "output json data"
'
    param:run
    local tmp_assignees
    tmp_assignees=$(x jo "[$assignees]")
    local tmp
    tmp=$(x jo "[$labels]")
    local gen_gh_json
    gen_gh_json="$(param:option2json -json -labels -assignees ${labels+"labels=tmp"} ${assignees+"assignees=tmp_assignees"})"
    ___x_cmd_gh_param_init_owner_repo

    ___x_cmd_gh_curl patch "/repos/${owner_repo}/issues/${1}" gen_gh_json | _____x_cmd_gh_issue_ui_utils Edit
}
# EndSection

# Section: Reopen
___x_cmd_gh_issue_reopen(){
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1          "The number that identifies the issue."                                 <>:number
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    --json|-j   "output json data"
'
    param:run

    local state=open

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl patch "/repos/${owner_repo}/issues/${1}" -- state | _____x_cmd_gh_issue_ui_utils Reopen
}
# EndSection

# Section: Close
___x_cmd_gh_issue_close(){
     param:scope     ___x_cmd_github
    param:dsl       '
options:
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    #1          "The number that identifies the issue."                                 <>:number

    --json|-j   "output json data"
'
    param:run

    local state=closed

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_curl patch "/repos/${owner_repo}/issues/${1}" -- state | _____x_cmd_gh_issue_ui_utils Close
}
# EndSection

# Section: issue utils
_____x_cmd_gh_issue_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gh_http_error
        return
    fi

    local data
    local msg="$1 issue  success."
    local error_msg="$1 issue failure."
    case "$1" in
        Creating|Edit)
            data="title=.title url=.html_url state=.state"
            ;;
        Reopen|Close)
            ;;
    esac
    x jo env . id=.number error=. $data
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true "$msg" "number: $id" ${title+"title: $title"}  ${url+"url: $url"} ${state+"state: $state"}
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
)
# EndSection