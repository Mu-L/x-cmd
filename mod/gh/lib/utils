# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2046

# Section: Help
_____x_cmd_gh_help__token_setting(){
    printf "\n%s %s \n%s\n" \
        "$(___x_cmd_ui yellow 'Run command to add|repleace token:')" \
        "$(___x_cmd_ui bold cyan "\`x gh cfg token=<token>\`")"   \
        "$(___x_cmd_ui "$(___x_cmd_gh___get_web_host)/settings/tokens")"
}

_____x_cmd_gh_help__owner_setting(){
    printf "|\n    %s %s\n    %s %s\n" \
        "$(___x_cmd_ui yellow 'Run current command to setup default owner in the current session:')" \
        "$(___x_cmd_ui bold cyan "\`x gh cur owner=<owner>\`")" \
        "$(___x_cmd_ui yellow 'Run config  command to save default owner to local configure file:')" \
        "$(___x_cmd_ui bold cyan "\`x gh cfg owner=<owner>\`")"
}

_____x_cmd_gh_help(){
    x help -m gh "$@" 1>&2
    return 1
}

# EndSection

# Section: HTTP header & body & request
___x_cmd_gh_resp_header() {
    command cat "$___X_CMD_GH_TMP/.____x_cmd_gh_curl_header"
}

___x_cmd_gh_resp_code(){
    ___x_cmd_gh_resp_header | _____x_cmd_gx_get_resp_code_by_header
}

___x_cmd_gh_curl(){
    local op="$1"
    local _api_url="$2"
    shift 2
    local ___X_CMD_API_GH_HEADER="-s -H \"Accept:application/vnd.github.v3+json\" -D \"$___X_CMD_GH_TMP/.____x_cmd_gh_curl_header\""

    local ___X_CMD_API_GH_TOKEN=""; local _curl_host_tmp="";
    ___x_cmd_gh_current    ___X_CMD_API_GH_TOKEN:=token   _curl_host_tmp:=host 2>/dev/null
    local ___X_CMD_API_GH_HOST="${___X_CMD_API_GH_HOST:-"$_curl_host_tmp"}"

    local ___X_CMD_GH_SHOW_HTTP_CODE=1
    case "$op" in
         get)
            if [ -n "$NO_CACHE" ]; then
                ___x_cmd_api_gh get "$_api_url" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gh_curl___use_query_data "$@"))")
            else
                x ccmd 10s --        eval "___X_CMD_API_GH_HOST=$___X_CMD_API_GH_HOST ___X_CMD_API_GH_TOKEN=$___X_CMD_API_GH_TOKEN ___x_cmd_api_gh get \"$_api_url\" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gh_curl___use_query_data "$@"))")"
            fi
            ___x_cmd_gh_http_error   eval "___X_CMD_API_GH_HOST=$___X_CMD_API_GH_HOST ___X_CMD_API_GH_TOKEN=$___X_CMD_API_GH_TOKEN ___x_cmd_api_gh get \"$_api_url\" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gh_curl___use_query_data "$@"))")"
            ;;
        post|put|patch|del)
            ___x_cmd_api_gh "$op" "$_api_url" "$(x curl gencode "$@")"
            ___x_cmd_gh_http_error
            ;;
        download)
            [ -n "$1" ] || M='Please provide output dir' arg:ret:64
            local __out="$1"
            case "$__out" in
                */*)   x mkdirp "${__out%/*}"  ;;
                *)     __out="./${__out}"      ;;
            esac
            ___X_CMD_API_GH_HEADER="-L -# -H \"Accept:application/vnd.github.v3+json\" -D \"$___X_CMD_GH_TMP/.____x_cmd_gh_curl_header\""
            ___x_cmd_api_gh "${___X_CMD_GH_DOWNLOAD_REQ_METHOD:-"get"}" "$_api_url" -o "\"$__out\""
            if ! ___x_cmd_gh_http_error; then
                (
                    command cat "$__out" 2>/dev/null | x jo env . gh_resp_msg=.message gh_resp_err=.errors
                    ___x_cmd_ui_tf false "Download failure:" >&2
                    ___x_cmd_gh____handle_resp
                    return 1
                )
            fi
            ;;
        upload)
            [ -n "$1" ] || M='Please provide upload filepath' arg:ret:64
            local __file_path="$1"; shift;
            local __file_type="\"Content-Type: ${file_type:-"octet-stream"}\""
            ___X_CMD_API_GH_HEADER="-L -# -H \"Accept:application/vnd.github.v3+json\" -D \"$___X_CMD_GH_TMP/.____x_cmd_gh_curl_header\" -H ${__file_type}"
            [ -f "$__file_path" ] || {
                gh:error "Upload Failure. Not found target file. Please check file exist $__file_path"
                return 1
            }
            gh:info "Uploading file..."
            ___x_cmd_api_gh "${___X_CMD_GH_UPLOAD_REQ_METHOD:-"post"}" "$_api_url" -T "\"$__file_path\""
            ___x_cmd_gh_http_error
            ;;
    esac
}

# shellcheck disable=SC2154
___x_cmd_gh_curl___use_query_data(){
    [ $# -gt 0 ] || return
    printf "%s " "-G"
    local name=""
    for name in "$@"; do
        case "$name" in
            p)          [ -z "$p" ]   || printf "%s " "path==$p"    ;;
            sta)        [ -z "$sta" ] || printf "%s " "status==$sta";;
            *)                           printf "%s " "$name=="     ;;
        esac
    done
}

___x_cmd_gh_http_error(){
    if [ "$op" = get ] && [ "$___X_CMD_CCMD_AGE" -ne -1 ]; then
        gh:debug "Is cache data"
        return 0
    fi
    local http_resp_code=""
    http_resp_code=$(___x_cmd_gh_resp_code)
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 200 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || {
            gh:debug "Cache Clear"
            x ccmd invalidate "$@" 1>/dev/null 2>&1
        }
        [ -z "$___X_CMD_GH_SHOW_HTTP_CODE" ] || {
            gh:error "HTTP Code is $http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_GH_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

___x_cmd_gh____printf_error(){
    if ! ___x_cmd_is_interative_tty || [ ! -t 2 ] || [ -n "$NO_COLOR" ]; then
        printf "  - ErrorMsg: %s\n" "$1" >&2
    else
        printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m%s\033[0m\n" "$1" >&2
    fi
}
___x_cmd_gh____handle_resp(){
    [ -z "$gh_resp_msg" ] || ___x_cmd_gh____printf_error "$gh_resp_msg"
    [ -z "$gh_resp_err" ] || ___x_cmd_gh____printf_error "$gh_resp_err"
}
# EndSection

# Section: Resolve pagination

___x_cmd_gh_st_tab(){
    if ! ___x_cmd_is_interative_tty || [ ! -t 1 ]; then
        x csv static_tab
    else
        x csv static_tab "$@"
    fi
}

___x_cmd_gh_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gh_curl get "$@" page per_page
        return
    fi

    local page=1
    local per_page=100
    local NO_CACHE=1
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gh_get_multi___json_prt "$@"
    else
        ___x_cmd_gh_get_multi___ui_table "$@"
    fi

}
___x_cmd_gh_get_multi___ui_table(){
    ___x_cmd_gh_curl get "$@" page per_page
    printf "\n"
    local next_url=""
    _____x_cmd_gh_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_gh_curl get "$next_url" || return
        printf "\n"
        _____x_cmd_gh_next_url
    done
}

___x_cmd_gh_get_multi___json_prt(){
    local tmp=""
    tmp=$(command mktemp)
    ___x_cmd_gh_curl get "$@" page per_page > "$tmp"
    printf "\n" >> "$tmp"

    local next_url=""
    _____x_cmd_gh_next_url
    if [ -z "$next_url" ]; then
        command cat "$tmp"
        x rmrf "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_gh_curl get "$next_url" >> "$tmp" || return
        printf "\n" >> "$tmp"
        _____x_cmd_gh_next_url
    done
    < "$tmp" x jo q0 \*.\* . | ___x_cmd_gx_merge_multi_page_json_array
    x rmrf "$tmp"
}

_____x_cmd_gh_next_url() {
    next_url="$(grep "link:" "$___X_CMD_GH_TMP/.____x_cmd_gh_curl_header")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ]; then
        local _split_host=""
        if ! _split_host="$(___x_cmd_gh_config_get host 2>/dev/null)"; then
            _split_host="https://api.github.com"
        fi
        next_url="${tmp_url#*"${_split_host}"}"
    else
        next_url=""
    fi
}

# EndSection

# Section: Default param util
alias ___x_cmd_gh_param_init_owner_repo='
    local owner_repo=""
    ___x_cmd_gh_param_normalize_repo  || return
'

# shellcheck disable=SC2154,SC2034
___x_cmd_gh_param_normalize_repo() {
    local op="$repo"
    [ -n "$op" ] || op="$1"
    case "$op" in
    */*)
        owner_repo="$op"
        ;;
    "")
        local owner=""; local repo="";
        ___x_cmd_gh_current owner:=owner repo:=repo 2>/dev/null
        case "$repo" in
            */*) owner_repo="$repo"     ;;
            "")  owner_repo="$(___x_cmd_gx_get_owner_repo)" ;;
            *)
                if [ -n "$owner" ]; then
                    owner_repo="${owner}/${repo}"
                else
                    gh:error -h "$(_____x_cmd_gh_help__owner_setting)" "No owner provided. Default owner not set."
                    return 1
                fi
            ;;
        esac
        ;;
    *)
        local x_=""; ___x_cmd_gh_current get_ owner 2>/dev/null
        if [ -z "$x_" ]; then
            gh:error -h "$(_____x_cmd_gh_help__owner_setting)" "No owner provided. Default owner not set."
            return 1
        fi
        owner_repo="${x_}/${op}"
        ;;
    esac
}
# EndSection

# Section: gh util
# NOTE: remove prefix: _host_tmp="${_host_tmp#*'://'}";
___x_cmd_gh___get_web_host(){
    local _host_tmp=""
    if _host_tmp="$(___x_cmd_gh_config_get web_host 2>/dev/null)"; then
        printf "%s" "$_host_tmp"
    else
        printf "%s" "https://github.com"
    fi
}
# EndSection
