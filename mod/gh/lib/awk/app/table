# shellcheck shell=dash
___x_cmd_gh_tui_app_processer(){
    case "$1" in
        data:total_count)   printf "data:total_count:%s\n" "$(___x_cmd_gh_resp_header "total_count")" ;;
        data:request:workflow_view:*)  ___x_cmd_gh_action_workflow_app_datarequest "${1#*data:request:workflow_view:}";;
        data:request:*)     ___x_cmd_gh_tui_app_datarequest "${1#*data:request:}"  ;;
    esac
}

___x_cmd_gh_tui_app_datarequest(){
    local signal; local page; local start; local content
    signal="$1"
    page=$(( (signal-1)/per_page  + 1 ))
    start=$(( (page-1)*per_page  + 1 ))

    content="$( eval "$___X_CMD_GH_TUI_TABLE_REQUSET_DATA" )" || {
        [ -n "$___gh_error_msg" ] || ___gh_error_msg="Failed to get data"
        printf "errexit:%s\n" "$___gh_error_msg"
        return 1
    }
    printf "data:start:%s\n%s\n" "$start" "$content"
}

___x_cmd_gh_action_workflow_app_datarequest(){
    local content
    content="$( eval "$___X_CMD_GH_TUI_ACTION_WORKFLOW_REQUSET_DATA" "$1")" || {
        [ -n "$___gh_error_msg" ] || ___gh_error_msg="Failed to get data"
        printf "errexit:%s\n" "$___gh_error_msg"
        return 1
    }
    printf "data:Runs_ID:%s\n%s\n" "$1" "$content"
}

___x_cmd_gh_get_multi___get_data(){
    ___x_cmd_gh_curl get "$@" page per_page
}

___x_cmd_gh_tui_app(){
    ___x_cmd_tui_app_processer(){ ___x_cmd_gh_tui_app_processer "$@"; }
    local filename=${1:?Provide a file name}
    local _exitcode=0
    x tui bigapp \
        -f "$___X_CMD_ROOT_MOD/tui/lib/eg.comp/table.comp.awk" \
        -f "$___X_CMD_ROOT_MOD/gh/lib/awk/app/$filename"
    _exitcode="$?"
    unset -f ___x_cmd_tui_app_processer
    return "$_exitcode"
}