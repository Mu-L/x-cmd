
___x_cmd_zig_initcc(){
    ___x_cmd_cmds chmod +x "$___X_CMD_ROOT_MOD/zig/lib/bin"/*

    local dir="$___X_CMD_ROOT_DATA/zig/ccbin"

    zig:info "adding to PATH -> $dir"

    PATH="$dir":"$PATH"
    [ ! -f "$dir/DONE" ] || return 0

    x mkdirp "$dir"

    ___x_cmd_zig_initcc___code c++ >"$dir/cpp"
    ___x_cmd_zig_initcc___code c++ >"$dir/g++"
    ___x_cmd_zig_initcc___code c++ >"$dir/c++"

    ___x_cmd_zig_initcc___code cc >"$dir/gcc"
    ___x_cmd_zig_initcc___code cc >"$dir/cc"

    ___x_cmd_zig_initcc___code ar >"$dir/ar"
    ___x_cmd_zig_initcc___code ranlib >"$dir/ranlib"

    ___x_cmd_zig_initcc___make >"$dir/make"

    ___x_cmd_cmds chmod +x "$dir"/*

    printf "\n" >"$dir/DONE"
}

___x_cmd_zig_initcc___code(){
    x env try zig

    local x_
    ___x_cmd_whichbin_ zig
    x_="$(___x_cmd_q1 "$x_")"

    printf "%s\n" "
#! /bin/sh

$x_ $1 \"\$@\"
"
}


# Directly using make assimulate path
___x_cmd_zig_initcc___make(){
    local x_
    ___x_cmd_whichbin_ zig
    x_="$(___x_cmd_q1 "$x_")"

    printf "%s" '
#! /bin/sh

. "$HOME/.x-cmd.root/X"
x cosmo make "$@"
'
}
