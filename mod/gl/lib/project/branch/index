# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gl_project_branch(){
    param:subcmd ___x_cmd_gl_project_branch       \
        "ls|l"              "list repo branch"              \
        "info|i"            "get repo branch info"          \
        rm                  "Delete repo branch"            \
        default             "set default branch"            \
        protection          "protection branch management"
    param:subcmd:try
    param:run

    ___x_cmd_gl_project_branch _param_help_doc
    return 1
}

# Section: List
# https://docs.gitlab.com/ee/api/branches.html#list-repository-branches
___x_cmd_gl_project_branch_ls(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --project       "The ID or URL-encoded path of the project owned by the authenticated user" <>
    --search        "Return list of branches containing the search string"                      <>=""

    --per_page      "Results per page"                                                  <>=30
    --page          "Page number of the results to fetch."                              <>=1
    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    ___X_CMD_UI_STATIC=1 ___gl_ui_mutual '___ui_table_json BranchName=.name Protected=.protected Default=.default LastCommit=.commit.short_id -- $@' \
         ___x_cmd_gl_get_multi "/projects/$owner_project/repository/branches" search
}
# EndSection

# Section: Info
# https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch
___x_cmd_gl_project_branch_info(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1          "branch name"                                                               <>:Branch
    --project   "The ID or URL-encoded path of the project owned by the authenticated user" <>
    --json|-j       "output json data"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_get_multi "/projects/${owner_project}/repository/branches/$1" | _____x_cmd_gl_branch_ui_utils Info
}
# EndSection

# Section: Remove
# shellcheck disable=2154
___x_cmd_gl_project_branch_rm(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1              "branch names"                                                               <>=""
    --project       "The ID or URL-encoded path of the project owned by the authenticated user"  <>
    --merged        "delete all branches that are merged into the project default branch"
'
    param:run
    ___x_cmd_gl_param_init_owner_project
    local branch
    if [ -n "$merged" ]; then
        branch="all merged"
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete ${project} project $(___x_cmd_ui bold red "${branch}") branches ?" || return
        ___x_cmd_gl_curl delete "/projects/${owner_project}/repository/merged_branches" | ___x_cmd_gl_project_branch_rm_status_handler
    else
        [ -n "$1" ] || { gl:error "Please provide at least one branch name"; return 1; }
        for branch in "$@"; do
            [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete ${project} project $(___x_cmd_ui bold red "${project} ${branch}") branch ?" || continue
             ___x_cmd_gl_curl delete "/projects/${owner_project}/repository/branches/${branch}" | ___x_cmd_gl_project_branch_rm_status_handler
        done
    fi
}

___x_cmd_gl_project_branch_rm_status_handler(){
    (
        x jo env . gl_resp_err=.error gl_resp_err=.message
        if ___x_cmd_gl_http_error; then
            ___x_cmd_ui_tf  true "Delete ${project} $branch branch successfully."
        else
            ___x_cmd_ui_tf false "Delete ${project} $branch branch failure"
            ___x_cmd_gl____handle_resp
            return 1
        fi
    )
}
# EndSection

# Section: Defult
___x_cmd_gl_project_branch_default(){
    param:dsl       '
options:
    #1          "branch name"                                   <>
    --project   "The ID or URL-encoded path of the project."    <>:RepoName
    --json|-j   "output json data"

'
    param:run

    local default_branch="$1"
    local gen_gl_json
    gen_gl_json="$(param:option2json -project +default_branch)"
    gl:debug "$gen_gl_json"

    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl put "/projects/$owner_project" gen_gl_json | _____x_cmd_gl_branch_ui_utils Default
}
# EndSection

# Section: branch utils
# shellcheck disable=2154
_____x_cmd_gl_branch_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gl_http_error
        return
    fi

    (
        case "$1" in
            Info)
                _data="Protected=.protected sha=.commit.short_id merged=.merged url=.web_url"
                _msg="get repo $project branch info success"
                _error_msg="get repo $project branch info fail"
                ;;
            Default)
                _data="url=.web_url"
                _msg="Set repo default branch successfully"
                _error_msg="Set repo default branch failed"
                ;;
        esac
        eval x jo env . name=.name gl_resp_err=.error gl_resp_err=.message "$_data"
        if [ -n "$name" ]; then
            ___x_cmd_ui_tf true "$_msg"   ${name:+"Name: $name"} ${Protected:+"Protected: $Protected"} ${merged:+"Merged: $merged"} \
                ${sha:+"LastCommit: $sha"} ${url:+"Url: $url"}
        else
            ___x_cmd_ui_tf false "$_error_msg"
            ___x_cmd_gl____handle_resp
            return 1
        fi
    )
}
# EndSection