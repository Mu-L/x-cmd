# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 6: Repo Path & Clone
############################
___x_cmd_gl_project_url_http(){
    param:scope  ___x_cmd_gl
    param:dsl    '
options:
    #n  "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "https://gitlab.com/%s.git\n" "$(___x_cmd_gl_param_normalize_repo "$repo")"
    done
}

___x_cmd_gl_project_url(){
    param:void
    ___x_cmd_gl_project_url_ssh ${1:+"$@"}
}

___x_cmd_gl_project_url_ssh(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #n "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "git@gitlab.com:%s.git\n" "$(___x_cmd_gl_param_normalize_repo "$repo")"
    done
}

# TODO Not available gitlab return Not Found Project
___x_cmd_gl_project_url_fork(){
    :
}

___x_cmd_gl_project_cl()(
    param:void
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then _____x_cmd_gl_help project clone; return 0;
    fi
    # shellcheck disable=SC2317
    ___x_cmd_git_clone___defaultowner(){
        local ___X_CMD_GL_DEFAULT_OWNER
        ___x_cmd_gl_current_owner 1>/dev/null
        [ -n "${___X_CMD_GL_DEFAULT_OWNER}" ] || {
            gl:warn "There is no default owner found."
            gl:error "Please specify an owner for project: ${repo}"
            return 1
        }
        printf "%s\n" "$___X_CMD_GL_DEFAULT_OWNER"
    }
    local _host="${___X_CMD_GL_DOMAIN:-"https://gitlab.com"}"
    _host="${_host#*'https://'}"; _host="${_host#*'http://'}"
    ___X_CMD_GIT_CLONE_HOST="$_host" x git clone "$@"
)