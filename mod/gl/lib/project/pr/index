# shellcheck shell=sh
# shellcheck disable=SC2039,3043,2034
# https://docs.gitlab.com/ee/api/merge_requests.html
___x_cmd_gl_project_pr(){
    param:scope         ___x_cmd_gl
    param:subcmd ___x_cmd_gl_project_pr             \
        ls              "list merge requests"       \
        info            "merge requests info"       \
        create          "create merge requests"     \
        edit            "edit merge requests"       \
        merge           "merge merge requests"      \
        rm              "delete merge requests"
    param:subcmd:try
    param:run

    ___x_cmd_gl_pr _param_help_doc
    return 1
}


# Section: project pr ls
# https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests
___x_cmd_gl_project_pr_ls(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --project                     "The ID or URL-encoded path of the project owned by the authenticated user"                                                                                    <>
    --assignee_id                 "Returns merge requests assigned to the given user id."                                                                                                        <>:Number=""
    --author_id                   "Return prs created by the given user id."                                                                                                                     <>:Number=""
    --author_username             "Return prs created by the given username."                                                                                                                    <>=""
    --approved_by_ids             "Returns merge requests which have been approved by all the users with the given id, with a maximum of 5. "                                                    <>:array=""
    --approver_ids                "Returns merge requests which have specified all the users with the given id as individual approvers."                                                         <>:array=""
    --created_after               "Return merge requests created on or after the given time. Expected in ISO 8601 format."                                                                       <>:datetime=""
    --created_before              "Return merge requests created on or before the given time."                                                                                                   <>:datetime=""
    --environment                 "Returns merge requests deployed to the given environment."                                                                                                    <>=""
    --iids                        "Return the request having the given iid."                                                                                                                     <>:array=""
    --labels                      "Return merge requests matching a comma-separated list of labels."                                                                                             <>=""
    --milestone                   "Return merge requests for a specific milestone. "                                                                                                             <>=""
    --my_reaction_emoji           "Return merge requests reacted by the authenticated user by the given emoji. "                                                                                 <>=""
    --not                         "Return merge requests that do not match the parameters supplied. "                                                                                            <>:hash=""
    --order_by                    "Return requests ordered by created_at, title, or updated_at fields. "                                                                                         <>="created_at"
    --reviewer_id                 "Returns merge requests which have the user as a reviewer with the given user id.  "                                                                           <>=""
    --reviewer_username           "Returns merge requests which have the user as a reviewer with the given username. "                                                                           <>=""
    --scope                       "Return merge requests for the given scope: created_by_me, assigned_to_me or all. Defaults to created_by_me."                                                  <>=""
    --search                      "Search merge requests against their title and description."                                                                                                   <>=""
    --sort                        "Return requests sorted in asc or desc order. Default is desc."                                                                                                <>=""
    --state                       "Return all merge requests or just those that are opened, closed, locked, or merged."                                                                          <>=""
    --source_branch               "Return merge requests with the given source branch."                                                                                                          <>=""
    --target_branch               "Return merge requests with the given target branch."                                                                                                          <>=""
    --updated_after               "Return prs updated on or after the given time."                                                                                                               <>:datetime=""
    --updated_before              "Return prs updated on or before the given time."                                                                                                              <>:datetime=""
    --view                        "If simple, returns the iid, URL, title, description, and basic state of merge request."                                                                       <>=""
    --wip                         "Filter merge requests against their wip status. yes to return only draft merge requests, no to return non-draft merge requests."                              <>=""
    --with_labels_details         "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
    --with_merge_status_recheck   "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
    --json|-j                     "output json data"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    ___X_CMD_UI_STATIC=1 ___gl_ui_mutual '___ui_table_json Id=.id iid=.iid project_id=.project_id title=.title state=.state web_url=.web_url -- $@' \
        ___x_cmd_gl_get_multi "/projects/$owner_project/merge_requests" sort order_by search state labels source_branch target_branch
}
# EndSection

# Section: Info
# https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr
___x_cmd_gl_project_pr_info(){
    param:scope     ___x_cmd_gl
    param:dsl      '
options:
    #1                                 "The internal ID of the merge request."                                                 <>
    --project                          "The ID or URL-encoded path of the project owned by the authenticated user"             <>
    --render_html                      "If true, response includes rendered HTML for title and description."
    --include_diverged_commits_count   "If true, response includes the commits behind the target branch."
    --include_rebase_in_progress       "If true, response includes whether a rebase operation is in progress."

    --json|-j                          "output json data"

'
    param:run
    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl get "/projects/$owner_project/merge_requests/$1" | _____x_cmd_gl_project_pr_ui_utils Info
}

# Section: Create
# https://docs.gitlab.com/ee/api/merge_requests.html#create-mr
___x_cmd_gl_project_pr_create(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --project                     "The ID or URL-encoded path of the project owned by the authenticated user"                               <>
    --source_branch               "Return merge requests with the given source branch."                                                     <>
    --target_branch               "Return merge requests with the given target branch."                                                     <>
    --title                       "Title of MR."                                                                                            <>
    --allow_collaboration         "Allow commits from members who can merge to the target branch."
    --allow_maintainer_to_push    "Alias of allow_collaboration."
    --approvals_before_merge      "Number of approvals required before this can be merged "                                                 <>:Number=""
    --assignee_id                 "Assignee user ID."                                                                                       <>:Number=""
    --assignee_ids                "The ID of the users to assign the MR to. Set to 0 or provide an empty value to unassign all assignees."  <>:array=""
    --description                 "Description of the merge request."                                                                       <>=""
    --labels                      "Labels for the merge request, as a comma-separated list."                                                <>=""
    --milestone_id                "The global ID of a milestone."                                                                           <>:Number=""
    --remove_source_branch        "Flag indicating if a merge request should remove the source branch when merging. "
    --reviewer_ids                "The ID of the users added as a reviewer to the merge request. "                                          <>:array=""
    --squash                      "Squash commits into a single commit when merging."
    --target_project_id           "Numeric ID of the target project."                                                                       <>:Number=""
    --json|-j                     "output json data"
'
    param:run

    local gen_gl_json
    gen_gl_json="$(param:option2json -project)"
    ___x_cmd_gl_param_init_owner_project

    ___x_cmd_gl_curl post "/projects/$owner_project/merge_requests" "gen_gl_json" | _____x_cmd_gl_project_pr_ui_utils Creating
}
# EndSection

# Section: edit
# https://docs.gitlab.com/ee/api/merge_requests.html#update-mr
___x_cmd_gl_project_pr_edit(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1                            "The ID of a merge request."                                                         <>
    --project                     "The ID or URL-encoded path of the project owned by the authenticated user"          <>
    --title                       "Title of MR."                                                                       <>
    --add_labels                  "Comma-separated label names to add to a merge request."                             <>=""
    --allow_collaboration         "Allow commits from members who can merge to the target branch."
    --allow_maintainer_to_push    "Alias of allow_collaboration."
    --assignee_id                 "The ID of the user to assign the merge request to."                                 <>:Number=""
    --assignee_ids                "The ID of the users to assign the merge request to. "                               <>:array=""
    --description                 "Description of the merge request."                                                  <>=""
    --discussion_locked           "Flag indicating if the merge request discussion is locked. "
    --labels                      "Comma-separated label names for a merge request."                                   <>=""
    --milestone_id                "The global ID of a milestone to assign the merge request to. "                      <>:Number=""
    --remove_source_branch        "Flag indicating if a merge request should remove the source branch when merging. "
    --remove_labels               "Comma-separated label names to remove from a merge request. "                       <>=""
    --reviewer_ids                "The ID of the users added as a reviewer to the merge request. "                     <>:array=""
    --squash                      "Squash commits into a single commit when merging."
    --state_event                 "New state (close/reopen). "                                                         <>=""
    --target_branch               "The target branch. "                                                                <>=""
    --json|-j                     "output json data"
'
    param:run
    local gen_gl_json
    gen_gl_json="$(param:option2json -project)"

    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl put "/projects/$owner_project/merge_requests/$1" "gen_gl_json" | _____x_cmd_gl_project_pr_ui_utils Edit
}
# EndSection

# Section: merge
# https://docs.gitlab.com/ee/api/merge_requests.html#merge-a-merge-request
___x_cmd_gl_project_pr_merge() {
    param:scope     ___x_cmd_github
    param:dsl       '
options:
    #1                              "The ID of a merge request."                                                                        <>
    --project                       "The ID or URL-encoded path of the project owned by the authenticated user"                         <>
    --merge_commit_message          "Custom merge commit message."                                                                      <>=""
    --merge_when_pipeline_succeeds  "If true, the merge request is merged when the pipeline succeeds."
    --sha                           "If present, then this SHA must match the HEAD of the source branch, otherwise the merge fails."    <>=""
    --should_remove_source_branch   "If true, removes the source branch."
    --squash_commit_message         "Custom squash commit message."                                                                     <>=""
    --squash                        "If true, the commits are squashed into a single commit on merge."                                  <>=""
    --json|-j                       "output json data"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    local gen_gl_json
    gen_gl_json="$(param:option2json -project)"
    ___x_cmd_gl_curl put "/projects/$owner_project/merge_requests/$1/merge" "gen_gl_json" | _____x_cmd_gl_project_pr_ui_utils Merge
}

# Section: rm
# https://docs.gitlab.com/ee/api/merge_requests.html#delete-a-merge-request
___x_cmd_gl_project_pr_rm(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1              "The internal ID of the merge request."                                         <>
    --project       "The ID or URL-encoded path of the project owned by the authenticated user."    <>

    --yes|-y        "Ignore remove prompt interception"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete merge request : $(___x_cmd_ui bold red "$1") ?" || return 0

    ___x_cmd_gl_curl delete "/projects/$owner_project/merge_requests/$1" | (
        x jo env . error=.
        if ___x_cmd_gl_http_error; then
            ___x_cmd_ui_tf  true "Successfully deleted iid $1 merge request in $project project"
        else
            ___x_cmd_ui_tf false "Failed to delete iid $1 merge request in $project project." "ErrorMsg:$error"
            return 1
        fi
    )
}
# EndSection


# Section: group pr ls
# https://docs.gitlab.com/ee/api/merge_requests.html#list-group-merge-requests
___x_cmd_gl_groups_pr(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --id                          "The ID or URL-encoded path of the project owned by the authenticated user"                                                                                    <>
    --assignee_id                 "Returns merge requests assigned to the given user id."                                                                                                        <>:Number=""
    --author_id                   "Return prs created by the given user id."                                                                                                                     <>:Number=""
    --author_username             "Return prs created by the given username."                                                                                                                    <>=""
    --approved_by_ids             "Returns merge requests which have been approved by all the users with the given id, with a maximum of 5. "                                                    <>:array=""
    --approver_ids                "Returns merge requests which have specified all the users with the given id as individual approvers."                                                         <>:array=""
    --approved_by_usernames       "Returns merge requests which have been approved by all the users with the given username"                                                                     <>=""
    --created_after               "Return merge requests created on or after the given time. Expected in ISO 8601 format."                                                                       <>:datetime=""
    --created_before              "Return merge requests created on or before the given time."                                                                                                   <>:datetime=""
    --labels                      "Return merge requests matching a comma-separated list of labels."                                                                                             <>=""
    --milestone                   "Return merge requests for a specific milestone. "                                                                                                             <>=""
    --my_reaction_emoji           "Return merge requests reacted by the authenticated user by the given emoji. "                                                                                 <>=""
    --not                         "Return merge requests that do not match the parameters supplied. "                                                                                            <>:hash=""
    --non_archived                "Return merge requests from non archived projects only. Default is true."
    --order_by                    "Return requests ordered by created_at, title, or updated_at fields. Default is created_at. "                                                                  <>=""
    --reviewer_id                 "Returns merge requests which have the user as a reviewer with the given user id.  "                                                                           <>=""
    --reviewer_username           "Returns merge requests which have the user as a reviewer with the given username. "                                                                           <>=""
    --scope                       "Return merge requests for the given scope: created_by_me, assigned_to_me or all. Defaults to created_by_me."                                                  <>=""
    --search                      "Search merge requests against their title and description."                                                                                                   <>=""
    --sort                        "Return requests sorted in asc or desc order. Default is desc."                                                                                                <>=""
    --state                       "Return all merge requests or just those that are opened, closed, locked, or merged."                                                                          <>=""
    --source_branch               "Return merge requests with the given source branch."                                                                                                          <>=""
    --target_branch               "Return merge requests with the given target branch."                                                                                                          <>=""
    --updated_after               "Return prs updated on or after the given time."                                                                                                               <>:datetime=""
    --updated_before              "Return prs updated on or before the given time."                                                                                                              <>:datetime=""
    --view                        "If simple, returns the iid, URL, title, description, and basic state of merge request."                                                                       <>=""
    --with_labels_details         "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
    --with_merge_status_recheck   "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
    --json|-j                     "output json data"
'
    param:run

    ___x_cmd_gl_param_init_owner_project
    ___X_CMD_UI_STATIC=1 ___gl_ui_mutual '___ui_table_json Id=.id iid=.iid project_id=.project_id title=.title state=.state web_url=.web_url -- $@' \
        ___x_cmd_gl_get_multi "/groups/$id/merge_requests" sort order_by state labels source_branch target_branch
}

# EndSection

# Section: pr utils
_____x_cmd_gl_project_pr_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gl_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="iid=.iid title=.title state=.state url=.web_url author=.author.username"
            msg="Successfully obtained PR information"
            error_msg="Failed to get PR information"
            ;;
        Creating|Edit)
            data="iid=.iid title=.title state=.state url=.web_url author=.author.username"
            msg="$1 PR success"
            error_msg="Failed to $1 PR"
            ;;
        Merge)
            data="iid=.iid title=.title state=.state url=.web_url author=.author.username"
            msg="merge merge requests Successful"
            error_msg="merge merge requests Failed"
            ;;
    esac
    x jo env . id=.id error=. $data
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true "$msg" "Id: $id" ${iid+"Iid: $iid"} ${title+"Title: $title"} ${state+"State: $state"} ${author+"Author: $author"} ${url+"Url: $url"}
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
)
# EndSection