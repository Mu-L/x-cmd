# shellcheck shell=sh
# shellcheck disable=SC2039,3043,SC2034
# https://docs.gitlab.com/ee/api/group_level_variables.html
___x_cmd_gl_groups_variable(){
    param:subcmd ___x_cmd_gl_groups_variable           \
        ls              "List groups variable"         \
        info            "Show groups variable info"    \
        create          "Create groups variable"       \
        edit            "Update groups variable"       \
        rm              "Remove variable"
    param:subcmd:try
    param:run

    ___x_cmd_gl_groups_variable _param_help_doc

    return 1
}
# Section: variable ls
# https://docs.gitlab.com/ee/api/group_level_variables.html#list-group-variables
___x_cmd_gl_groups_variable_ls(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --groups        "The ID of a group or URL-encoded path of the group owned by the authenticated user"      <>
    --per_page      "Results per page"                                                                        <>=""
    --page          "Page number of the results to fetch."                                                    <>=""
    --json|-j       "output json data"
'
    param:run

    ___X_CMD_UI_STATIC=1 ___gl_ui_mutual '___ui_table_json key=.key value=.value variable_type=.variable_type environment_scope=.environment_scope  -- $@' \
    ___x_cmd_gl_get_multi "/groups/$groups/variables"
}
# EndSection

# Section: info
# https://docs.gitlab.com/ee/api/group_level_variables.html#show-variable-details
___x_cmd_gl_groups_variable_info(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1          "The key of a variable"                                                                     <>
    --groups    "The ID of a group or URL-encoded path of the group owned by the authenticated user"        <>
    --filter    "filter has the same key,Available filters: [environment_scope]. "                          <>:hash=""
    --json|-j   "output json data"
'
    param:run

    local gen_gl_json
    gen_gl_json="$(param:option2json -groups)"
    ___x_cmd_gl_curl get "/groups/$groups/variables/$1" | _____x_cmd_gl_groups_variable_ui_utils Info
}
# EndSection

# Section: create && edit
# https://docs.gitlab.com/ee/api/group_level_variables.html#create-variable
___x_cmd_gl_groups_variable_create(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --groups              "The ID of a group or URL-encoded path of the group owned by the authenticated user"      <>
    --key                 "The key of a variable."                                                                  <>
    --value               "The value of a variable."                                                                <>
    --variable_type       "The value of a variable."                                                                <>="env_var"    = env_var file
    --protected           "Whether the variable is protected."                                                      <>:bool="false"
    --masked              "Whether the variable is masked."                                                         <>:bool="false"
    --environment_scope   "The environment_scope of the variable."                                                  <>="*"
    --json|-j             "output json data"
'
    param:run

    local gen_gl_json
    gen_gl_json="$(param:option2json -groups)"
    ___x_cmd_gl_curl post "/groups/$groups/variables" "gen_gl_json" | _____x_cmd_gl_groups_variable_ui_utils Create
}

# https://docs.gitlab.com/ee/api/group_level_variables.html#update-variable
___x_cmd_gl_groups_variable_edit(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1                    "The key of a variable"                                                                   <>
    --groups              "The ID of a group or URL-encoded path of the group owned by the authenticated user"      <>
    --value               "The value of a variable."                                                                <>
    --variable_type       "The value of a variable."                                                                <>="env_var"    = env_var file
    --protected           "Whether the variable is protected."                                                      <>:bool="false"
    --masked              "Whether the variable is masked."                                                         <>:bool="false"
    --environment_scope   "The environment_scope of the variable."                                                  <>="*"
    --filter              "filter has the same key,Available filters: [environment_scope]. "                        <>:hash=""
    --json|-j             "output json data"
'
    param:run

    local gen_gl_json
    gen_gl_json="$(param:option2json -groups)"
    ___x_cmd_gl_curl put "/groups/$groups/variables/$1" "gen_gl_json" | _____x_cmd_gl_groups_variable_ui_utils Edit
}
# EndSection

# Section: rm
# https://docs.gitlab.com/ee/api/group_level_variables.html#remove-variable
___x_cmd_gl_groups_variable_rm(){
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1          "The key of a variable"                                                                   <>
    --groups    "The ID of a group or URL-encoded path of the group owned by the authenticated user"      <>
    --filter    "filter has the same key,Available filters: [environment_scope]. "                        <>:hash=""

    --yes|-y    "Ignore remove prompt interception"
'
    param:run

    local key_name
    for key_name in "$@"; do
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete variable : $(___x_cmd_ui bold red "$key_name") ?" || continue
        ___x_cmd_gl_curl delete "/groups/$groups/variables/$key_name" | (
            x jo env . error=.
            if  ___x_cmd_gl_http_error; then
                ___x_cmd_ui_tf true "Remove variable $key_name successfully."
            else
                ___x_cmd_ui_tf false "Remove variable $key_name failure"
                return 1
            fi
        )
    done
}
# EndSection

# Section: groups variable utils
_____x_cmd_gl_groups_variable_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gl_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="key=.key value=.value variable_type=.variable_type environment_scope=.environment_scope"
            msg="Get groups variable information successfully"
            error_msg="Failed to get groups variable information"
            ;;
        Create|Edit)
            data="key=.key value=.value variable_type=.variable_type environment_scope=.environment_scope"
            msg="$1 groups variable successfully"
            error_msg="Failed to $1 groups variable"
            ;;
    esac
    x jo env . Key=.key error=. $data
    if [ -n "$Key" ]; then
        ___x_cmd_ui_tf true "$msg" ${Key+"Key: $Key"} ${value+"Value: $value"} ${variable_type+"Variable_type: $variable_type"} \
            ${environment_scope+"Environment_scope: $environment_scope"}
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
)
# EndSection