# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gl_config(){
    param:subcmd ___x_cmd_gl_config                                        \
        which       "Show current config path"                             \
        get         "Print the value of a given configuration key"         \
        set         "Update configuration with a value for the given key"
    param:subcmd:try
    param:run

    ___x_cmd_gl_config _param_help_doc

    return 1
}

___x_cmd_gl_config_which(){
    param:void
    local ___gl_config_path="${___X_CMD_GL_CFG}/___x_cmd_gl_GITLAB_DEFAULT"
    printf "%s\n" "$___gl_config_path"
}

# shellcheck disable=SC2154
___x_cmd_gl_config_get(){
    param:scope     ___x_cmd_gl
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host        "host name"                               <>="gitlab.com"
    #1            "The name of the configuration to get"    <>:ConfigName
'
    param:run

    local ___gl_config_path="${___X_CMD_GL_CFG}/___x_cmd_gl_GITLAB_DEFAULT"

    [ -e  "$___gl_config_path" ] || return 1
    ___x_cmd_git_config_get "$___gl_config_path" "$host" "$1"
}

___x_cmd_gl_config_set(){
    param:scope     ___x_cmd_gl
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host    "host name"                             <>="gitlab.com"
    #1        "Please provide configuration key"      <>:ConfigName
    #2        "Please provide configuration val"      <>
'
    param:run
    local ___gitlab_path="${___X_CMD_GL_CFG}/___x_cmd_gl_GITLAB_DEFAULT"
    [ -e  "$___gitlab_path" ] || mkdir -p "$___X_CMD_GL_CFG"
    ___x_cmd_git_config_set "$___gitlab_path" "$host" "$1" "$2" && return 0
    gl_log error "gl config set Fail"
}
