# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gl_project_hook(){
    param:subcmd ___x_cmd_gl_project_hook          \
        "ls|l"              "list repo webhook"     \
        "info|i"            "get webhook info"      \
        "create|c"          "create webhook"        \
        "edit|ed"           "update webhook"        \
        rm                  "Remove webhook"
    param:subcmd:try
    param:run

    ___x_cmd_gl_project_hook _param_help_doc
    return 1
}

# Section: List
___x_cmd_gl_project_hook_ls() {
    param:scope     ___x_cmd_gl
    param:dsl       <<A
options:
    --project   "The ID or URL-encoded path of the project owned by the authenticated user"     <>
    --per_page  "Results per page"                                                              <>=30
    --page      "Page number of the results to fetch."                                          <>=1
    --json|-j   "output json data"
A
    param:run
    ___x_cmd_gl_param_init_owner_project
    ___X_CMD_UI_STATIC=1 ___gl_ui_mutual '___ui_table_json Id=.id push_events=.push_events url=.url  -- $@' \
        ___x_cmd_gl_get_multi "/projects/${owner_project}/hooks"
}
# EndSection

# Section: info & rm
___x_cmd_gl_project_hook_info() {
    param:scope     ___x_cmd_gl
    param:dsl       <<A
options:
    #1          "The unique identifier of the hook."                                            <>:Number
    --project   "The ID or URL-encoded path of the project owned by the authenticated user"     <>

    --json|-j   "output json data"
A
    param:run
    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl get "/projects/${owner_project}/hooks/$1" | _____x_cmd_gl_hook_ui_utils Info
}

___x_cmd_gl_project_hook_rm() {
    param:scope     ___x_cmd_gl
    param:dsl       <<A
options:
    #1          "The unique identifier of the hook."                                            <>:Number
    --project   "The ID or URL-encoded path of the project owned by the authenticated user"     <>
    --yes|-y    "Ignore remove prompt interception"
A
    param:run
    ___x_cmd_gl_param_init_owner_project
    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to remove the hook $1 in the $owner_project ?" || return
    ___x_cmd_gl_curl delete "/projects/${owner_project}/hooks/$1" | (
        x jo env . error=.
        if ___x_cmd_gl_http_error; then
            ___x_cmd_ui_tf  true "successfully remove project hook"
        else
            ___x_cmd_ui_tf false "delete project hook failure: $1." "ErrorMsg:$error"
            return 1
        fi
    )
}
# EndSection

# Section: add & update
___x_cmd_gl_project_hook_create() {
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    --project                      "The ID or URL-encoded path of the project owned by the authenticated user"      <>
    --url                          "The URL to which the payloads will be delivered."                               <>
    --token                        "Secret token to validate received payloads"                                     <>=""
    --push_events_branch_filter    "Trigger hook on push events for matching branches only."                        <>=""
    --deployment_events            "Trigger hook on deployment events."
    --issues_events                "Trigger hook on issues events."
    --job_events                   "Trigger hook on job events."
    --note_events                  "Trigger hook on note events."
    --push_events                  "Trigger hook on push events."
    --pipeline_events              "Trigger hook on pipeline events."
    --releases_events              "Trigger hook on release events."
    --tag_push_events              "Trigger hook on tag push events."
    --wiki_page_events             "Trigger hook on wiki events."
    --merge_requests_events        "Trigger hook on merge requests events."
    --enable_ssl_verification      "Do SSL verification when triggering the hook."
    --confidential_issues_events   "Trigger hook on confidential issues events. "
    --confidential_note_events     "Trigger hook on confidential note events."

    --json|-j   "output json data"
'
    param:run

    local gen_gl_json
    gen_gl_json="$(param:option2json -project)"

    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl post "/projects/${owner_project}/hooks" "gen_gl_json" | _____x_cmd_gl_hook_ui_utils Creating
}

___x_cmd_gl_project_hook_edit() {
    param:scope     ___x_cmd_gl
    param:dsl       '
options:
    #1                             "The unique identifier of the hook."                                             <>:Number
    --project                      "The ID or URL-encoded path of the project owned by the authenticated user"      <>
    --url                          "The URL to which the payloads will be delivered."                               <>
    --token                        "Secret token to validate received payloads"                                     <>=""
    --push_events_branch_filter    "Trigger hook on push events for matching branches only."                        <>=""
    --deployment_events            "Trigger hook on deployment events."
    --issues_events                "Trigger hook on issues events."
    --job_events                   "Trigger hook on job events."
    --note_events                  "Trigger hook on note events."
    --push_events                  "Trigger hook on push events."
    --pipeline_events              "Trigger hook on pipeline events."
    --releases_events              "Trigger hook on release events."
    --tag_push_events              "Trigger hook on tag push events."
    --wiki_page_events             "Trigger hook on wiki events."
    --merge_requests_events        "Trigger hook on merge requests events."
    --enable_ssl_verification      "Do SSL verification when triggering the hook."
    --confidential_issues_events   "Trigger hook on confidential issues events. "
    --confidential_note_events     "Trigger hook on confidential note events."

    --json|-j   "output json data"
'
    param:run
    local gen_gl_json
    gen_gl_json="$(param:option2json -project)"

    ___x_cmd_gl_param_init_owner_project
    ___x_cmd_gl_curl put "/projects/${owner_project}/hooks/$1" "gen_gl_json" | _____x_cmd_gl_hook_ui_utils Edit
}

# EndSection

# Section: hook utils
_____x_cmd_gl_hook_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gl_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="url=.url push_events=.push_events"
            msg="get webhook info success."
            error_msg="get webhook info fail."
            ;;
        Creating|Edit)
            msg="$1 project webhook success."
            error_msg="$1 project webhook fail."
            ;;
    esac
    x jo env . Id=.id error=. $data
    if [ -n "$Id" ]; then
        ___x_cmd_ui_tf true "$msg" "Id: $Id" ${name+"Name: $name"} ${push_events+"Push_events: $push_events"} ${url+"Url: $url"}
    else
        ___x_cmd_ui_tf false "$error_msg" "ErrorMsg:$error"
        return 1
    fi
)
# EndSection