
# TODO: Alternative impelementation: using fifoagent to monitor the bgsingleton
# So we don't have to use the file to store the pid

___x_cmd_bgsingleton(){
    local op="$1"; shift
    case "$op" in
        run|ls|pid|clean)
                ___x_cmd_bgsingleton_"$op" "$@"     ;;
        *)      x:error "Unknown subcommand: $1"    ;;
    esac
}

___x_cmd_bgsingleton_ls(){
    [ -d "$___X_CMD_ROOT_DATA/bgsingleton" ] || return 0
    x fsiter "$___X_CMD_ROOT_DATA/bgsingleton"
}

___x_cmd_bgsingleton_pid(){
    local name="$name"
    [ -n "$name" ] || M="Provide bgsingleton name" N=bgsingleton log:ret:64
    [ -f "$___X_CMD_ROOT_DATA/bgsingleton/$name" ] || {
        x:error "bgsingleton inexisted ==> $name"
        return 1
    }
    local pidline=; read -r pidline <"$___X_CMD_ROOT_DATA/bgsingleton/$name"
    [ -n "$pidline" ] || {
        x:error "bgsingleton pidline empty ==> $name"
        return 1
    }
    printf "%s\n" "$pidline"
}

___x_cmd_bgsingleton_clean(){
    local name="$name"
    [ -n "$name" ] || M="Provide bgsingleton name" N=bgsingleton log:ret:64
    # rm -rf "$___X_CMD_ROOT_DATA/bgsingleton/$name"
    # check all of the pids in the dir
    [ -f "$___X_CMD_ROOT_DATA/bgsingleton/$name" ] || return 0
    local pidline=; read -r pidline <"$___X_CMD_ROOT_DATA/bgsingleton/$name"
    kill -s KILL "$pidline" 2>/dev/null
    rm "$___X_CMD_ROOT_DATA/bgsingleton/$name"
}

___x_cmd_bgsingleton_run(){
    local __WAIT=""
    case "$1" in
        --wait)     shift; __WAIT=1      ;;
    esac

    local name="$name"   # Unique name
    local pidline=""

    [ -n "$name" ] || M="Provide bgsingleton name" N=bgsingleton log:ret:64
    [ ! -f "$___X_CMD_ROOT_DATA/bgsingleton/$name" ] || {
        read -r pidline <"$___X_CMD_ROOT_DATA/bgsingleton/$name"
        if [ ! -e "/proc/$pidline" ] && ! kill -0 "$pidline" >/dev/null 2>&1; then
            rm "$___X_CMD_ROOT_DATA/bgsingleton/$name"
        fi

        # [ -z "$__WAIT" ] || while kill -0 "$pidline" 2>/dev/null; do sleep 0.5 || break; done
        [ -z "$__WAIT" ] || while true; do
            [ -f "$___X_CMD_ROOT_DATA/bgsingleton/$name" ] || break
            command sleep 0.2 || return

            kill -0 "$pidline" 2>/dev/null || break
            command sleep 0.3 || return

            [ -f "$___X_CMD_ROOT_DATA/bgsingleton/$name" ] || break
            command sleep 0.5 || return
        done
        return 0
    }

    if [ -z "$__WAIT" ]; then   ___x_cmd_bgsingleton_run___run "$@" &
    else                        ___x_cmd_bgsingleton_run___run "$@"
    fi
}

___x_cmd_bgsingleton_run___run(){
    local name="$name"
    x mkdirp "$___X_CMD_ROOT_DATA/bgsingleton"
    {
        x pidofsubshell
        printf "%s\n" "$name"
        x date str          # Just in case.
    } >"$___X_CMD_ROOT_DATA/bgsingleton/$name"

    trap 'rm -rf $___X_CMD_ROOT_DATA/bgsingleton/'"$name" EXIT  # What if not deleted?
    "$@"
}

# ( name=ttt x bgsingleton run --wait  eval 'sleep 5; echo aa' )


