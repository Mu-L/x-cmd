
___x_cmd_7zd(){
    ( xrc p7zip   &&  p7zd "$@" )
}

___x_cmd_abspath_(){
    local target_path="${1:?Please provide path}"
    case "$target_path" in
        /)          ___X_CMD_ABSPATH_=/ ;;
        .)          ___X_CMD_ABSPATH_="$PWD" ;;
        *)
                    target_path="${target_path%/}"
                    local basename="${target_path##*/}"
                    if [ "$basename" = "$target_path" ]; then
                        ___X_CMD_ABSPATH_="$PWD/$target_path"
                    else
                        ___x_cmd_inner_cd "${target_path%/*}" || return
                        if [ "$basename" != . ]; then
                            ___X_CMD_ABSPATH_="$PWD/$basename"
                        else
                            ___X_CMD_ABSPATH_="$PWD"
                        fi
                        x_="$___X_CMD_ABSPATH_"
                        ___x_cmd_inner_cd "$OLDPWD" || return
                    fi
    esac
    x_="$___X_CMD_ABSPATH_"
}

___x_cmd_abspath(){
    local x_
    ___x_cmd_abspath_ "$@" || return
    printf "%s\n" "$x_"
}

___x_cmd_which_panic(){
    local ___X_CMD_WHICH_ONE_RESULT
    if ! ___x_cmd_which_one "$p"; then
        printf "%s\n" "Fail to find path for $p" >&2
        return 1
    else
        printf "%s\n" "$___X_CMD_WHICH_ONE_RESULT"
    fi
}

___x_cmd_which(){
    local p
    for p in "$@"; do
        ___x_cmd_which_panic || return 1
    done
}

___x_cmd_wsroot_(){
    if [ -z "$1" ]; then
        [ -z "$___X_CMD_WS_CURRENT" ] || {
            ___X_CMD_WSROOT_="$___X_CMD_WS_CURRENT"
            x_="$___X_CMD_WS_CURRENT"
            return 0
        }
        set -- .
    fi

    if [ "$1" = . ]; then
        local cur="$PWD"
    else
        cd "${1}" 2>&1 && local cur="${PWD}" && cd "$OLDPWD" || return
    fi

    while [ ! "$cur" = "" ]; do
        if [ -d "$cur/.x-cmd" ]; then
            ___X_CMD_WSROOT_="$cur"     # Deprecated...
            x_="$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_wsroot(){
    local x_; ___x_cmd_wsroot_ "$@" || return
    printf "%s\n" "$x_"
}


___x_cmd_shell_exec(){
    local shell="${1:?Provide shell}"
    shift
    if [ -x "/bin/$shell" ]; then
        # "/bin/$shell" $X_CMD_SRC_PATH/boot && ___x_cmd_source "$@"
        "/bin/$shell" "$@"
    elif [ -x "/usr/bin/$shell" ]; then
        # "/usr/bin/$shell" $X_CMD_SRC_PATH/boot && ___x_cmd_source "$@"
        "/usr/bin/$shell" "$@"
    else
        command "$shell" "$@"
    fi
}

___x_cmd_validenvname(){
    local IFS=_
    eval "___x_cmd_validenvname$*___= 2>/dev/null" || return 1
}

___x_cmd_shudo(){
    local ___CODE="
. $___X_CMD_ROOT/X;
"
    local IFS=" "
    sudo "${SHELL}" -c "$___CODE
$*"
}

___x_cmd_mcd(){
    local folder="${1:?Provide folder path}"
    if [ ! -d "$folder" ]; then
        if [ -e "$folder" ]; then
            x:error "A Non-Folder file exists with same name ==> $folder"
            return 1
        elif ! command mkdir -p "$folder"; then
            x:error "Fail to create folder ==> $folder"
            return 1
        fi
    fi

    if ! ___x_cmd_inner_cd "$folder"; then
        x:error "Fail to cd to folder ==> $folder"
        return 1
    fi
}

___x_cmd_hascmd(){
    command -v "${1:?Provide command name}" 1>/dev/null 2>/dev/null
}

___x_cmd_sudo(){
    if [ $UID -eq 0 ]; then
        "$@"
    else
        sudo "$@"
    fi
}

___x_cmd_rat_(){
    x_=
    local IFS=
    local arg; for arg in "$@"; do
        [ -f "$arg" ] || {
            x:error "Unexisted file=${arg}"
            return 64
        }

        while IFS= read -r line; do
            x_="$x_
$line"
        done <"$arg"
    done
}

___x_cmd_rat(){
    local IFS=
    local arg; for arg in "$@"; do
        [ -f "$arg" ] || {
            x:error "Unexisted file=${arg}"
            return 64
        }

        while read -r line; do
            printf "%s\n" "$line"
        done <"$arg"
    done
}

___x_cmd_defaultassignvar(){
    local name="$1"; shift
    ___x_cmd_defaultassignvar_ "$name" x "$@"
}

___x_cmd_defaultassignvar_(){
    local ___x_cmd_defaultassignvar_varname=${1}; shift
    local x_
    "$@"
    eval "$___x_cmd_defaultassignvar_varname=\"\$x_\""
}

x_(){
    ___x_cmd_defaultassignvar_ "$@"
}
