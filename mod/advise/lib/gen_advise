# shellcheck shell=sh disable=SC3043,2120,2181,1091,2016,2034
# ___X_CMD_ADVISE_GEN_ADVISE_INDEX_FIELDS='useparam

___X_CMD_ADVISE_ERREXIT="${___X_CMD_UNSEENCHAR_001}${___X_CMD_UNSEENCHAR_002}${___X_CMD_UNSEENCHAR_003}"
# useparam,name,synopsis,desc,exec,tldr,other,setup,tip,demo,subcmd,option,flag,[0-9]+,n

___x_cmd_advise_gen_advise__useparam()(
    local mod_name="${1:?Provide mod name}"
    local mod_path="${2:?Provide mod path}"
    xrc:mod "$mod_name/latest" || return 1
    local main_func; main_func="$___X_CMD_XRC_SET_MAIN"
    if [ -z "$main_func" ]; then
        main_func="___x_cmd_$mod_name"
        command -v "$main_func" >/dev/null || main_func="$mod_name"
    fi
    command -v "$main_func" >/dev/null || {
        advise:error "Not found set main function of $mod_name"
        return 1
    }

    advise:debug "useparam: X_CMD_ADVISE_FUNC_NAME=$main_func $main_func _x_cmd_advise_json"
    X_CMD_ADVISE_FUNC_NAME="$main_func" "$main_func" _x_cmd_advise_json
)

___x_cmd_advise_gen_advise__exec()(
    local mod_path="${1:?Provide mod path}"; shift
    x cd "$mod_path" || return 1
    local cmd; printf "%s\n" "$*" | x jo env .\* cmd=. -- '
    advise:warn "Executing: $cmd"
    ___x_cmd_evex "$cmd" 2>/dev/null || {
        advise:error "Fail to exec: $cmd"
        printf "%s\n" "$___X_CMD_ADVISE_ERREXIT"
        exit 1
    }
'
)

___x_cmd_advise_gen_advise(){
    local mod_name="${1:?Provide mod name}"
    local mod_path="${2:?Provide mod path}"
    local adv_dir="$mod_path/adv"
    local index_yml="$adv_dir/index.yml"

    if [ ! -f "$index_yml" ]; then
        advise:error "Not found $adv_dir/index.yml"
        return 1
    fi

    local resource;     resource="$mod_path/res";       x mkdirp "$resource"
    < "$index_yml" x y2j | {
        local content;      content="$(cat)"
        printf "%s\n" "$content"

        local useparam;     local setup;    local jsonfile
        printf "%s\n" "$content" | { x jo env . "useparam=.<useparam>" "setup=.<setup>"
            [ -z "$setup" ] || ___x_cmd_advise_gen_advise__exec "$mod_path" "$setup" || return 1

            find "$adv_dir" -name '*.json' -maxdepth 1 | while read -r jsonfile; do
                advise:debug "cat $jsonfile"
                cat "$jsonfile"; printf "\n"
            done

            if [ "$useparam" = "true" ]; then
                ___x_cmd_advise_gen_advise__useparam "$mod_name" "$mod_path"
                [ "$?" = 0 ] || printf "%s\n" "$___X_CMD_ADVISE_ERREXIT"
            else printf "%s\n" "{}"    ; fi
        }
    } | command awk \
        -v X_CMD_ADVISE_ERREXIT="$___X_CMD_ADVISE_ERREXIT" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"  \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jiter.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jcp.awk"   \
        -f "$___X_CMD_ROOT_MOD/advise/lib/awk/build_merge.awk" > "$resource/advise.jso"
    local exit_code="$?"

    if [ "$exit_code" -eq 0 ]; then
        advise:info "Success generate $mod_name res/advise.jso"
        return 0
    else
        x rmrf "$resource"
        advise:error "Fail to generate $mod_name res/advise.jso"
        return 1
    fi
}