# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2046

# Section: Help
_____x_cmd_gcode_help__token_setting(){
    printf "\n%s %s \n%s\n" \
        "$(___x_cmd_ui yellow 'Run command to add|repleace token:')" \
        "$(___x_cmd_ui bold cyan "\`x gcode token <token>\`")"   \
        "$(___x_cmd_ui 'https://gitcode.net/-/profile/personal_access_tokens')"
}

_____x_cmd_gcode_help(){
    command -v ___x_cmd_advise_gen_help >/dev/null || xrc:mod advise/lib/gen_help
    ___x_cmd_advise_gen_help "$___X_CMD_ROOT_MOD/gcode/res/advise.jso" "$@"
}

# EndSection

# Section: HTTP header & body & request
___x_cmd_gcode_resp_header(){
   cat "$___X_CMD_GCODE_TMP/.____x_cmd_gcode_curl_header"
}

___x_cmd_gcode_resp_code(){
    ___x_cmd_gcode_resp_header  | awk '$1 ~/HTTP\/1.1$/ {print ($2+0);exit(0)}'
}

___x_cmd_gcode_curl(){
    local op="$1"
    local _curl_url="\"${___X_CMD_GCODE_DOMAIN:-"https://gitcode.net"}/api/v4${2}\""
    local _content_type="\"Content-Type: application/json\""
    local _authorization
    _authorization="\"PRIVATE-TOKEN: $(___x_cmd_gcode_token)\""
    local gcode_header="$___X_CMD_GCODE_TMP/.____x_cmd_gcode_curl_header"
    local ___X_CMD_GCODE_SHOW_HTTP_CODE=1
    shift 2
    local req
    case "$op" in
        get)
            gcode:debug   "x curl -D  $gcode_header   -X GET -s -H  $_content_type  -H  $_authorization  $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gcode_curl___use_query_data "$@"))")  $_curl_url"
            if [ -n "$NO_CACHE" ]; then
                eval       x curl -D "$gcode_header"  -X GET -s -H "$_content_type" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gcode_curl___use_query_data "$@"))") "$_curl_url"
            else
                x ccmd 10s --         eval x curl -D "$gcode_header"  -X GET -s -H "$_content_type" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gcode_curl___use_query_data "$@"))") "$_curl_url"
            fi
            ___x_cmd_gcode_http_error eval x curl -D "$gcode_header"  -X GET -s -H "$_content_type" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gcode_curl___use_query_data "$@"))") "$_curl_url"
            return
            ;;
        upload)
            local __file_path="${1?:"Please provide upload filepath"}"; shift;
            [ -f "$__file_path" ] || {
                gcode:error "Upload Failure: Not found target file. Please check file exist: $__file_path"
                return 1
            }
            gcode:debug "x curl --progress-bar -D  $gcode_header   -X  ${___X_CMD_GCODE_UPLOAD_REQ_METHOD:-"POST"}  -H  $_authorization  --form  file=@${__file_path}    $(x curl gencode "$@")   $_curl_url"
            eval         x curl --progress-bar -D "$gcode_header"  -X "${___X_CMD_GCODE_UPLOAD_REQ_METHOD:-"POST"}" -H "$_authorization" --form  file=@"${__file_path}" "$(x curl gencode "$@")" "$_curl_url"
            ___x_cmd_gcode_http_error; return
        ;;
        post)           req="POST"      ;;
        put)            req="PUT"       ;;
        patch)          req="PATCH"     ;;
        delete)         req="DELETE"    ;;
    esac
    gcode:debug "x curl -D  $gcode_header  -X  $req  -s -H  $_content_type  -H  $_authorization   $(x curl gencode "$@")   $_curl_url"
    eval         x curl -D "$gcode_header" -X "$req" -s -H "$_content_type" -H "$_authorization" "$(x curl gencode "$@")" "$_curl_url"
    ___x_cmd_gcode_http_error
}

___x_cmd_gcode_http_error(){
    local http_resp_code
    http_resp_code=$(___x_cmd_gcode_resp_code)
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 100 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || {
            gcode:debug "---! Cache Clear !---"
            x ccmd invalidate "$@" 1>/dev/null 2>&1
        }
        [ -z "$___X_CMD_GCODE_SHOW_HTTP_CODE" ] || {
            gcode:error "HTTP Code is $http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_GCODE_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

# shellcheck disable=SC2154
___x_cmd_gcode_curl___use_query_data(){
    [ $# -gt 0 ] || return
    local name
    printf "%s " "-G"
    for name in "$@";
    do
        if [ "$name" = "p" ];then  [ -z "$p" ] || printf "%s " "path==$p";
        else                                      printf "%s " "$name==" ;
        fi
    done
}

___x_cmd_gcode____handle_resp(){
    [ -z "$gcode_resp_body" ] || printf "%s" "$gcode_resp_body"
    [ -z "$gcode_resp_err" ]  || printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m%s\033[0m\n" "$gcode_resp_err" >&2
}
# EndSection

# Section: pagination
___gcode_ui_mutual() {
    local tmp="$1"
    shift 1
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 "$@"
    else
        # run ui table
        eval "$tmp"
    fi
    return
}

___x_cmd_gcode_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gcode_curl get "$@" page per_page
        return
    fi

    local page=1
    local per_page=100
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_get_multi___json_prt "$@"
    else
        ___x_cmd_gcode_get_multi___ui_table "$@"
    fi

}

___x_cmd_gcode_get_multi___ui_table(){
    ___x_cmd_gcode_curl get "$@" page per_page
    printf "\n"
    local next_url
    _____x_cmd_gcode_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_gcode_curl get "$next_url"
        printf "\n"
        _____x_cmd_gcode_next_url
    done
}

___x_cmd_gcode_get_multi___json_prt(){
    local tmp
    tmp=$(mktemp)
    ___x_cmd_gcode_curl get "$@" page per_page > "$tmp"
    printf "\n" >> "$tmp"

    local next_url
    _____x_cmd_gcode_next_url
    if [ -z "$next_url" ]; then
        cat "$tmp"
        rm "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_gcode_curl get "$next_url" >> "$tmp"
        printf "\n" >> "$tmp"
        _____x_cmd_gcode_next_url
    done
    < "$tmp" x jo q0 \*.\* . | awk 'BEGIN{ print "["}
        END{ print "]"}
        {
            if ($0 == "") next
            if ((NR != 1) && ( aaa == 0 )) print ","
            if (($0 == "{") || ( $0 == "[")) aaa++
            if (($0 == "}") || ( $0 == "]")) aaa--
            print $0
        }'
    rm "$tmp"
}

_____x_cmd_gcode_next_url(){
    next_url="$(grep "link:" "$___X_CMD_GCODE_TMP/.____x_cmd_gcode_curl_header")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ];then
         next_url="${tmp_url#*'api/v4'*}"
    else
        next_url=""
    fi
}
# EndSection

# Section: Parameter Utilities
alias ___x_cmd_gcode_param_init_owner_project='
    local owner_project=""
    ___x_cmd_gcode_param_normalize_repo  || return
'

# shellcheck disable=SC2154,SC2034
___x_cmd_gcode_param_normalize_repo(){
    local op="$project"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_project="$(printf "%s" "$op")"
        ;;
    "")
        owner_project="$(_____x_cmd_git_repo)"
        ;;
    *)
        ___x_cmd_gcode_current_owner 1>/dev/null
        if [ -z "$___X_CMD_GCODE_DEFAULT_OWNER" ]; then
            gcode:error "No owner provided. Default owner not set."
            gcode:warn "Check your current token setting.$(_____x_cmd_gcode_help__token_setting)"
            return 1
        fi
        owner_project="$(printf "%s" "$___X_CMD_GCODE_DEFAULT_OWNER/$op")"
        ;;
    esac
    owner_project="$(printf "%s" "$owner_project" | sed s:'/':'%2F':g)"
}

_____x_cmd_git_repo(){
    local repo
    repo="$(git config --get remote.origin.url 2>/dev/null)"
    repo="${repo##*".com:"}"
    repo="${repo##*".com/"}"
    repo="${repo%.*}"
    printf "%s" "$repo"
}
# EndSection

# Section: Resolve gitcode member access
_____x_cmd_gcode_member_util(){
    case $access_level in
        owner)
            access_level=50;;
        maintainer)
            access_level=40;;
        developer)
            access_level=30;;
        reporter)
            access_level=20;;
        guest)
            access_level=10;;
    esac
}
# EndSection