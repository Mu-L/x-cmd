# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_gcode_project_release(){
    param:subcmd ___x_cmd_gcode_project_release                 \
        "ls|l"              "List project release"                      \
        "info|i"            "Show detailed information of project"      \
        "create|c"          "Create project release"                    \
        "edit|ed"           "Edit release information"                  \
        rm                  "Remove the project release"                \
        "attachment|asset"  "release attachment management"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_project_release _param_help_doc
    return 1
}

# Section: List
# http://localhost:4000/13.7/ee/api/releases/#list-releases
___x_cmd_gcode_project_release_ls() {
    param:scope     ___x_cmd_gcode
    param:dsl    '
options:
    --project                   "URL-encoded path of the project or project ID"           <>
    --json|-j                   "output json data"
'
    param:run

    ___x_cmd_gcode_param_init_owner_project
    [ -z "$id" ] || owner_project="$id"
    ___X_CMD_UI_STATIC=1 ___gcode_ui_mutual '___ui_table_json Name=.name TagName=.tag_name Commit=.commit.short_id Url=._links.self -- $@' \
        ___x_cmd_gcode_curl get "/projects/${owner_project}/releases" sort order_by page per_page
}
# EndSection

# Section: Info
# http://localhost:4000/13.7/ee/api/releases/#get-a-release-by-a-tag-name
___x_cmd_gcode_project_release_info() {
    param:scope     ___x_cmd_gcode
    param:dsl    '
options:
    #1                           "The Git tag the release is associated with"                                        <>
    --project                    "The ID or URL-encoded path of the project owned by the authenticated user"         <>
    --include_html_description   "If true, a response includes HTML rendered Markdown of the release description."
    --json|-j                    "output json data"
'
    param:run
    ___x_cmd_gcode_param_init_owner_project
    ___x_cmd_gcode_curl get "/projects/${owner_project}/releases/$1" | _____x_cmd_gcode_release_ui_utils Info
}
# EndSection

# Section: Create
# http://localhost:4000/13.7/ee/api/releases/#create-a-release
___x_cmd_gcode_project_release_create() {
    param:scope     ___x_cmd_gcode
    param:dsl    '
options:
    #1                          "The tag where the release is created from"                                       <>
    --project                   "The ID or URL-encoded path of the project owned by the authenticated user"       <>
    --ref                       "It can be a commit SHA, another tag name, or a branch name."                     <>=""
    --name                      "The release name"                                                                <>=""
    --description               "The description of the release. Can use Markdown str."                           <>=""
    --milestones                "The title of each milestone the release is associated with. "                    <>:array=""
    --assets_links              "An assets.links json object of preset assets links.(stdin -)"                    <>=""
    --released_at               "The date when the release is/was ready. Defaults to the current time. "          <>:datetime=""
    --json|-j                   "output json data"
'
    param:run
    [ -n "${1}${ref}" ] || {
        gcode:error "accepts 1 arg(tag name) or --ref <ref_info>. Use --help show help information"
        return 1
    }
    ___x_cmd_gcode_param_init_owner_project
    local tag_name="${1?:"Please provide tag name like v1.0.0"}"
    local milestones
    milestones=$(x jo "[$milestones]")

    [ "$assets_links" != '-' ] || assets_links="$(command cat)"
    local gen_gcode_json
    gen_gcode_json="$(param:option2json +tag_name -project -assets_links ${assets_links+"assets=assets_links"} )"
    gcode:debug "$gen_gcode_json"
    ___x_cmd_gcode_curl post "/projects/${owner_project}/releases" "gen_gcode_json" | _____x_cmd_gcode_release_ui_utils Creating
}
# EndSection

# Section: Edit
# http://localhost:4000/13.7/ee/api/releases/#update-a-release
___x_cmd_gcode_project_release_edit() {
    param:scope  ___x_cmd_gcode
    param:dsl    '
options:
    #1                 "The Git tag the release is associated with"                                      <>
    --project          "The ID or URL-encoded path of the project owned by the authenticated user"       <>
    --name             "The release name."                                                               <>=""
    --description      "The description of the release. You can use Markdown."                           <>=""
    --milestones       "The title of each milestone to associate with the release"                       <>=""
    --released_at      "The date when the release is/was ready."                                         <>:datetime=""

    --json|-j          "output json data"
'
    param:run
    ___x_cmd_gcode_param_init_owner_project
    local gen_gcode_json
    gen_gcode_json="$(param:option2json -project)"
    gcode:debug "$gen_gcode_json"

    ___x_cmd_gcode_curl put "/projects/${owner_project}/releases/${1}" "gen_gcode_json" | _____x_cmd_gcode_release_ui_utils Edit
}
# EndSection

# Section: Remove
# http://localhost:4000/13.7/ee/api/releases/#delete-a-release
# shellcheck disable=2154
___x_cmd_gcode_project_release_rm() {
    param:scope  ___x_cmd_gcode
    param:dsl    '
options:
    #1              "The Git tag the release is associated with"                                        <>
    --project       "The ID or URL-encoded path of the project owned by the authenticated user"         <>
    --yes|-y        "Ignore remove prompt interception"
'
    param:run

    ___x_cmd_gcode_param_init_owner_project

    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to remove release $(___x_cmd_ui bold red "$1") on the $project ?" || return
    ___x_cmd_gcode_curl delete "/projects/${owner_project}/releases/$1"| (
        x jo env . gcode_resp_err=.error gcode_resp_err=.message
        if ___x_cmd_gcode_http_error; then
            ___x_cmd_ui_tf  true "successfully remove project release"
        else
            ___x_cmd_ui_tf false "delete project release failure: $project $1"
            ___x_cmd_gcode____handle_resp
            return 1
        fi
    )
}
# EndSection

# Section: release UI utils
_____x_cmd_gcode_release_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gcode_http_error
        return
    fi
    (
        case "$1" in
            Creating|Edit)
                _msg="$1 project release successfully"
                _error_msg="$1 project release failure"
                ;;
            Info)
                _msg="Successfully get project release info"
                _error_msg="Get project release info failure"
                ;;
        esac
        _data="tag_name=.tag_name commit=.commit.short_id asset_count=.assets.count released_at=.released_at url=._links.self"
        eval x jo env . _name=.name gcode_resp_err=.error gcode_resp_err=.message "$_data"
        if [ -n "$_name" ]; then
            ___x_cmd_ui_tf true "$_msg" ${_name:+"Name: $_name"} ${tag_name:+"Tag_Name: $tag_name"}  ${commit:+"Commit: $commit"} \
                ${asset_count:+"Asset_Count: $asset_count"} ${released_at:+"Released_At: $released_at"} ${url:+"URL: $url"}
        else
            ___x_cmd_ui_tf false "$_error_msg"
            ___x_cmd_gcode____handle_resp
            return 1
        fi
    )
}
# EndSection
