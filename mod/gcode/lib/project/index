# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2154

xrc:mod:lib gcode \
    project/util \
    project/member \
    project/tag \
    project/pr \
    project/webhook \
    project/branch/index \
    project/branch/protection \
    project/release/index \
    project/release/attachment \
    project/apply/index

___x_cmd_gcode_project(){
    param:scope         ___x_cmd_gcode
    param:subcmd ___x_cmd_gcode_project                         \
        "ls|l"          "List project of owner"                 \
        "info|i"        "Show detailed information of project"  \
        "create|c"      "Create project"                        \
        "edit|ed"       "Setup project configure"               \
        rm              "Remove project"                        \
        issue           "List project issue"                    \
        "cl|clone"      "Clone project from gitcode"            \
        apply           "Manage project by declare configure"   \
        pr              "project pr management"                 \
        tag             "project tag management"                \
        branch          "project branch management"             \
        member          "project member management"             \
        release         "project release management"            \
        webhook         "project webhook management"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_project _param_help_doc
    return 1
}

# Section: Create
# http://localhost:4000/13.7/ee/api/projects.html#create-project
___x_cmd_gcode_project_create(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
option:
    #1                                                  "project names"                                                                     <>:RepoName
    -p|--path                                           "project path"                                                                      <>=""
    --group_id                                          "Namespace id (group_id) for the new project"                                                     <>=""
    --visibility                                        "See project visibility level."                                                     <>="private" = private internal public
    --default_branch                                    "The default branch name."                                                          <>=""
    --tag_list                                          "The list of tags for a project"                                                    <>=""
    --description                                       "Short project description."                                                        <>=""

    --topics                                            "The list of topics for a project"                                                  <>:Array=""
    --avatar                                            "Image file for avatar of the project."                                             <>=""
    --import_url                                        "URL to import repository from."                                                    <>=""
    --merge_method                                      "Set the merge method used."                                                        <>=""
    --build_timeout                                     "The maximum amount of time, in seconds, that a job can run."                       <>:Number=""
    --squash_option                                     "One of never, always, default_on, or default_off."                                 <>=""
    --template_name                                     "When used without use_custom_template, name of a built-in project template."       <>=""
    --ci_config_path                                    "The path to CI configuration file."                                                <>=""
    --wiki_access_level                                 "wiki access level"                                                                 <>=""
    --build_git_strategy                                "The Git strategy. Defaults to fetch."                                              <>=""
    --repository_storage                                "Which storage shard the repository is on."                                         <>=""
    --pages_access_level                                "Pages access level"                                                                <>=""
    --issues_access_level                               "Issues access level"                                                               <>=""
    --builds_access_level                               "One of disabled, private, or enabled."                                             <>=""
    --template_project_id                               "When used with use_custom_template, project ID of a custom project template."      <>:Number=""
    --forking_access_level                              "One of disabled, private, or enabled."                                             <>=""
    --snippets_access_level                             "Snippets access level"                                                             <>=""
    --analytics_access_level                            "One of disabled, private or enabled"                                               <>=""
    --approvals_before_merge                            "How many approvers should approve merge requests by default"                       <>:Number=""
    --operations_access_level                           "Operations access level"                                                           <>=""
    --repository_access_level                           "Repository access level"                                                           <>=""
    --requirements_access_level                         "Requirements access level"                                                         <>=""
    --auto_devops_deploy_strategy                       "Auto Deploy strategy"                                                              <>=""
    --merge_requests_access_level                       "Merge requests access level"                                                       <>=""
    --container_registry_access_level                   "Set visibility of container registry, for this project"                            <>=""
    --group_with_project_templates_id                   "specifies ID of group from which all the custom project templates are sourced."    <>:Number=""
    --security_and_compliance_access_level              "Security and compliance access level."                                             <>=""
    --container_expiration_policy_attributes            "Update the image cleanup policy for this project. "                                <>=""
    --external_authorization_classification_label       "The classification label for the project."                                         <>=""
    --mirror                                            "Enables pull mirroring in a project."
    --lfs_enabled                                       "Enable LFS."
    --jobs_enabled                                      "Enable jobs for this project."
    --wiki_enabled                                      "Enable wiki for this project. Use wiki_access_level instead."
    --public_builds                                     "If true, jobs can be viewed by non-project members."
    --issues_enabled                                    "Enable issues for this project."
    --emails_disabled                                   "Disable email notifications."
    --snippets_enabled                                  "Enable snippets for this project. "
    --packages_enabled                                  "Enable or disable packages repository feature."
    --auto_devops_enabled                               "Enable Auto DevOps for this project."
    --use_custom_template                               "Use either custom instance or group project template."
    --merge_trains_enabled                              "Enable or disable merge trains."
    --mirror_trigger_builds                             "Pull mirroring triggers builds."
    --initialize_with_readme                            "Whether to create a Git repository with just a README.md file"
    --shared_runners_enabled                            "Enable shared runners for this project."
    --request_access_enabled                            "Allow users to request member access."
    --merge_requests_enabled                            "Enable merge requests for this project."
    --merge_pipelines_enabled                           "Enable or disable merge pipelines."
    --container_registry_enabled                        "Enable container registry for this project."
    --autoclose_referenced_issues                       "Set whether auto-closing referenced issues on default branch."
    --auto_cancel_pending_pipelines                     "Auto-cancel pending pipelines."
    --allow_merge_on_skipped_pipeline                   "Set whether or not merge requests can be merged with skipped jobs."
    --remove_source_branch_after_merge                  "Enable Delete source branch option by default for all new merge requests."
    --resolve_outdated_diff_discussions                 "Automatically resolve merge request diffs discussions on lines changed with a push."
    --printing_merge_request_link_enabled               "Show link to create/view merge request when pushing from the command line."
    --only_allow_merge_if_pipeline_succeeds             "Set whether merge requests can only be merged with successful pipelines."
    --only_allow_merge_if_all_discussions_are_resolved  "Set whether merge requests can only be merged when all the discussions are resolved."
    --json|-j                                           "output json data"
'
    param:run

    local name="${___X_CMD_TX}"
    local gen_gcode_json
    gen_gcode_json="$(param:option2json +name -p ${p+"path=p"} -group_id ${group_id+"namespace_id=group_id"})"
    gcode:debug "$gen_gcode_json"

    for name in "$@"; do
        gcode:debug "___x_cmd_gcode_repo_create_data:$(x tmpl "$gen_gcode_json"  "${name##%/}")"
        x tmpl "$gen_gcode_json"  "${name##%/}" | \
            ___x_cmd_gcode_curl post "/projects" "@-" | \
            ___x_cmd_gcode_project_ui_utils Creating
    done
}
# EndSection

# Section: List
# http://localhost:4000/13.7/ee/api/projects.html#list-user-projects
___x_cmd_gcode_project_ls(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    --page          "page"                  <>:Per_page="1"
    --per_page      "per_page"              <>:Numbers="30"
    --visibility    "visibility"            <>=""       = private public internal
    --json|-j       "output json data"
'
    param:run
    if ___x_cmd_gcode_current_owner 1>/dev/null; then
        ___X_CMD_UI_STATIC=1 ___gcode_ui_mutual '___ui_table_json Project_Id=.id Owner_Porject=.path_with_namespace Visibility=.visibility Default_Branch=.default_branch Description=.description  -- $@' \
            ___x_cmd_gcode_get_multi "/users/$___X_CMD_GCODE_DEFAULT_OWNER/projects" visibility page per_page
    else
        return 1
    fi
}
# EndSection

# Section: Edit
# http://localhost:4000/13.7/ee/api/projects.html#edit-project
___x_cmd_gcode_project_edit(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                  "URL-encoded path of the project or project id (use --id flag)"     <>:RepoName
    --visibility        "See project visibility level."                                     <>="" = private internal public
    --tag_list          "The list of tags for a project"                                    <>=""
    --description       "Short project description."                                        <>=""
    --default_branch    "The default branch name."                                          <>=""
    --name              "The name of the project"                                           <>=""
    -p|--path           "Custom repository name for the project."                           <>=""

    --json|-j           "output json data"
    --id                "Using Porject id"

    --avatar                                        "Image file for avatar of the project."                                                                                                         <>:mixed=""
    --import_url                                    "URL the repository was imported from."                                                                                                         <>=""
    --build_timeout                                 "The maximum amount of time, in seconds, that a job can run."                                                                                   <>:Number=""
    --ci_config_path                                "The path to CI configuration file."                                                                                                            <>=""
    --issues_enabled                                "Set the merge method used."                                                                                                                    <>=""
    --mirror_user_id                                "User responsible for all the activity surrounding a pull mirror event. (administrators only)"                                                  <>:Number=""
    --build_git_strategy                            "The Git strategy. Defaults to fetch"                                                                                                           <>=""
    --repository_storage                            "Which storage shard the repository is on. (administrators only)"                                                                               <>=""
    --ci_default_git_depth                          "Default number of revisions for shallow cloning."                                                                                              <>:Number=""
    --approvals_before_merge                        "How many approvers should approve merge request by default. "                                                                                  <>:Number=""
    --merge_requests_template                       "Default description for merge requests. Description is parsed with gcode Flavored Markdown."                                                   <>=""
    --wiki_access_level                             "One of disabled, private, or enabled"                                                                                                          <>=""
    --pages_access_level                            "One of disabled, private, enabled, or public."                                                                                                 <>=""
    --issues_access_level                           "One of disabled, private, or enabled"                                                                                                          <>=""
    --builds_access_level                           "One of disabled, private, or enabled."                                                                                                         <>=""
    --forking_access_level                          "The classification label for the project."                                                                                                     <>=""
    --snippets_access_level                         "One of disabled, private, or enabled"                                                                                                          <>=""
    --analytics_access_level                        "One of disabled, private or enabled"                                                                                                           <>=""
    --operations_access_level                       "One of disabled, private, or enabled"                                                                                                          <>=""
    --repository_access_level                       "One of disabled, private, or enabled"                                                                                                          <>=""
    --requirements_access_level                     "One of disabled, private, enabled or public"                                                                                                   <>=""
    --merge_requests_access_level                   "One of disabled, private, or enabled"                                                                                                          <>=""
    --container_registry_access_level               "Set visibility of container registry, for this project, to one of , or . disabled private enabled"                                             <>=""
    --security_and_compliance_access_level          "Security and compliance access level. One of disabled, private, or enabled"                                                                    <>=""
    --auto_devops_deploy_strategy                   "Auto Deploy strategy (continuous, manual, or timed_incremental) "                                                                              <>=""
    --auto_cancel_pending_pipelines                 "Auto-cancel pending pipelines. This isnt a boolean, but enabled/disabled. "                                                                    <>=""
    --container_expiration_policy_attributes        "Update the image cleanup policy for this project. Accepts: (string), (integer), (string), (string), (string), (string), (boolean). "           <>:hash=""
    --external_authorization_classification_label   "The classification label for the project."                                                                                                     <>=""
    --squash_commit_template                        "Template used to create squash commit message in merge requests"                                                                               <>=""
    --squash_option                                 "One of never, always, default_on, or default_off"                                                                                              <>=""
    --suggestion_commit_message                     "The commit message used to apply merge request suggestions."                                                                                   <>=""
    --topics                                        "The list of topics for the project. This replaces any existing topics that are already added to the project. (Introduced in gcode 14.0.)."     <>:array=""
    --wiki_enabled                                  "(Deprecated) Enable wiki for this project. Use instead. wiki_access_level"
    --mirror_trigger_builds                         "mirror_trigger_builds"
    --allow_merge_on_skipped_pipeline               "Set whether or not merge requests can be merged with skipped jobs."
    --autoclose_referenced_issues                   "Set whether auto-closing referenced issues on default branch "
    --auto_devops_enabled                           "Enable Auto DevOps for this project. "
    --ci_forward_deployment_enabled                 "When a new deployment job starts, skip older deployment jobs that are still pending."
    --ci_separated_caches                           "Set whether or not caches should be separated by branch protection status."
    --container_registry_enabled                    "(Deprecated) Enable container registry for this project. Use instead."
    --emails_disabled                               "Disable email notifications.."
    --merge_pipelines_enabled                       "Enable or disable merge pipelines.."
    --merge_requests_enabled                        "(Deprecated) Enable merge requests for this project. Use instead."
    --merge_trains_enabled                          "Enable or disable merge trains.."
    --mirror_overwrites_diverged_branches           "Pull mirror overwrites diverged branches."
    --mirror                                        "Enables pull mirroring in a project"
    --mr_default_target_self                        "For forked projects, target merge requests to this project. If false, the target will be the upstream project"
    --only_allow_merge_if_pipeline_succeeds         "Set whether merge requests can only be merged with successful jobs."
    --only_mirror_protected_branches                "Only mirror protected branches."
    --packages_enabled                              "Enable or disable packages repository feature."
    --printing_merge_request_link_enabled           "Show link to create/view merge request when pushing from the command line."
    --public_builds                                 "If true, jobs can be viewed by non-project members"
    --remove_source_branch_after_merge              "Enable option by default for all new merge requests.Delete source branch "
    --request_access_enabled                        "Allow users to request member access."
    --resolve_outdated_diff_discussions             "Automatically resolve merge request diffs discussions on lines changed with a push."
    --restrict_user_defined_variables               "Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline."
    --service_desk_enabled                          "Enable or disable Service Desk feature."
    --shared_runners_enabled                        "Enable shared runners for this project."
    --snippets_enabled                              "(Deprecated) Enable snippets for this project. Use instead. snippets_access_level"
'
    param:run
    local project="$1"
    ___x_cmd_gcode_param_init_owner_project
    [ -z "$id" ] || owner_project="$project"
    local gen_gcode_json
    gen_gcode_json="$(param:option2json)"
    gcode:debug "$gen_gcode_json"
    ___x_cmd_gcode_curl put "/projects/$owner_project" "gen_gcode_json" | ___x_cmd_gcode_project_ui_utils Update
}
# EndSection

# Section: Info
# http://localhost:4000/13.7/ee/api/projects.html#get-single-project
___x_cmd_gcode_project_info(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                          "URL-encoded path of the project or project id (use --id flag)"    <>
    --license                   "Include project license data."
    --statistics                "Include project statistics. Only available to Reporter or higher level role members."
    --with_custom_attributes    "Include custom attributes in response. (administrator only)"
    --id                        "Using Porject id"
    --json|-j                   "output json data"
'
    param:run

    local project="$1"
    ___x_cmd_gcode_param_init_owner_project
    [ -z "$id" ] || owner_project="$project"
    ___x_cmd_gcode_curl get "/projects/$owner_project"| ___x_cmd_gcode_project_ui_utils Info
}
# EndSection

# Section: Remove
# http://localhost:4000/13.7/ee/api/projects.html#remove-project
___x_cmd_gcode_project_rm(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1          "URL-encoded path of the project or project id (use --id flag)"   <>
    --id        "Using Porject id"
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    local project
    for project in "$@"; do
        ___x_cmd_gcode_param_init_owner_project
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete project : $(___x_cmd_ui bold red "$project") ?" || continue
        [ -z "$id" ] || owner_project="$project"
        ___x_cmd_gcode_curl delete "/projects/${owner_project}" | (
                x jo env . gcode_resp_err=.error gcode_resp_err=.message
                if ___x_cmd_gcode_http_error; then
                    ___x_cmd_ui_tf  true "Deleting porject ${project} successfully."
                else
                    ___x_cmd_ui_tf false "Deleting porject failure: ${project}. Probably because it desn't exists."
                    ___x_cmd_gcode____handle_resp
                    return 1
                fi
            )
    done
}
# EndSection

# Section: project utils
___x_cmd_gcode_project_ui_utils(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gcode_http_error
        return
    fi
    (
        case "$1" in
            Info)
                _data="name=.name default_branch=.default_branch url=.web_url"
                _msg="Get project information successfully."
                _error_msg="Failed to get project information."
                ;;
            Update)
                _data="url=.web_url name=.name default_branch=.default_branch project_owner=.owner.username visibility=.visibility"
                _msg="Update $project successfully."
                _error_msg="Update failure: $project."
                ;;
            Creating)
                _data="url=.web_url project_owner=.owner.username visibility=.visibility"
                _msg="Creating project $name successfully."
                _error_msg="Creating project failure: $name."
                ;;
        esac
        eval x jo env . id=.id gcode_resp_err=.error gcode_resp_err=.message "$_data"
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true "$_msg" "project_id: $id" ${project_owner:+"project_owner: $project_owner"}  \
                ${name:+"name: $name"} ${default_branch:+"default_branch: $default_branch"} ${url:+"url: $url"} \
                ${visibility:+"visibility: $visibility"}
        else
            ___x_cmd_ui_tf false "$_error_msg"
            ___x_cmd_gcode____handle_resp
            return 1
        fi
    )
}
# EndSection