# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 6: Repo Path & Clone
############################
___x_cmd_gcode_project_url_http(){
    param:scope  ___x_cmd_gcode
    param:dsl    '
options:
    #n  "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "https://gitcode.net/%s.git\n" "$(___x_cmd_gcode_param_normalize_repo "$repo")"
    done
}

___x_cmd_gcode_project_url(){
    param:void
    ___x_cmd_gcode_repo_url_ssh ${1:+"$@"}
}

___x_cmd_gcode_project_url_ssh(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #n "Provide repo list"
'
    param:run

    local repo
    for repo in "$@"; do
        printf "git@gitcode.net:%s.git\n" "$(___x_cmd_gcode_param_normalize_project "$repo")"
    done
}

# TODO: Not available gitcode return Not Found Project
___x_cmd_gcode_project_fork(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    --repo              "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --organization=""   "Provide organization"                                               <>:OrgSpaceName
'
    param:run

    local owner_project
    owner_project="$(___x_cmd_gcode_param_normalize_project "$repo")"

    ___x_cmd_gcode_http post "https://gitcode.net/api/repos/${owner_project}/forks" -- organization
}

___x_cmd_gcode_project_cl()(
    param:void
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then _____x_cmd_gcode_help project clone; return 0;
    fi
    # shellcheck disable=SC2317
    ___x_cmd_git_clone___defaultowner(){
        local ___X_CMD_GCODE_DEFAULT_OWNER
        ___x_cmd_gcode_current_owner 1>/dev/null
        [ -n "${___X_CMD_GCODE_DEFAULT_OWNER}" ] || {
            gcode:warn "There is no default owner found."
            gcode:error "Please specify an owner for project: ${repo}"
            return 1
        }
        printf "%s\n" "$___X_CMD_GCODE_DEFAULT_OWNER"
    }

    ___X_CMD_GIT_CLONE_HOST=gitcode.net x git clone "$@"
)