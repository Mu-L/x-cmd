# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# http://localhost:4000/13.7/ee/api/groups.html
___x_cmd_gcode_group(){
    param:scope  ___x_cmd_gcode
    param:subcmd ___x_cmd_gcode_group                        \
        "ls|l"                  "List all groups"            \
        "info|i"                "Show group information"     \
        "create|c"              "Create group"               \
        "edit|ed"               "Update group"               \
        rm                      "Remove group"               \
        member                  "group member manage"        \
        repo                    "group repo mange"        \
        issue                   "group issue list"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_group _param_help_doc
    return 1
}

# Section: List
# shellcheck disable=SC2154
# http://localhost:4000/13.7/ee/api/groups.html#list-groups
___x_cmd_gcode_group_ls(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
type:
    order_by = name path id  similarity
    Sort = asc desc
options:
    --sort                      "Order groups in asc or desc order."                                <>:Sort="asc"
    --search                    "Return the list of authorized groups matching the search criteria" <>=""
    --order_by                  "Order groups by"                                                   <>=""
    --skip_groups               "Skip the group IDs passed"                                         <>=""
    --min_access_level          "Limit to groups where current user has at least this access level" <>:Number=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics"
    --all_available             "Show all the groups you have access to"
    --top_level_only            "Limit to top level groups, excluding all subgroups"
    --with_custom_attributes    "Include custom attributes in response"

    --per_page                  "Results per page (max 100)"                                        <>=""
    --page                      "Page number of the results to fetch."                              <>=""
    --json|-j                   "output json data"
'
    param:run
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_get_multi "/groups" sort search order_by skip_groups min_access_level owned statistics all_available top_level_only with_custom_attributes
    else
        ___x_cmd_gcode_get_multi "/groups" sort search order_by skip_groups min_access_level owned statistics all_available top_level_only with_custom_attributes | \
            x jo 2c             .id .name .path .visibility .web_url | \
            x csv header --add   ID  Name  Path  Visibility  URL     | \
            x csv static_tab
    fi
}
# EndSection

# Section: Info
# shellcheck disable=SC2154
# http://localhost:4000/13.7/ee/api/groups.html#details-of-a-group
___x_cmd_gcode_group_info(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                          "<group_path> or .id=<group_id>"                                       <>
    --with_projects             "Include details from projects that belong to the specified group"
    --with_custom_attributes    "Include custom attributes in response"

    --json|-j                   "output json data"
'
    param:run
    [ -n "$1" ] || M='accepts arg (<group_path> or .id=<group_id>), received empty' arg:ret:64
    local _avt_group="$1"
    ___x_cmd_gcode_avatar____transform_avt_group || return
    ___x_cmd_gcode_curl get "/groups/$_avt_group" | _____x_cmd_group_ui_utils Info
}
# EndSection

# Section: Create
# shellcheck disable=SC2181,SC2034
# TODO:On gcode SaaS, you must use the gcode UI to create groups without a parent group. You cannot use the API to do this.???
# http://localhost:4000/13.7/ee/api/groups.html#new-group
___x_cmd_gcode_group_create(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                          "The name of the group."        <>
    -p|--path                   "The path of the group."        <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner
    --json|-j                   "Output json data"
'
    param:run
    [ -n "$1" ] || M='accepts 1 arg(group name), received empty' arg:ret:64
    local name="$1"
    [ -n "$p" ] || p="$name"
    local gen_gcode_json
    gen_gcode_json="$(param:option2json -p +name path=p)"
    gcode:debug "$gen_gcode_json"

    ___x_cmd_gcode_curl post "/groups" "gen_gcode_json" | _____x_cmd_group_ui_utils Creating
}
# EndSection

# Section: Edit
# http://localhost:4000/13.7/ee/api/groups.html#update-group
___x_cmd_gcode_group_edit(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                          "<group_path> or .id=<group_id>"   <>
    -p|--path                   "groups path"                   <>=""
    --name                      "The name of the group"         <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner

    --json|-j                   "output json data"
'
    param:run
    [ -n "$1" ] || M='accepts arg (<group_path> or .id=<group_id>), received empty' arg:ret:64
    local _avt_group="$1"
    ___x_cmd_gcode_avatar____transform_avt_group || return

    local gen_gcode_json
    gen_gcode_json="$(param:option2json -p ${p:+"path=p"})"
    gcode:debug "$gen_gcode_json"

    ___x_cmd_gcode_curl put "/groups/$_avt_group" "gen_gcode_json" | _____x_cmd_group_ui_utils Update
}
# EndSection

# Section: Remove
# http://localhost:4000/13.7/ee/api/groups.html#remove-group
# shellcheck disable=2154
___x_cmd_gcode_group_rm(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                       "<group_path> or .id=<group_id>"                                      <>
    --yes|-y                 "Ignore remove prompt interception"
'
    param:run
    [ "$#" -ne 0 ] || M='accepts arg(s) (<group_path> or .id=<group_id>), received empty' arg:ret:64

    local _avt_group=""
    for _avt_group in "$@"; do
        ___x_cmd_gcode_avatar____transform_avt_group || return
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure groups to remove: $(___x_cmd_ui bold red "$_avt_group") ?" || continue
        ___x_cmd_gcode_curl del "/groups/$_avt_group" | (
            x jo env . gcode_resp_err=.error gcode_resp_msg=.message
            if ___x_cmd_gcode_http_error; then
                ___x_cmd_ui_tf  true "[Success]: Remove groups $_avt_group"
            else
                ___x_cmd_ui_tf false "Remove groups $_avt_group failure:"
                ___x_cmd_gcode____handle_resp
                return 1
            fi
        )
    done
}
# EndSection

# http://localhost:4000/13.7/ee/api/groups.html
___x_cmd_gcode_subgroup(){
    param:scope  ___x_cmd_gcode
    param:subcmd ___x_cmd_gcode_subgroup                   \
        "ls|l"                      "List all subgroups"       \
        "create|c"                  "Create subgroups"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_subgroup _param_help_doc
    return 1
}

# Section: List
# http://localhost:4000/13.7/ee/api/groups.html#list-a-groups-subgroups
___x_cmd_gcode_subgroup_ls(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
type:
    order_by = name path id
    sort = asc desc
options:
    #1                          "<group_id> or /<group_path>"                                               <>
    --sort                      "Order groups in asc or desc order."                                        <>=""
    --search                    "Return the list of authorized groups matching the search criteria"         <>=""
    --order_by                  "Order groups by name, path or id. Default is name"                         <>=""
    --skip_groups               "Skip the group IDs passed"                                                 <>=""
    --min_access_level          "Limit to groups where current user has at least this access level"         <>:Number=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics (admins only)"
    --all_available             "Show all the groups you have access to"
    --with_custom_attributes    "Include custom attributes in response (admins only)"

    --json|-j                   "output json data"
'
    param:run
    [ -n "$1" ] || M='accepts arg (<group_id> or /<group_path>), received empty' arg:ret:64
    local _avt_group="$1"
    ___x_cmd_gcode_avatar____transform_avt_group || return

    if [ -n "$json" ]  || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_curl get "/groups/$_avt_group/subgroups" sort search order_by skip_groups min_access_level owned statistics all_available with_custom_attributes
    else
        ___x_cmd_gcode_curl get "/groups/$_avt_group/subgroups" sort search order_by skip_groups min_access_level owned statistics all_available with_custom_attributes | \
            x jo 2c             .id .name .path .visibility .web_url | \
            x csv header --add   ID  Name  Path  Visibility  URL     | \
            x csv static_tab
    fi
}
# EndSection

# Section: Create
# shellcheck disable=SC2181
# TODO:On gcode SaaS, you must use the gcode UI to create groups without a parent group. You cannot use the API to do this.???
# http://localhost:4000/13.7/ee/api/groups.html#new-subgroup
___x_cmd_gcode_subgroup_create(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1                  "subgroup name"                                 <>
    --parent            "<parent_group_path> or .id=<parent_group_id>"  <>
    -p|--path           "subgroup path(default subgroup name)"          <>=""
    --json|-j           "output json data"
'
    param:run
    [ -n "$1" ] || M='accepts arg (new subgroup name), received empty' arg:ret:64
    local name="$1"

    [ -n "$parent" ] || M='accepts option (--parent <parent_group_path> or .id=<parent_group_id>), received empty' arg:ret:64
    local _avt_group="$parent"
    ___x_cmd_gcode_avatar____transform_avt_group || return

    [ -n "$p" ] || p="$name"

    gen_gcode_json="$(param:option2json -p -parent +name  parent_id=_avt_group  path=p)"
    gcode:debug "$gen_gcode_json"
    ___x_cmd_gcode_curl post "/groups" "gen_gcode_json"| _____x_cmd_group_ui_utils Creating
}
# EndSection

___x_cmd_gcode_group_repo(){
    param:subcmd ___x_cmd_gcode_group_repo    \
        ls          "list group repo"
        # NOTE: project create --namespace_id <group_id>
        # create      "groups project create"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_group_repo _param_help_doc
    return 1
}

# Section: List
# http://localhost:4000/13.7/ee/api/groups.html#list-a-groups-projects
___x_cmd_gcode_group_repo_ls(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
    #1              "<group_path> or .id=<group_id>"    <>:Address
    --page          "page"                              <>:NatureNumber=1
    --per_page      "per_page"                          <>:NatureNumber=20
    --visibility    "Limit by visibility"               <>=""
    --archived      "Limit by archived status"

    --json|-j       "output json data"
'
    param:run
    [ -n "$1" ] || M='accepts arg (<group_path> or .id=<group_id>), received empty' arg:ret:64
    local _avt_group="$1"
    ___x_cmd_gcode_avatar____transform_avt_group || return

    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_get_multi "/groups/$_avt_group/projects"  visibility archived
    else
        ___x_cmd_gcode_get_multi "/groups/$_avt_group/projects"  visibility archived | \
            x jo 2c            .id .name .path .visibility .web_url | \
            x csv header --add  ID  Name  Path  Visibility  URL     | \
            x csv static_tab
    fi
}
# EndSection

# Section: Create

# EndSection

# Section: Group Issue List
# http://localhost:4000/13.7/ee/api/issues.html#list-group-issues
___x_cmd_gcode_group_issue(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
options:
   --group|-g                              "<group_path> or .id=<group_id>"                                                                                             <>
   --assignee_id                           "Return issues assigned to the given user id."                                                                               <>:Number=""
   --assignee_username                     "Return issues assigned to the given username."                                                                              <>:array=""
   --author_id                             "Return issues created by the given user id."                                                                                <>:Number=""
   --author_username                       "Return issues created by the given username."                                                                               <>=""
   --confidential                          "Filter confidential or public issues."
   --created_after                         "Return issues created on or after the given time. Expected in ISO 8601 format"                                              <>:datetime=""
   --created_before                        "Return issues created on or before the given time."                                                                         <>:datetime=""
   --due_date                              "Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"     <>=""
   --epic_id                               "Return issues associated with the given epic ID."                                                                           <>:Number=""
   --iids                                  "Return only the issues having the given iid"                                                                                <>:array=""
   --issue_type                            "Filter to a given type of issue. One of issue, incident, or test_case."                                                     <>=""
   --iteration_id                          "Return issues assigned to the given iteration ID."                                                                          <>:Number=""
   --iteration_title                       "Return issues assigned to the iteration with the given title."                                                              <>=""
   --labels                                "Comma-separated list of label names, issues must have all labels to be returned. "                                          <>=""
   --milestone                             "The milestone title. "                                                                                                      <>=""
   --my_reaction_emoji                     "Return issues reacted by the authenticated user by the given emoji. "                                                       <>=""
   --non_archived                          "Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
   --not                                   "Return issues that do not match the parameters supplied. "                                                                  <>:hash=""
   --order_by                              "Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"         <>=""
   --scope                                 "Return issues for the given scope:"                                                                                         <>=""
   --sort                                  "Return issues sorted in asc or desc order. Default is desc"                                                                 <>=""
   --search                                "Search group issues against their title and description"                                                                    <>=""
   --state                                 "Return all issues or just those that are opened or closed"                                                                  <>=""
   --updated_after                         "Return issues updated on or after the given time."                                                                          <>:datetime=""
   --updated_before                        "Return issues updated on or before the given time."                                                                         <>:datetime=""
   --weight                                "Return issues with the specified weight."                                                                                   <>:Number=""
   --with_labels_details                   "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."

    --json|-j                              "output json data"
'
    param:run
    [ -n "$group" ] || M='accepts option --group (<group_path> or .id=<group_id>), received empty' arg:ret:64
    local _avt_group="$group"
    ___x_cmd_gcode_avatar____transform_avt_group || return

    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_get_multi "/groups/$_avt_group/issues" sort order_by search state author_username milestone_id
    else
        ___x_cmd_gcode_get_multi "/groups/$_avt_group/issues" sort order_by search state author_username milestone_id |\
            x jo 2c           .id .iid          .project_id .title .state .web_url | \
            x csv header --add ID  ISSUE_Nubmer Repo_ID      Title  State  URL     | \
            x csv static_tab
    fi
}
# EndSection

# Section: UI Util
_____x_cmd_group_ui_utils(){
    if  [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_gcode_http_error
        return
    fi
    (
        local _id=""
        case "$1" in
            Info)
                x jo env . _id=.id gcode_resp_err=.error gcode_resp_msg=.message \
                    name=.name dir=.path visibility=.visibility url=.web_url
                _inf_msg="Getting groups info successfully"
                _err_msg="Getting groups info failure"
                ;;
            Creating|Update)
                x jo env . _id=.id gcode_resp_err=.error gcode_resp_msg=.message \
                    name=.name dir=.path url=.web_url visibility=.visibility
                _inf_msg="$1 group $name successfully"
                _err_msg="$1 group $name failure"
                ;;
        esac
        if [ -n "$_id" ]; then
            ___x_cmd_ui_tf  true "${_inf_msg}:" "Id: $_id" ${name:+"Name: $name"} ${dir:+"Path: $dir"} ${url:+"Url: $url"} ${visibility:+"Visibility: $visibility"}
        else
            ___x_cmd_ui_tf false "${_err_msg}:"
            ___x_cmd_gcode____handle_resp
            return 1
        fi
    )
}
# EndSection
