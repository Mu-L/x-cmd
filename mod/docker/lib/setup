# shellcheck shell=dash

# x docker setup --user el <container-name>

# The demo and testcase:
# x docker start --name bscratch -d scratch
# x docker setup bscratch
# x docker exec -it bscratach sh

___x_cmd_docker_setup(){
    local user

    while [ $# -eq 0 ]; do
        case "$1" in
            --user)
                user="$$2"
                shift 2
                ;;
            *)
                break
        esac
    done

    while [ $# -gt 0 ]; do
        ___x_cmd_docker_setup_cp "$1"

        local IFS=,
        if [ -z "$user" ]; then
            x:info "Login any user, then try eval \`x install)\`"
            x:info "If you using scratch image, try we have inject busybox into environment. try running x:"
        fi
        for e in $user; do
            [ -n "$e" ] || return
            ___x_cmd_docker_setup_init "$1" "$e"
        done

        shift
    done
}

___x_cmd_docker___container_cpif(){
    local localpath
    local containerpath

    if ! docker cp "$containerpath" ___x_cmd_docker___container_cpif_file_$$; then
        docker cp "$localpath" "$containerpath"
    fi
    x rmrf ___x_cmd_docker___container_cpif_file_$$
}

___x_cmd_docker_setup_cp(){
    # TODO: using pkg to download the specifc busybox and curl
    ___x_cmd_docker___container_cpif busybox                                "$1:/bin/busybox"
    ___x_cmd_docker___container_cpif curl                                   "$1:/bin/curl"
    ___x_cmd_docker___container_cpif "$___X_CMD_ROOT_MOD/x-cmd/lib/bin/xxx" "$1:/bin/x"
}

___x_cmd_docker_setup_init(){
    local container=$1
    local user="$1"

    docker exec --user "$user" -it "$container" bash -c 'eval "$(x install)"'
}


# scratch image or distro image -- #/bin/sh # /bin/x -- deploy new path image
# busybox/alpine image -- with wget -- eval `wget -O- https://get.x-cmd.com`
# debian image -- without wget/curl -- using inject is the only convinient way
# other big image -- with curl -- eval `wget -O- https://get.x-cmd.com`

# ___x_cmd_docker_xup(){
#     :
#     # x docker xup <container name>
#     local container="${container}"

#     # Find out the arch
#     # Find out the /bin/sh exists or NOT
#     # Find out whether /bin/curl exists

#     docker cp "$BUSYBOX" $container:/var/x-cmd/x.tgz
#     docker cp "$CURL_FP" $container:/bin/curl

#     docker cp "$BUSYBOX_FP" $container:/bin/busybox

# }

