# shellcheck shell=sh
# shellcheck disable=SC2039,3043,SC2120

# Section: Help
_____x_cmd_gt_help__token_setting(){
    printf "\n%s %s \n%s\n" \
        "$(___x_cmd_ui yellow 'Run command to add|repleace token:')" \
        "$(___x_cmd_ui bold cyan "\`x gt token <token>\`")"   \
        "$(___x_cmd_ui 'https://gitee.com/profile/personal_access_tokens')" >&2
}

_____x_cmd_gt_help(){
    command -v ___x_cmd_advise_gen_help >/dev/null || xrc:mod advise/lib/gen_help
    ___x_cmd_advise_gen_help "$___X_CMD_ROOT_MOD/gt/res/advise.jso" "$@"
}


# EndSection

# Section: HTTP header & body & request

___x_cmd_gt_resp_header(){
    if [ -n "$1" ]; then
        awk -v key="$1" '{
            if ($1 ~ key ":$") {
                print $2;
                exit(0)
            }
        }' <"$___X_CMD_GT_TMP/.____x_cmd_gt_curl_header"
    else
        cat "$___X_CMD_GT_TMP/.____x_cmd_gt_curl_header"
    fi
}

___x_cmd_gt_resp_code(){
    ___x_cmd_gt_resp_header | \
        awk '{
            if ($1 ~ "HTTP/(1.*|2)$" && $3 != "Connection" && $4 != "established") {
                print $2;
                exit(0)
            }
        }'
}

# shellcheck disable=SC2046
___x_cmd_gt_curl(){
    local op="$1"
    local _api_url="$2"
    shift 2
    local ___X_CMD_API_GT_HEADER="-s -H \"Content-Type:application/json;charset=UTF-8\" -D \"$___X_CMD_GT_TMP/.____x_cmd_gt_curl_header\""

    local _curl_host_tmp=""
    local ___X_CMD_API_GT_TOKEN=""
    ___x_cmd_gt_config___var  ___X_CMD_API_GT_TOKEN=token _curl_host_tmp=host 2>/dev/null
    local ___X_CMD_API_GT_HOST="${___X_CMD_API_GT_HOST:-"$_curl_host_tmp"}"

    local ___X_CMD_GT_SHOW_HTTP_CODE=1
    case "$op" in
        get)
            if [ -n "$NO_CACHE" ]; then
                ___x_cmd_api_gt get "$_api_url" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gt_curl___use_query_data "$@"))")
            else
                x ccmd 10s --        eval "___X_CMD_API_GT_HOST=$___X_CMD_API_GT_HOST ___X_CMD_API_GT_TOKEN=$___X_CMD_API_GT_TOKEN ___x_cmd_api_gt get $_api_url $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gt_curl___use_query_data "$@"))")"
            fi
            ___x_cmd_gt_http_error   eval "___X_CMD_API_GT_HOST=$___X_CMD_API_GT_HOST ___X_CMD_API_GT_TOKEN=$___X_CMD_API_GT_TOKEN ___x_cmd_api_gt get $_api_url $(eval "printf '%s ' $(x curl gencode $(___x_cmd_gt_curl___use_query_data "$@"))")"
            ;;
        post|put|patch|del)
            ___x_cmd_api_gt "$op" "$_api_url" "$(x curl gencode "$@")"
            ___x_cmd_gt_http_error
        ;;
    esac
}

# shellcheck disable=SC2154
___x_cmd_gt_curl___use_query_data(){
    [ $# -gt 0 ] || return
    local name=""
    printf "%s " "-G"
    for name in "$@";
    do
        if [ "$name" = "p" ];then  [ -z "$p" ] || printf "%s " "path==$p";
        else                                      printf "%s " "$name==" ;
        fi
    done
}

___x_cmd_gt_http_error(){
    local _http_resp_code=""
    _http_resp_code="$(___x_cmd_gt_resp_code)"
    if [ -n "$_http_resp_code" ] && [ "$_http_resp_code" -ge 200 ] && [ "$_http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || {
            gt:debug "Cache Clear"
            x ccmd invalidate "$@" 1>/dev/null 2>&1
        }
        [ -z "$___X_CMD_GT_SHOW_HTTP_CODE" ] || {
            gt:error "HTTP Code is $_http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_GT_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

___x_cmd_gt____printf_error(){
    if ! ___x_cmd_is_interative_tty || [ ! -t 2 ] || [ -n "$NO_COLOR" ]; then
        printf "  - ErrorMsg: %s\n" "$1" >&2
    else
        printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m%s\033[0m\n" "$1" >&2
    fi
}
___x_cmd_gt____handle_resp(){
    [ -z "$gt_resp_body" ] || printf "%s" "$gt_resp_body"
    [ -z "$gt_resp_err" ]  || ___x_cmd_gt____printf_error "$gt_resp_err"
}

# EndSection

# Section: Resolve multiple page

___gt_ui_mutual(){
    local _tmp="$1"; shift 1;

    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 "$@"
    else
        # run ui table
        eval "$_tmp"
    fi

    local ___gt_exit_code="$?"
    [ "$___gt_exit_code" -eq 0 ] || {
        ___x_cmd_ui_tf false "${___gt_error_msg:-"Couldn't find any data"}:" >&2
        return "$___gt_exit_code"
    }
}


___x_cmd_gt_get_multi() {
    # gt:info "Getting data..."
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gt_curl get "$@" page per_page
        return
    fi
    local page=1
    local per_page=100
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gt_get_multi___json_prt "$@"
    else
        ___x_cmd_gt_get_multi___ui_table "$@"
    fi
    ___x_cmd_gt_http_error
}

___x_cmd_gt_get_multi___ui_table(){
    ___x_cmd_gt_curl get "$@" page per_page
    printf "\n"
    local next_url=""
    _____x_cmd_gt_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_gt_curl get "$@" page per_page
        printf "\n"
        _____x_cmd_gt_next_url
    done
}

___x_cmd_gt_get_multi___json_prt(){
    local tmp=""
    tmp=$(mktemp)
    ___x_cmd_gt_curl get "$@" page per_page >> "$tmp"
    printf "\n" >> "$tmp"

    local next_url=""
    _____x_cmd_gt_next_url
    if [ -z "$next_url" ] && [ -n "$tmp" ];then
        cat "$tmp"
        rm "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_gt_curl get "$@" page per_page >> "$tmp"
        printf "\n" >> "$tmp"
        _____x_cmd_gt_next_url
    done
    < "$tmp" x jo q0 \*.\* . | awk 'BEGIN{ print "["}
        END{ print "]"}
        {
            if ($0 == "") next
            if ((NR != 1) && ( aaa == 0 )) print ","
            if (($0 == "{") || ( $0 == "[")) aaa++
            if (($0 == "}") || ( $0 == "]")) aaa--
            print $0
        }'
    rm "$tmp"
}

_____x_cmd_gt_next_url(){
    next_url="$(___x_cmd_gt_resp_header)"
    next_url="${next_url#*"rel='prev', <"}"
    local tmp_url="${next_url%%">; rel='next'"*}"
    local tmp_page="$page"
    if [ "$next_url" != "$tmp_url" ];then
        page="${next_url#*'&page='}"
        page="${page%%'&'*}"
        # prevent cache latest page data case loop
        [ "$page" != "$tmp_page" ] || {
            next_url=""
            page=""
        }
        # TODO: !!!!! [gitee ERROR] !!!! gt next page response header `link` is error. need resolve byself
        # next_url="${tmp_url#*'.com/api'*}"
        # next_url="$(printf "%s" "$next_url" | sed s/updated_at/updated/g | sed s/created_at/created/g)"
    else
        next_url=""
        page=""
    fi
}

# EndSection

# Section: Default param util

alias ___x_cmd_gt_param_init_owner_repo='
    local owner_repo=""
    ___x_cmd_gt_param_normalize_repo  || return
'

# shellcheck disable=SC2154,SC2034
___x_cmd_gt_param_normalize_repo(){
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$op"
        ;;
    "")
        if [ -n "$___X_CMD_GT_CURRENT_repo" ]; then
            if [ "${___X_CMD_GT_CURRENT_repo##*/}" != "${___X_CMD_GT_CURRENT_repo}" ];then
                owner_repo="$___X_CMD_GT_CURRENT_repo"
            elif [ -n "$___X_CMD_GT_CURRENT_owner" ]; then
                owner_repo="${___X_CMD_GT_CURRENT_owner}/${___X_CMD_GT_CURRENT_repo}"
            else
                if ! owner_repo="$(___x_cmd_gt_config_get owner)/${___X_CMD_GT_CURRENT_repo}"; then
                    gt:error "No owner provided. Default owner not set."
                    gt:warn -h "$(x str ml wrap "$(_____x_cmd_gt_help__token_setting)" '    ')" -m "Can retry setup token to update owner.${___X_CMD_UNSEENCHAR_NEWLINE}Or check your current token setting."
                    return 1
                fi
            fi
        else
            owner_repo="$(_____x_cmd_git_repo)"
        fi
        ;;
    *)
        if [ -z "$___X_CMD_GT_CURRENT_owner" ]; then
            local ___X_CMD_GT_CURRENT_owner
            if ! ___X_CMD_GT_CURRENT_owner="$(___x_cmd_gt_config_get owner)"; then
                gt:error "No owner provided. Default owner not set."
                gt:warn -h "$(x str ml wrap "$(_____x_cmd_gt_help__token_setting)" '    ')" -m "Can retry setup token to update owner.${___X_CMD_UNSEENCHAR_NEWLINE}Or check your current token setting."
                return 1
            fi
        fi
        owner_repo="${___X_CMD_GT_CURRENT_owner}/${op}"
        ;;
    esac
}

# EndSection