
___x_cmd_assert___main_is(){
    case "$1" in
        is-int)                shift;___x_cmd_assert_int "$@" ;;
        is-float)              shift;___x_cmd_assert_float "$@" ;;
        is-postive)            shift;___x_cmd_assert_positive "$@" ;;

        is-eq)                 shift;___x_cmd_assert_eq "$@" ;;

        is-set)                shift;___x_cmd_assert_varset "$@" ;;

        is-file)               shift;___x_cmd_assert_file "$@" ;;
        is-folder)             shift;___x_cmd_assert_folder "$@" ;;
        is-file-*)             local op="$1"; shift; ___x_cmd_assert_file_"${op#is-file-}" "$@" ;;
    esac
}

# Section: int float positive negative
___x_cmd_assert_float(){
    local fail; local e; for e in "$@"; do
        ___x_cmd_is___float_one_noredirect "$e" || { fail=1; break; }
    done 2>/dev/null
    
    [ -z "$fail" ] || M="Expect $e to be a float"   assert:return 1
}

___x_cmd_assert_int(){
    local fail; local e; for e in "$@"; do
        [ "$e" -eq "$e" ] || { fail=1; break; }     
    done 2>/dev/null

    [ -z "$fail" ] || M="Expect $e to be a int"     assert:return 1
}

___x_cmd_assert_positive(){
    local fail; local e; for e in "$@"; do
        [ "$e" -ge 0 ] ||  { fail=1; break; } 
    done 2>/dev/null

    [ -z "$fail" ] || M="Expect $e to be a positive integer" assert:return 1
}
# EndSection

___x_cmd_assert_eq(){
    local real="$1"; shift
    local i=1; local e; for e in "$@"; do
        i="$((i+1))"
        [ "$real" = "$e" ] || M="Failed. Expect \$$i='$e' equals to '$real'" assert:return 1
    done
    return 0
}

___x_cmd_assert_varset(){
    local e; for e in "$@"; do
        case "$e" in
            ^*)     eval "[ -z \"\${${e#^}+1}\" ]"  || M="Variable ${e#^} is set" assert:return 1 ;;
            *)      eval "[ -n \"\${$e+1}\" ]"      || M="Variable ${e} is unset" assert:return 1 ;;
        esac
    done
}

