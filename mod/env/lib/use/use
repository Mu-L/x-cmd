# shellcheck shell=dash

# use = add migrate + link + check boot + use record
___x_cmd_env_use(){
    local X_help_cmd='x help -m env use';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"

    x:trace env/use
    local name=
    local version=

    local i=;
    for i in "$@"; do
        ___x_cmd_pkg___pasre_pkg_version_set "$i" || return
        ___x_cmd_env_use___handle || return
    done
}

___x_cmd_env_use___handle(){
    if ___x_cmd_is_interactive; then    ___x_cmd_env_use___handle___interative
    else                                ___x_cmd_env_use___handle___noninterative
    fi
}

___x_cmd_env_use___handle___interative(){
    local x_=; ___x_cmd_env_try_version_  --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name"  || return
    if [ -n "$x_" ]; then       # already has try version
        ! x ui yesno "Whether to untry [pkg=$name] [version=$x_], because it may affect this shell env" || \
            x env untry "${name}=${x_}" || return
    fi

    x_=; ___x_cmd_env_use_version_  --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name"  || return
    if [ -n "$x_" ]; then       # already has use version
        if [ "$x_" = "$version" ]; then    env:info "Already used [pkg=$name] [version=$x_] in this shell env";       return 0;   fi

        local id=;
        x ui select id  "Before using new version, here are the following options for you:" \
                        "x env unuse ${name}=${x_}, the other process executed won't be affected, but other shell env will be activated"  \
                        "x env try ${name}=${version}, only activated in this shell environment"    || return
        case "$id" in
            1)  x env unuse "${name}=${x_}"  || return ;;
            2)  x env try "${name}=${version}";   return ;;    # use try instead of use for current package
            *)  env:error "Unexpected [retval=$id]"; return 1 ;;
        esac
    fi

    ___x_cmd_pkg_sphere_use run     --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version"
}

___x_cmd_env_use___handle___noninterative(){
    local x_=; ___x_cmd_env_try_version_  --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name"  || return
    if [ -n "$x_" ]; then       # already has try version
        env:warn \
            --hint "Before using new version. You must untry the original one cautiously because it will affect this shell env" \
            --cmd "x env untry ${name}=${x_}" \
            "Abort because [pkg=$name] [version=$x_] is in try and also it is not in interactive mode"
        return 1
    fi

    x_=; ___x_cmd_env_use_version_  --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name"         || return
    if [ -n "$x_" ]; then       # already has use version
        if [ "$x_" != "$version" ]; then    env:info "Already used [pkg=$name] [version=$x_] in this shell env";      return 0;   fi

        env:warn \
            --cmd1  "x env try ${name}=${version}"  --hint1 "You could just trying this version in current shell env without affecting the other shell environment." \
            --cmd2  "x env unuse ${name}=${x_}"     --hint2 "Before using new version. You must unuse the original one cautiously because it will affect other shell env" \
            "Abort because [pkg=$name] [version=$x_] is in use and also it is not in interactive mode"
        return 1
    fi

    ___x_cmd_pkg_sphere_use run     --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version"
}

