# shellcheck shell=dash

# try = add migrate + path + check boot + save env
___x_cmd_env_try(){
    local X_help_cmd='x help -m env try';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"
    # case "$1" in
    #     */*)
    #         ___x_cmd_env_appoint_candidate "$@"
    #         return
    #         ;;
    #     "") return 1 ;;
    # esac

    x:trace env/try
    local _X_ENV_SPHERE_NAME=
    local _X_ENV_SPHERE_ROOT=
    local _X_ENV_OSARCH=
    local _X_ENV_PKG_NAME=
    local _X_ENV_PKG_VERSION=

    local i=;
    for i in "$@"; do
        _X_ENV_PKG_NAME=
        _X_ENV_PKG_VERSION=
        ___x_cmd_env___pasre_pkg_version_set "$i"
        if [ -z "$_X_ENV_PKG_VERSION" ]; then
            env:warn "Not found $_X_ENV_PKG_NAME version"
            return 1
        fi

        _X_ENV_SPHERE_NAME="$sphere_name" \
        _X_ENV_SPHERE_ROOT="$___X_CMD_PKG_ROOT_SPHERE" \
        _X_ENV_OSARCH="$osarch" \
        _X_ENV_PKG_NAME="$_X_ENV_PKG_NAME" \
        _X_ENV_PKG_VERSION="$_X_ENV_PKG_VERSION" \
        ___x_cmd_env_try___handle || return
    done
}

___x_cmd_env_try___handle(){
    local x_=;
    ___x_cmd_env_try_version_   --sphere "$_X_ENV_SPHERE_NAME" --sphereroot "$_X_ENV_SPHERE_ROOT" --osarch "$_X_ENV_OSARCH" "$_X_ENV_PKG_NAME"  || return
    if [ -n "$x_" ]; then       # already has try version
        if [ "$x_" = "$_X_ENV_PKG_VERSION" ]; then    env:info "Already tried [pkg=$_X_ENV_PKG_NAME] [version=$x_] in this shell env";       return 0;   fi

        env:warn "Before trying new version, untry ${_X_ENV_PKG_NAME}=${x_}"
        x env untry "${_X_ENV_PKG_NAME}=${x_}" || return
    fi

    ___x_cmd_pkg_sphere_try run  --sphere "$_X_ENV_SPHERE_NAME" --sphereroot "$_X_ENV_SPHERE_ROOT" --osarch "$_X_ENV_OSARCH" "$_X_ENV_PKG_NAME" "$_X_ENV_PKG_VERSION"
}
