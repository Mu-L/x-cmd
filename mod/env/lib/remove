# shellcheck    shell=dash
___x_cmd_env_remove(){
    local X_help_cmd='x help -m env remove';   help:arg-null:parse

    # env:info "remove package"
    x:trace env/remove
    ___x_cmd_pkg_osarch_
    local ___X_CMD_ENV___PARSE_PKG
    local ___X_CMD_ENV___PARSE_VERSION
    local i; local sphere_name=
    for i in "$@"; do
        ___x_cmd_env___pasre_pkg_version_unset "$i"
        # TODO: found try var
        [ -n "$___X_CMD_ENV___PARSE_VERSION" ] || {
            env:warn "Please provide a package version, \`x env remove ${___X_CMD_ENV___PARSE_PKG}=<version>\`"
            return 64
        }
        ___x_cmd_env_unset "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION"
        ___x_cmd_pkg_remove "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION"
    done

    ___x_cmd_pkg_gc
}

___x_cmd_env_unset(){
    # local X_help_cmd='x help -m env untry';   help:arg-null:parse
    sphere:parse:option
    local name="$1";        [ -n "$name" ] || N=pkg M="Provide a package name" log:ret:1
    local version="$2";     [ -n "$version" ] || N=pkg M="Not found $name version" log:ret:1

    ___x_cmd_pkg_osarch_
    env:info "Unset $name $version"

    ___x_cmd_pkg___attr "$name" "$version" "$___X_CMD_PKG_OSARCH" "sphere_name" || return
    sphere_name="${sphere_name:-"X"}"

    ___x_cmd_pkg_rmpath "$name" "$version" "$___X_CMD_PKG_OSARCH" "$sphere_name" || return
    ___x_cmd_pkg_unlink "$name" "$version" "$___X_CMD_PKG_OSARCH" "$sphere_name" || return
    ___x_cmd_env_unboot "${name}=${version}" || return
    ___x_cmd_pkg_safelist rm "${name}" "${version}" "$___X_CMD_PKG_OSARCH" "$sphere_name" || return
    ___x_cmd_pkg_config rm "$sphere_name" "${name}" "${version}"
}
