# shellcheck shell=dash

# Section: try
# try = add migrate + path + check boot + save env
___x_cmd_env_try(){
    local X_help_cmd='x help -m env try';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"
    # case "$1" in
    #     */*)
    #         ___x_cmd_env_appoint_candidate "$@"
    #         return
    #         ;;
    #     "") return 1 ;;
    # esac

    x:trace env/try
    local ___X_CMD_ENV___PARSE_PKG
    local ___X_CMD_ENV___PARSE_VERSION

    local i; local x_=
    for i in "$@"; do
        ___x_cmd_env___pasre_pkg_version_set "$i"
        if [ -z "$___X_CMD_ENV___PARSE_VERSION" ]; then
            env:warn "Not found $___X_CMD_ENV___PARSE_PKG version"
            return 1
        fi

        x_=; ___x_cmd_env_current_version_ "$___X_CMD_ENV___PARSE_PKG" "$sphere_name"
        [ -z "$x_" ] || {
            env:warn "Using $___X_CMD_ENV___PARSE_PKG version $x_, need to cancel it in advance"
            return 1
        }

        ___x_cmd_pkg_sphere_try run  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" || return

    done

    env:info "Successfully try $* in the current environment."
}
# EndSection

# Section: untry
___x_cmd_env_untry(){
    local X_help_cmd='x help -m env untry';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"

    x:trace env/untry
    local i; local name=; local version=; local x_=;
    for i in "$@"; do
        case "$i" in
            *=*)    name="${i%%=*}"; version="${i#*=}"      ;;
            *)      x_=; ___x_cmd_env_try_version_ "$i"
                    name="$i"; version="$x_"                ;;
        esac
        [ -n "$version" ] || {
            env:warn "Not try $name in current session"
            return 0
        }
        env:info "Untry $name $version"

        ___x_cmd_pkg_sphere_try cancel  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name" "$version" || return
    done

    env:info "Success to untry $* in this session"
}

# EndSection

___x_cmd_env_try_version_(){
    ___x_cmd_pkg_sphere_try get_version_ "$@"
}
