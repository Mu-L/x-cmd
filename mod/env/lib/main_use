# shellcheck shell=dash

# Section: use
# use = add migrate + link + check boot + use record
___x_cmd_env_use(){
    local X_help_cmd='x help -m env use';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"
    # case "$1" in
    #     */*)
    #         ___x_cmd_env_appoint_candidate "USE" "$@"
    #         return
    #         ;;
    #     "") return 1 ;;
    # esac
    x:trace env/use
    local ___X_CMD_ENV___PARSE_PKG=
    local ___X_CMD_ENV___PARSE_VERSION=

    local i; local x_=
    for i in "$@"; do
        ___X_CMD_ENV___PARSE_VERSION=
        ___x_cmd_env___pasre_pkg_version_set "$i"
        if [ -z "$___X_CMD_ENV___PARSE_VERSION" ]; then
            env:warn "Not found $___X_CMD_ENV___PARSE_PKG version"
            return 1
        fi

        ___x_cmd_env_use___handle \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" || return
    done
}

___x_cmd_env_use___handle(){
    pkg:sphere:parse:args
    local x_=""

    if ___x_cmd_is_interactive; then
        x_=; ___x_cmd_env_try_version_  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name"  || return
        [ -z "$x_" ] || [ "$x_" = "$version" ] || {
            x ui yesno "Whether to untry [pkg=$name] [version=$x_]?" || return
            x env untry "${name}=${x_}" || return
        }

        x_=; ___x_cmd_env_use_version_  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name"  || return
        [ -z "$x_" ] || [ "$x_" = "$version" ] || {
            local id=; x ui select id "Here the choices for you:" \
                "x env unuse ${name}=${x_}, then x env use, notice, the other process executed won't be affected. But other shell env will be activated"  \
                "x env try ${name}=${version}, only activated in this shell environment" || return

            case "$id" in
                1) x env unuse  "${name}=${x_}"         ;;
                2) x env try    "${name}=${version}"; return ;;
                *) return 1 ;;
            esac
        }
    else
        x_=; ___x_cmd_env_try_version_  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name"  || return
        [ -z "$x_" ] || {
            env:warn \
                --hint "Before using new version. You must untry the original one cautiously because it will affect this shell env" \
                --cmd "x env untry ${name}=${x_}" \
                "Abort because [pkg=$name] [version=$x_] is in try and also it is not in interactive mode"
            return 1
        }

        x_=; ___x_cmd_env_use_version_  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name"  || return
        [ -z "$x_" ] || {
            env:warn \
                --hint1 "You could just trying this version in current shell env without affecting the other shell environment." \
                --cmd1  "x env try ${name}=${version}" \
                --hint2 "Before using new version. You must unuse the original one cautiously because it will affect other shell env" \
                --cmd2  "x env unuse ${name}=${x_}" \
                "Abort because [pkg=$name] [version=$x_] is in use and also it is not in interactive mode"
            return 1
        }
    fi

    ___x_cmd_pkg_sphere_use run  \
        --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
        --osarch "$osarch" "$name" "$version" || return

    env:info "Successfully use [pkg=$name] [version=$version] in the current environment"
}

# EndSection

# Section: unuse
___x_cmd_env_unuse(){
    local X_help_cmd='x help -m env unuse';   help:arg-null:parse
    pkg:sphere:parse:option
    sphere_name="${sphere_name:-X}"

    x:trace env/unuse
    local i; local name=; local version=; local x_=;
    for i in "$@"; do
        case "$i" in
            *=*)    name="${i%%=*}"; version="${i#*=}"      ;;
            *)      x_=; ___x_cmd_env_use_version_ "$i"
                    name="$i"; version="$x_"                ;;
        esac
        [ -n "$version" ] || {
            env:warn "Not use $name in current session"
            return 0
        }
        env:info "Unusing $name $version"

        ___x_cmd_pkg_sphere_use cancel  \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
            --osarch "$osarch" "$name" "$version" || return
    done

    env:info "Success to unuse $* in this session"
}
# EndSection

___x_cmd_env_use_version_(){
    ___x_cmd_pkg_sphere_use get_version_ "$@"
}

