# shellcheck shell=dash

# Section: use
# use = download + populate + link + linkenv + boot + save config
___x_cmd_env_use(){
    local X_help_cmd='x help -m env use';   help:arg-null:parse
    sphere:parse:option
    case "$1" in
        */*)
            ___x_cmd_env_appoint_candidate "USE" "$@"
            return
            ;;
    esac
    x:trace env/use
    local ___X_CMD_ENV___PARSE_PKG
    local ___X_CMD_ENV___PARSE_VERSION

    ___x_cmd_pkg_osarch_
    local i; local x_=
    for i in "$@"; do
        ___x_cmd_env___pasre_pkg_version_set "$i"
        if [ -z "$___X_CMD_ENV___PARSE_VERSION" ]; then
            env:warn "Not found $___X_CMD_ENV___PARSE_PKG version"
            return 1
        fi

        ___x_cmd_pkg___attr "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" "$___X_CMD_PKG_OSARCH" "sphere_name" || return
        sphere_name="${sphere_name:-"X"}"

        x_=; ___x_cmd_env_current_version_ "$___X_CMD_ENV___PARSE_PKG" "$sphere_name"
        [ -z "$x_" ] || {
            env:warn "Using $___X_CMD_ENV___PARSE_PKG $x_"
            return 1
        }

        env:debug "Step 1/3, Installing $___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION"
        ___x_cmd_pkg_migrate --safelist "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" "$___X_CMD_PKG_OSARCH" "$sphere_name" || {
            env:error "Cannot install package - '$___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION'"
            return 1
        }

        env:debug "Step 2/3, Linking $___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION"
        if ! ___x_cmd_pkg link "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" "$___X_CMD_PKG_OSARCH" "$sphere_name"; then
            env:error "Cannot link $___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION"
            return 1
        fi

        env:debug "Step 3/3, Recording $___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION"
        ___x_cmd_pkg_config add "$sphere_name" "${___X_CMD_ENV___PARSE_PKG}" "${___X_CMD_ENV___PARSE_VERSION}" || return
    done

    env:info "Successfully use $* in the current environment."
}
# EndSection

# Section: unuse
___x_cmd_env_unuse(){
    local X_help_cmd='x help -m env unuse';   help:arg-null:parse
    sphere:parse:option

    x:trace env/unuse
    ___x_cmd_pkg_osarch_
    local ___X_CMD_ENV___PARSE_PKG
    local ___X_CMD_ENV___PARSE_VERSION
    local i;
    for i in "$@"; do
        ___x_cmd_env___pasre_pkg_version_unset "$i"
        [ -n "$___X_CMD_ENV___PARSE_VERSION" ] || return 0
        env:info "Unuse $___X_CMD_ENV___PARSE_PKG $___X_CMD_ENV___PARSE_VERSION"

        ___x_cmd_pkg___attr         "$___X_CMD_ENV___PARSE_PKG" "$___X_CMD_ENV___PARSE_VERSION" "$___X_CMD_PKG_OSARCH" "sphere_name"                                || return
        sphere_name="${sphere_name:-"X"}"

        ___x_cmd_pkg_unlink                             "${___X_CMD_ENV___PARSE_PKG}" "$___X_CMD_ENV___PARSE_VERSION"       "$___X_CMD_PKG_OSARCH" "$sphere_name"   || return
        ___x_cmd_env_unboot                             "${___X_CMD_ENV___PARSE_PKG}=${___X_CMD_ENV___PARSE_VERSION}"
        ___x_cmd_pkg_safelist   rm                      "${___X_CMD_ENV___PARSE_PKG}" "${___X_CMD_ENV___PARSE_VERSION}"     "$___X_CMD_PKG_OSARCH" "$sphere_name"   || return
        ___x_cmd_pkg_config     rm      "$sphere_name"  "${___X_CMD_ENV___PARSE_PKG}" "${___X_CMD_ENV___PARSE_VERSION}"
    done

    # ___x_cmd_pkg_gc
    env:info "Success to unuse $* in this session"
}
# EndSection

___x_cmd_env_use_version_(){
    x_="$(___x_cmd_env_get_use_version "$@" 2>/dev/null)"
}
