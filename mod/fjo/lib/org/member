# shellcheck shell=bash disable=SC2034,SC2154
# shellcheck disable=SC2039,3043
___x_cmd_fjo_org_member(){
    param:subcmd ___x_cmd_fjo_org_member                    \
        ls                  "Interactive UI show org of user"   \
        ll                  "List membership"                   \
        rm                  "Remove membership"
    param:subcmd:try
    param:run

    # "info|i"            "get org membership user info"      #TODO: not found this API
    # add                 "add org membership"                #TODO: not found this API
    # "edit|ed"           "update org membership"             #TODO: not found this API

    ___x_cmd_fjo_org_member _param_help_doc
    return 1
}

# Section: List
# https://gitea.com/api/swagger#/organization/orgListMembers
___x_cmd_fjo_org_member_ls() {
    if ___x_cmd_gx_has_format_args "$@"; then
        ___x_cmd_fjo_org_member_ll "$@"
        return
    fi

    param:scope     ___x_cmd_fjo
    param:dsl       '
options:
    --org           "org space address"                         <>:Address
    --limit         "Results per page"                          <>:Numbers="30"
    --page          "Page number of the results to fetch."      <>:Numbers="1"
    --json|-j       "output json data"
'
    param:run

   if ___x_cmd_gx_is_interactive_env; then
        local ___X_CMD_TUI_TABLE_FINAL_COMMAND
        local ___X_CMD_TUI_TABLE_CUR_LINE
        local ___X_CMD_TUI_TABLE_CUR_ITEM

        ___x_cmd_fjo_tui_app --limit "$limit" --org "$org" --page "$page" --___X_CMD_FCT_API_VENDOR "$___X_CMD_FCT_API_VENDOR" \
            --request-code '___x_cmd_fjo_get_multi "/orgs/${org##*/}/members" limit page' \
            --error-msg "get membership list fail" \
            --end ___x_cmd_fjo_org_membership_app_status_handler \
            "org.membership.app.awk"
    else
        ___x_cmd_fjo_get_multi "/orgs/${org}/members" limit page | x jo 2c    .id
    fi


}

___x_cmd_fjo_org_membership_app_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_fjo_http_error
        return
    fi
    local user_name
    user_name="${___X_CMD_TUI_TABLE_CUR_LINE##*UserName: }"
    user_name=${user_name%%
Url:*}
    case "$___X_CMD_TUI_TABLE_FINAL_COMMAND" in
            "ENTER")        printf "%s\n" "$___X_CMD_TUI_TABLE_CUR_LINE"  ;;
            "c")            ___x_cmd_fjo_org_membership_add    --org "${org}"                     ;;
            "u")            ___x_cmd_fjo_org_membership_edit   --org "${org}"    "$user_name"     ;;
            "d")            ___x_cmd_fjo_org_membership_rm     --org "${org}"    "$user_name"     ;;
            *)              return   ;;
    esac
}

___x_cmd_fjo_org_member_ll() {
    param:scope     ___x_cmd_fjo
    param:dsl       '
options:
    --org           "org space address"                         <>:Address
    --limit         "Results per page"                          <>:Numbers="30"
    --page          "Page number of the results to fetch."      <>:Numbers="1"

    --json|-j       "output origin json data"
    --csv           "output csv data"
    --yml           "output yml data"
'
    param:run
    if ___x_cmd_gx_output_is_format; then
        ___x_cmd_fjo_get_multi "/orgs/${org}/members" limit page | ___x_cmd_gx_output_format
    else
        ___x_cmd_fjo_get_multi "/orgs/${org}/members" limit page | \
            x jo 2c             .id .login    .is_admin           | \
            x csv header --add   User_ID  UserName  Is_admin      | \
            if [ -n "$csv" ]; then  ___x_cmd_cmds cat
            else                    ___x_cmd csv static_tab
            fi
    fi


}

# EndSection

# Section: info & add & rm
#TODO: not found this API
___x_cmd_fjo_org_member_info() {
    param:scope     ___x_cmd_fjo
    param:dsl      <<A
options:
    #1                  "username:space address"    <>
    --org               "org space address"         <>:Address

    --json|-j   "output json data"
A
    param:run

    ___x_cmd_fjo_curl get "/orgs/${org##*/}/memberships/${1##*/}" | (_____x_cmd_fjo_org_member_ui_utils Info)
}

#TODO: not found this API
___x_cmd_fjo_org_member_add() {
    param:scope     ___x_cmd_fjo
    param:dsl       <<A
type:
    role = admin member
options:
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role="member"
    #1              "username"

    --json|-j   "output json data"
A
    param:run
    if [ $# -eq 0 ];then
        fjo:error "provide at least one username"
        return 1
    fi

    for username in "$@"; do
        {
            ___x_cmd_fjo_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | (_____x_cmd_fjo_org_member_ui_utils Add)
        }
    done
}

#TODO: not found this API
___x_cmd_fjo_org_member_edit() {
    param:scope     ___x_cmd_fjo
    param:dsl       <<A
type:
    role = admin member
options:
    #1              "username"                                          <>:Username_multiple
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role
    --json|-j       "output json data"
A
    param:run
    local username="$1"
    ___x_cmd_fjo_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | (_____x_cmd_fjo_org_member_ui_utils Edit)
}

# https://gitea.com/api/swagger#/organization/orgDeleteMember
___x_cmd_fjo_org_member_rm() {
    param:scope     ___x_cmd_fjo
    param:dsl       <<A
options:
    --org       "org space address"        <>:Address
    #1          "username"                 <>:Username_multiple
    --yes|-y    "Ignore remove prompt interception"
A
    param:run

    local username
    for username in "$@"; do
        {
            [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure $org to remove user: $(___x_cmd_ui bold red "$username") ?" || continue
            ___x_cmd_fjo_curl delete "/orgs/${org##*/}/members/${username##*/}" | (
                x jo env . fjo_resp_err=.message
                if ___x_cmd_fjo_http_error; then
                    ___x_cmd_ui_tf  true "del $username to organizations  success"
                else
                    ___x_cmd_ui_tf false "del $username to organizations fail"
                    ___x_cmd_fjo____handle_resp
                    return 1
                fi
            )

        }
    done
}
# EndSection

# Section: org membership utils
_____x_cmd_fjo_org_member_ui_utils(){
    if  [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        ___x_cmd_cmds_cat
        ___x_cmd_fjo_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="role=.role url=.organization_url name=.user.login"
            msg="get membership in organizations info  success"
            error_msg="get membership in organizations info fail."
            ;;
        Add|Edit)
            msg="$1 $username to organizations  success"
            error_msg="$1 $username to organizations fail."
            ;;
    esac
    eval x jo env . state=.state fjo_resp_err=.message "$data"
    if [ -n "$state" ]; then
        ___x_cmd_ui_tf true "$msg" ${name+"Name: $name"}  ${role+"Role: $role"} ${state+"State: $state"} ${url+"Url: $url"}
    else
        ___x_cmd_ui_tf false "$error_msg"
        ___x_cmd_fjo____handle_resp
        return 1
    fi
}
# EndSection