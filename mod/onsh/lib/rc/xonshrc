

# This will only invoked when xonsh is activate on interactive mode ...

if "$HOME/.x-cmd.root/bin" not in $PATH:
    $PATH.append('/home/scopatz/.x-cmd.root/bin')

if "$HOME/.x-cmd.root/global/data/bin/l/j/h/bin" not in $PATH:
    $PATH.append('/home/scopatz/.x-cmd.root/global/data/bin/l/j/h/bin')


# xonsh defaults all variables exported
$___X_CMD_IS_INTERACTIVE_FORCE = 1
$___X_CMD_THEME_RELOAD_DISABLE = 1

xbinexp = "$HOME/.x-cmd.root/bin/xbinexp"

import re
import os
import random

def ___x_cmd_xonsh_x(args):
    $___X_CMD_XBINEXP_FP = $HOME + "/.x-cmd.root/local/data/xbinexp/onsh/"  + str(os.getpid()) + "_" + str(random.randint(0,32767))
    mkdir -p $___X_CMD_XBINEXP_FP

    $___X_CMD_XBINEXP_EVAL = ""
    $___X_CMD_XBINEXP_INITENV_OLDPWD = $OLDPWD

    xbinexp @(args)
    exit_code = _.rtn

    if p"$___X_CMD_XBINEXP_FP/PWD".exists():
        value = open(p"$___X_CMD_XBINEXP_FP/PWD").read()
        cd @(value)

    # TODO: in the future, consider adding PATH

    for posixfp in gp`$___X_CMD_XBINEXP_FP/*`:
        value = open(posixfp).read()
        name = re.sub(r"^.*/[^_]*_", "", value)
        ${...}[name] = value

    if "onsh" in $___X_CMD_XBINEXP_FP:
        # dangerous
        rm -rf "$___X_CMD_XBINEXP_FP"

    if "___X_CMD_XBINEXP_EVAL" in ${...} and $___X_CMD_XBINEXP_EVAL != "":
        evalx_cmd = $___X_CMD_XBINEXP_EVAL
        del ${...}["___X_CMD_XBINEXP_EVAL"]
        evalx( evalx_cmd )

    return exit_code

aliases['x'] = ___x_cmd_xonsh_x
aliases["xw"]   = [ "x", "ws" ]
aliases["xg"]   = [ "x", "git" ]

def ___x_cmd_xonsh_c(args):
    len_of_args = len(args)
    if len_of_args == 0:
        x cd
        return

    if len_of_args == 1:
        arg1 = args[0]
        if arg1 == "-":
            cd $OLDPWD
            return
        if arg1 == "~":
            cd ~
            return

        if os.path.isdir(arg1):
            cd @(arg1)
            return

    x cd @(args)

aliases['c'] = ___x_cmd_xonsh_c
