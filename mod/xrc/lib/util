
___x_cmd_search_path_(){
    local cur="${1:?Provide starting path}"
    cd "$cur" 1>/dev/null 2>&1 && cur="$PWD" && cd "$OLDPWD" || return

    local relative_filepath="${2:?Provide relative filepath}"
    while [ ! "$cur" = "" ]; do
        if [ -e "$cur/$relative_filepath" ]; then
            ___X_CMD_SEARCH_PATH_RESULT="$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_search_path(){
    local ___X_CMD_SEARCH_PATH_RESULT
    ___x_cmd_search_path_ "$@" && printf "%s" "$___X_CMD_SEARCH_PATH_RESULT"
}

# TODO: aka lookupfile
___x_cmd_whichfile(){
    local ___X_CMD_WHICHFILE_
    ___x_cmd_whichfile_ "$@" && printf "%s\n" "$___X_CMD_WHICHFILE_"
}

___x_cmd_whichfile_(){
    while [ "$#" -gt 0 ]; do
        [ ! -f "$1" ] || {
            ___X_CMD_WHICHFILE_=$1
            return 0
        }
        shift
    done
    return 1
}

___x_cmd_is_interative_tty(){
    [ "${-#*i}" != "$-" ]
}

___x_cmd_is_suitable_advise_env(){
    [ -z "$___X_CMD_ADVISE_DISABLE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]
}

___x_cmd_readlink_recursive(){
    local ___X_CMD_READLINK_RECURSIVE_
    ___x_cmd_readlink_recursive_ "$@"
    printf "%s\n" "$___X_CMD_READLINK_RECURSIVE_"
}

___x_cmd_definelazyloader(){
    local funcname="${1:?Provide function name}"
    local respath="${2:?Provide resource path}"
    eval "$funcname(){
        if [ \"\$___X_CMD_DEFINELAZYLOADER\" = \"$funcname\" ]; then
            printf \"No such function [%s] in [%s]\" \"$funcname\" \"$respath\"
            return 1
        fi

        if ! xrc $respath; then
            printf \"Fail to xrc: %s\" \"$respath\"
            return 1
        fi

        local ___X_CMD_DEFINELAZYLOADER=$funcname
        $funcname \"\$@\"
    }"
}

# VAR   SEP    IT
___x_cmd_trimutil(){
    eval "
[ -z \"\$${O}\" ] && return 1
IT=\"\${${O}%%${SEP:-
}*}\"
if [ \"\${IT}\" = \"\${$O}\" ]; then
    $O=\"\"
else
    $O=\"\${${O}#*${SEP:-
}}\"
fi
return 0
"
}

___x_cmd_isplit(){
    SEP="${SEP:-
}"
    [ -n "$V" ] || return 1
    e="${V%%"${SEP}"*}"
    if [ "${e}" = "${V}" ]; then     V=
    else                             V="${V#*"${SEP}"}"
    fi
}

# x iter "$data" ','
___x_cmd_spliter(){
    local ___X_CMD_ITER_DATA="${1:?Provide sep}";
    local ___X_CMD_ITER_SEP="${2:?Provide sep}";
    ___X_CMD_ITER_SEP="${___X_CMD_ITER_SEP:-
}"
    shift 2

    local e
    case "$1" in
        \"*\")
            while true; do
                e="${___X_CMD_ITER_DATA%%"${___X_CMD_ITER_SEP}"*}"
                eval "printf \"%s\n\" \"$1\""
                [ "$e" != "$___X_CMD_ITER_DATA" ] || break
                ___X_CMD_ITER_DATA="${___X_CMD_ITER_DATA#*"$___X_CMD_ITER_SEP"}"
            done

            ;;
        *)
            while true; do
                e="${___X_CMD_ITER_DATA%%"${___X_CMD_ITER_SEP}"*}"
                "$@"
                [ "$e" != "$___X_CMD_ITER_DATA" ] || break
                ___X_CMD_ITER_DATA="${___X_CMD_ITER_DATA#*"$___X_CMD_ITER_SEP"}"
            done
    esac
}

___x_cmd_pidofsubshell(){
    sh -c 'printf "%s\n" "$PPID"'
}

# Deprecated: Should never use it.
# To prevent dash inline environment problem: just for dash
if [ "$___X_CMD_SHELL" = dash ]; then   alias ___x_cmd_shift1='[ $# -gt 0 ] && shift ; '
else                                    alias ___x_cmd_shift1="shift ; "
fi

# Section: q1 q2
case "$___X_CMD_SHELL" in
    bash|zsh)
___x_cmd_q1(){
    printf "'%s'" "${1//\'/\\\'}"
}

___x_cmd_q2(){
    printf "\"%s\"" "${1//\"/\\\"}"
}
    ;;
    *)
___x_cmd_q1(){
    awk '
BEGIN{ RS="\001"; S="'\''"; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}

___x_cmd_q2(){
    awk '
BEGIN{ RS="\001"; S="\""; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}
    ;;
esac
# EndSection


___x_cmd_awk(){
    xrc awk/latest && ___x_cmd_awk "$@"
}

___x_cmd_evex(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        "$@"
    fi
}

___x_cmd_eval(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        # "$@"
        local ___x_cmd_evex_op="$1"; shift
        eval "$___x_cmd_evex_op" "\"\$@\""
    fi
}

# ___x_cmd_abspath(){
#     cd "${1:?Provide Path}" && ___X_CMD_ABSPATH="$PWD" && cd "$OLDPWD" || return
# }

___x_cmd_xrc_version(){
    if [ -z "$___X_CMD_VERSION" ]; then
        [ -f "$___X_CMD_ROOT_MOD/version" ] || {
            x:error "env ___X_CMD_VERSION unset and file not found: $___X_CMD_ROOT_MOD/version"
            return 1
        }
        . "$___X_CMD_ROOT_MOD/version"
    fi

    printf "%s\n" "$___X_CMD_VERSION"
}


# castract %c% '' %b%
# V=
# V=v.1.1
# ___x_cmd_caxt v12.1.3     v %c1 . %c2 . %c3
___x_cmd_caxt(){
    local data="$1"; shift
    local elem
    local var
    while [ "$#" -gt 2 ]; do
        case "$1" in
            %*) var="${1#%}"
                elem="${data%%$2*}"
                [ "$elem" != "$data" ] || return 1
                eval "$var=\"\$elem\""
                data="${data#"$elem"$2}"
                shift 2
                ;;

            *)  elem="${data#$1}";
                [ "$elem" != "$data" ] || return 1
                data="$elem"
                shift
                ;;
        esac
    done

    if [ "$#" -eq 1 ]; then
        case "$1" in
            %*) var="${1#%}"
                eval "$var=\"\$data\""
        esac
    fi
}

