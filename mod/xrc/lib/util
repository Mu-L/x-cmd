# shellcheck shell=dash

___x_cmd_abspath_(){
    local target_path="${1:?Please provide path}"
    case "$target_path" in
        /)          ___X_CMD_ABSPATH_=/ ;;
        .)          ___X_CMD_ABSPATH_="$PWD" ;;
        *)
                    target_path="${target_path%/}"
                    local basename="${target_path##*/}"
                    if [ "$basename" = "$target_path" ]; then
                        ___X_CMD_ABSPATH_="$PWD/$target_path"
                    else
                        ___x_cmd_inner_cd "${target_path%"$basename"}" || return
                        case "$basename" in
                            \.)     ___X_CMD_ABSPATH_="$PWD" ;;
                            \.\.)   ___x_cmd_inner_cd .. || return 1
                                    ___X_CMD_ABSPATH_="$PWD" ;;
                            *)      ___X_CMD_ABSPATH_="${PWD%/}/$basename"
                        esac
                        x_="$___X_CMD_ABSPATH_"
                        ___x_cmd_inner_cd "$OLDPWD" || return
                    fi
    esac
    x_="$___X_CMD_ABSPATH_"
}

___x_cmd_abspath(){
    local x_
    ___x_cmd_abspath_ "$@" || return
    printf "%s\n" "$x_"
}

___X_CMD_LOCATEFOLDER_MODE=-e
___x_cmd_locatefolder_(){
    local cur="${1:?Provide starting path}"
    ___x_cmd_inner_cd "$cur" 1>/dev/null 2>&1 && cur="$PWD" && ___x_cmd_inner_cd "$OLDPWD" || return

    local relative_filepath="${2:?Provide relative filepath}"
    while [ ! "$cur" = "" ]; do
        # shellcheck disable=SC1009,SC1072,SC1073
        if [ "$___X_CMD_SEARCH_PATH_TYPE" "$cur/$relative_filepath" ]; then
            x_="$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_locatefolder(){
    local x_
    ___x_cmd_locatefolder_ || return
    printf "%s\n" "$x_"
}

# Section: Deprecated: ___x_cmd_search_path_
___X_CMD_SEARCH_PATH_TYPE="-e"
___x_cmd_search_path_(){
    local cur="${1:?Provide starting path}"
    cd "$cur" 1>/dev/null 2>&1 && cur="$PWD" && cd "$OLDPWD" || return

    local relative_filepath="${2:?Provide relative filepath}"
    while [ ! "$cur" = "" ]; do
        # shellcheck disable=SC1009,SC1072,SC1073
        if [ "$___X_CMD_SEARCH_PATH_TYPE" "$cur/$relative_filepath" ]; then
            ___X_CMD_SEARCH_PATH_RESULT="$cur"
            return 0
        fi
        cur=${cur%/*}
    done
    return 1
}

___x_cmd_search_path(){
    local ___X_CMD_SEARCH_PATH_RESULT
    ___x_cmd_search_path_ "$@" && printf "%s" "$___X_CMD_SEARCH_PATH_RESULT"
}
# EndSection

___X_CMD_IS_INTERACTIVE_ENABLE=1

___x_cmd_interactive_disable(){
    ___X_CMD_IS_INTERACTIVE_ENABLE=
}

___x_cmd_interactive_enable(){
    ___X_CMD_IS_INTERACTIVE_ENABLE=1
}

___x_cmd_interactive(){
    case "$1" in
        disable)    ___x_cmd_interactive_disable ;;
        *)          ___x_cmd_interactive_enable  ;;
    esac
}

___x_cmd_is_interactive(){
    [ -n "$___X_CMD_IS_INTERACTIVE_ENABLE" ] && ___x_cmd_is_interactive_tty
}

___x_cmd_is_interactive_tty(){
    [ "${-#*i}" != "$-" ]
}

___x_cmd_is_suitable_advise_env(){
    [ -z "$___X_CMD_ADVISE_DISABLE" ] && [ -n "${BASH_VERSION}${ZSH_VERSION}" ] && [ "${-#*i}" != "$-" ]
}

___x_cmd_readlink_recursive(){
    local ___X_CMD_READLINK_RECURSIVE_
    ___x_cmd_readlink_recursive_ "$@"
    printf "%s\n" "$___X_CMD_READLINK_RECURSIVE_"
}

___x_cmd_definelazyloader(){
    local funcname="${1:?Provide function name}"
    local respath="${2:?Provide resource path}"
    eval "$funcname(){
        if [ \"\$___X_CMD_DEFINELAZYLOADER\" = \"$funcname\" ]; then
            printf \"No such function [%s] in [%s]\" \"$funcname\" \"$respath\"
            return 1
        fi

        if ! xrc $respath; then
            printf \"Fail to xrc: %s\" \"$respath\"
            return 1
        fi

        local ___X_CMD_DEFINELAZYLOADER=$funcname
        $funcname \"\$@\"
    }"
}

# VAR   SEP    IT
___x_cmd_trimutil(){
    eval "
[ -z \"\$${O}\" ] && return 1
IT=\"\${${O}%%${SEP:-
}*}\"
if [ \"\${IT}\" = \"\${$O}\" ]; then
    $O=\"\"
else
    $O=\"\${${O}#*${SEP:-
}}\"
fi
return 0
"
}

___x_cmd_isplit(){
    SEP="${SEP:-
}"
    [ -n "$V" ] || return 1
    e="${V%%"${SEP}"*}"
    if [ "${e}" = "${V}" ]; then     V=
    else                             V="${V#*"${SEP}"}"
    fi
}

# x iter "$data" ','
___x_cmd_spliter(){
    local ___X_CMD_ITER_DATA="${1:?Provide sep}";
    local ___X_CMD_ITER_SEP="${2:?Provide sep}";
    ___X_CMD_ITER_SEP="${___X_CMD_ITER_SEP:-
}"
    shift 2

    local e
    case "$1" in
        \"*\")
            while true; do
                e="${___X_CMD_ITER_DATA%%"${___X_CMD_ITER_SEP}"*}"
                eval "printf \"%s\n\" \"$1\""
                [ "$e" != "$___X_CMD_ITER_DATA" ] || break
                ___X_CMD_ITER_DATA="${___X_CMD_ITER_DATA#*"$___X_CMD_ITER_SEP"}"
            done

            ;;
        *)
            while true; do
                e="${___X_CMD_ITER_DATA%%"${___X_CMD_ITER_SEP}"*}"
                "$@"
                [ "$e" != "$___X_CMD_ITER_DATA" ] || break
                ___X_CMD_ITER_DATA="${___X_CMD_ITER_DATA#*"$___X_CMD_ITER_SEP"}"
            done
    esac
}

___x_cmd_pidofsubshell_quick_(){
    if [ -n "$BASHPID" ]; then
        x_="$BASHPID"
        return
    fi

    if [ -n "$ZSH_VERSION" ]; then
        x_="${sysparams[pid]}"
        return
    fi

    x_=
}

___x_cmd_pidofsubshell(){
    local x_
    ___x_cmd_pidofsubshell_quick_
    if [ -z "$x_" ]; then   sh -c 'printf "%s\n" "$PPID"'
    else                    printf "%s\n" "$x_"
    fi
}

___x_cmd_pidofsubshell_(){
    ___x_cmd_pidofsubshell_quick_
    [ -n "$x_" ] || x_=$(sh -c 'printf "%s\n" "$PPID"')
}

# Deprecated: Should never use it.
# To prevent dash inline environment problem: just for dash
if [ "$___X_CMD_SHELL" = dash ]; then   alias ___x_cmd_shift1='[ $# -gt 0 ] && shift ; '
else                                    alias ___x_cmd_shift1="shift ; "
fi

# Section: q1 q2
case "$___X_CMD_SHELL" in
    bash|zsh)
___x_cmd_q1(){
    printf "'%s'" "${1//\'/\\\'}"
}

___x_cmd_q2(){
    printf "\"%s\"" "${1//\"/\\\"}"
}
    ;;
    *)
___x_cmd_q1(){
    awk '
BEGIN{ RS="\001"; S="'\''"; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}

___x_cmd_q2(){
    awk '
BEGIN{ RS="\001"; S="\""; }
{
    gsub(S, "\\" S, $0)
    printf(S "%s" S, $0)
}' <<A
$1
A
}
    ;;
esac
# EndSection

# TODO: Removed.
___x_cmd_evex(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        "$@"
    fi
}

# TODO: Removed.
___x_cmd_eval(){
    if [ "$#" -lt 2 ]; then
        eval "${1:-:}"
    else
        # "$@"
        local ___x_cmd_evex_op="$1"; shift
        eval "$___x_cmd_evex_op" "\"\$@\""
    fi
}

# ___x_cmd_abspath(){
#     cd "${1:?Provide Path}" && ___X_CMD_ABSPATH="$PWD" && cd "$OLDPWD" || return
# }

# castract %c% '' %b%
# V=
# V=v.1.1
# ___x_cmd_caxt v12.1.3     v %c1 . %c2 . %c3
___x_cmd_caxt(){
    local data="$1"; shift
    local elem
    local var
    while [ "$#" -gt 2 ]; do
        case "$1" in
            %*) var="${1#%}"
                elem="${data%%$2*}"
                [ "$elem" != "$data" ] || return 1
                eval "$var=\"\$elem\""
                data="${data#"$elem"$2}"
                shift 2
                ;;

            *)  elem="${data#$1}";
                [ "$elem" != "$data" ] || return 1
                data="$elem"
                shift
                ;;
        esac
    done

    if [ "$#" -eq 1 ]; then
        case "$1" in
            %*) var="${1#%}"
                eval "$var=\"\$data\""
        esac
    fi
}

# TODO: There might be more effiecient methods to achieve.
___x_cmd_unexport(){
    local x_
    while [ $# -gt 0 ]; do
        eval "
            x_=\"\${$1}\"
            unset $1
            $1=\"\$x_\"
        "
        shift
    done
}

___x_cmd_shq1_(){
    local i="$1"

    [ -n "$i" ] || {
        x_="''"
        return 0
    }

    local r="'"

    while [ -n "$i" ]; do
        case "$i" in
            *\'*)
                r="${r}${i%%\'*}'\\''"
                i="${i#*\'}"
                ;;
            *)
                r="${r}${i}'"
                break
        esac
    done

    x_="$r"
}

___x_cmd_cmdstr___q1_(){
    local i="$1"

    [ -n "$i" ] || {
        ___X_CMD_CMDSTR___Q1_="''"
        return 0
    }

    local r="'"

    while [ -n "$i" ]; do
        case "$i" in
            *\'*)
                r="${r}${i%%\'*}'\\''"
                i="${i#*\'}"
                ;;
            *)
                r="${r}${i}'"
                break
        esac
    done

    ___X_CMD_CMDSTR___Q1_="$r"
}

# This is very important... Widely used in docker and git intercept
___x_cmd_cmdstr(){
    local varname="$1";     shift

    local t; eval t="\"\${$varname}\""
    local i; for i in "$@"; do
        ___x_cmd_cmdstr___q1_ "$i"
        t="$t $___X_CMD_CMDSTR___Q1_"
    done

    eval "$varname"=\"\$t\"
}


# double in cd module
# ___x_cmd_cd(){
#     ___x_cmd_inner_cd "$@"
# }

# x joinifs_ : a b c
___x_cmd_joinifs_(){
    local IFS="${1:?Provide sep}"
    x_="$*"
}
