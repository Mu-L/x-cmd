
___x_cmd_perl_co(){
    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    local user_message="$___X_CMD_CHAT_PROMPT_CODE
        IMPORTANT: ONLY COMMAND LINE using perl command as output, return only plaintext.
        You MUST always follow them. No exceptions.

        Example: running the file hi.pl
        perl hi.pl

        Example: check the perl file hi.pl syntax without running
        perl -c hi.pl

        prompt: $*
    "
    local msg; msg='{
        role: user,
        content: '$(x chat --jqu "$user_message")'
    }'

    x chat -n 0 --request co,perl "" "$msg"
}

# using the perl facility to test the code

___x_cmd_perl_coco(){
    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    local user_message="$___X_CMD_CHAT_PROMPT_CODE
        IMPORTANT: ONLY perl CODE as output, return only plaintext.
        You MUST always follow them. No exceptions.

        Example: create a file named 'test.txt' with the content 'hello world'
        open(my \$fh, '>', 'test.txt');
        print \$fh \"hello world\";
        close \$fh;

        Example: running command 'ls -l'
        system('ls -l');

        prompt: $*
    "
    local msg; msg='{
        role: user,
        content: '$(x chat --jqu "$user_message")'
    }'

    # Consider refine the code ...
    code=$(x chat -n 0 --request coco,perl "" "$msg")

    local feedback
    feedback=$(printf "%s\n" "$code" | x perl -c) || {
        {
            printf "Linting fail. Here is the feedback:"
            printf "%s\n" "$feedback"
        } >/dev/tty

        while true; do
            x ui select "" "what's next" "Send feedback to ai for better answer" "view the feed back and code" "Exit" || {
                co:error "Recv interrupts. Exit"
                return 130
            }
            case "$___X_CMD_UI_SELECT_RET" in
                1)
                    # x chat -n 0 --request coco,perl "$feedback" "$msg"
                    #
                    x:error "Unsuported"
                    return 1
                    ;;
                2)  printf "%s\n" "$code" | x bat -l perl ;;
                3)  return 1 ;;
            esac
        done
    }

    printf "%s\n" "$code" | x bat -l perl
    x ui yesno "Do you want to run the code" || return 0        # default is no.

    printf "%s\n" "$code" | x perl
}
