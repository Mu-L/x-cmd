# shellcheck shell=sh disable=SC3043

___x_cmd_hub_token(){
    local op="$1"
    case "$op" in
        -h|--help) shift ; x advise gen_help "$___X_CMD_ROOT_MOD/hub/res/advise.jso" token >&2 ; return 1 ;;
        info|set|ls|rm|clear|gen) shift
            "___x_cmd_hub_token_$op" "$@"                         ;;
        *) ___x_cmd_hub___util_get_token "$@"       ;;
    esac
}

___x_cmd_hub_token_set(){
    local token="${1}"
    ___x_cmd_hub___util_save_token_with_ui "$token"
}

___x_cmd_hub_token_info(){
    local json
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    x advise gen_help "$___X_CMD_ROOT_MOD/hub/res/advise.jso" token info; return ;;
    esac

    local token; token="$(___x_cmd_hub___util_get_token)" || return
    local res
    if ! res="$(___x_cmd_hub___util_curl get "/api/v0/token/$token")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to get token info:"
        return 1
    fi
    [ -z "$json" ] || { printf "%s\n" "$res" ; return 0 ; }
    ___x_cmd_hub___util_handle_resp true "" "Get token info successfully:"
    printf "[%s]" "$res" | x j2y | x str ml pwrap '  '
}

___x_cmd_hub_token_ls(){
    local json
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    x advise gen_help "$___X_CMD_ROOT_MOD/hub/res/advise.jso" token ls >&2 ; return 1 ;;
    esac

    local res
    if ! res="$(___x_cmd_hub___util_curl get /api/v0/token)" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to list tokens:"
        return 1
    fi
    [ -z "$json" ] || { printf "%s\n" "$res" ; return 0 ; }
    ___x_cmd_hub___util_handle_resp true "" "List tokens successfully:"
    printf "%s" "$res" | x j2y | x str ml pwrap '  '
}

___x_cmd_hub_token_rm(){
    local json
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    x advise gen_help "$___X_CMD_ROOT_MOD/hub/res/advise.jso" token rm >&2 ; return 1 ;;
    esac

    local token="${1:?Provide token}"
    local res
    if ! res="$(___x_cmd_hub___util_curl delete "/api/v0/token/$token")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to remove token:"
        return 1
    fi
    ___x_cmd_hub___util_handle_resp true "$res" "Remove token successfully:"
}

___x_cmd_hub_token_clear(){
    local res
    if ! res="$(___x_cmd_hub___util_curl get /api/v0/token/invalid/other)" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to clear token:"
        return 1
    fi
    ___x_cmd_hub___util_handle_resp true "$res" "Clear token successfully:"
}

___x_cmd_hub_token_gen(){
    param:dsl<<A
option:
    --json|-j          "Output json format"
    --policy|-p|m      "Policy for the token <prefix> <acl>"
        <prefix>="/"
        <acl>="write"    =  "read" "write"
A
    param:run

    local prefix; local acl; local i; local body=""
    for i in $(param_marg policy); do
        prefix="$(param_marg policy "$i" 1)"
        acl="$(param_marg policy "$i" 2)"
        body="$body,$(x jo dict "prefix:/${prefix#/}" acl)"
        hub:debug "policy: $i $prefix $acl"
    done

    local res
    if ! res="$(___x_cmd_hub___util_curl post /api/v0/token "[${body#,}]")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to generate token:"
        return 1
    fi
    [ -z "$json" ] || { printf "%s" "$res" ; return 0 ; }
    ___x_cmd_hub___util_handle_resp true "" "Generate token successfully:"
    printf "[%s]" "$res" | x j2y
}