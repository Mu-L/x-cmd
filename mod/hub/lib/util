# shellcheck shell=sh disable=SC3043

___x_cmd_hub___util_user_id(){
    local res
    if ! res="$(NO_AUTH=1 ___x_cmd_hub___util_curl get "/api/v0/account/id" "username=$1")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to get user id for $1"
        return 1
    fi

    printf "%s" "$res" | (  x jo env . id=.id ; printf "%s\n" "$id")
}

___x_cmd_hub___util_handle_resp(){
    local isSuccess="$1"; local resp="$2"; local msg="$3"; shift 3
    local resp_msg; resp_msg="$(printf "%s" "$resp" | {
        x jo env . resp_msg=.msg ; printf "%s\n" "$resp_msg" ;
    })"

    [ -z "$resp_msg" ] || {
        ___x_cmd_ui_tf "$isSuccess" "$msg" "resp: $resp_msg" >&2
        return
    }

    if [ -n "$resp" ] ; then  ___x_cmd_ui_tf "$isSuccess" "$msg" "resp: $resp" "$@" >&2
    else                      ___x_cmd_ui_tf "$isSuccess" "$msg"               "$@" >&2  ;fi
}

___x_cmd_hub___util_subcmd_invalid(){
    local subcmd="${1}"
    local arg="${2}"
    if [ -z "$arg" ]; then ___x_cmd_ui_tf false "Subcommand required. See 'x hub $subcmd --help|-h':" >&2
    else                     ___x_cmd_ui_tf false "'$arg' is not a subcommand. See 'x hub $subcmd --help|-h':" >&2 ; fi
    return 1
}

___x_cmd_hub___help(){
    x help -m hub "$@" >&2
    return 1
}

# Section: encrypt

# from aaa.sh to aaa.sh.enc
___x_cmd_hub___util_encrypt(){
    local pass
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --pass|-p) pass="$2"; shift 2 ;;
            *) break ;;
        esac
    done

    x openssl env -aes-256-cbc -salt -pbkdf2 -in "$1" -out "${1}.enc" -pass pass:"$pass"
}

# from aaa.sh.enc to aaa.sh
___x_cmd_hub___util_decrypt(){
    local pass
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --pass|-p) pass="$2"; shift 2 ;;
            *) break ;;
        esac
    done

    x openssl enc -d -aes-256-cbc -pbkdf2 -in "$1" -out "${1%.*}"  -pass pass:"$pass"
}

# EndSection

# Section: curl

___X_CMD_HUB_SERVICE_URL="https://hub.x-cmd.com"
___x_cmd_hub___util_curl() {
    local method="${1:?Provide method}"
    local url_path="${2:?Provide url_path}"; shift 2

    [ -n "$NO_AUTH" ] || {
        # TODO: use cfgy to get token
        local token; ___x_cmd_hub_current token:=
        [ -n "$token" ] || return 1
        ___x_cmd_http header put Authorization "$token"
    }

    hub:debug "Command " "$url_path" "$@"
    case "$method" in
        get)              ___x_cmd_http get "$___X_CMD_HUB_SERVICE_URL$url_path" "$@"              ;;
        post|patch|put)   ___x_cmd_http "$method" json "$___X_CMD_HUB_SERVICE_URL$url_path" "$@"   ;;
        delete)
            ___x_cmd_http qs mput "$@"
            ___x_cmd_http delete "$___X_CMD_HUB_SERVICE_URL$url_path"
        ;;
        *)      hub:error "Unknown method: $method" ;;
    # TODO: Maybe has other way to close the http module log
    esac 2>/dev/null || {
        printf "%s\n" "$(___x_cmd_http resp body)"
        return 1
    }
}

___x_cmd_hub___util_send_file() {
    local localfp="${1:?Provide local file}"
    local respath="${2:?Provide respath}"

    local token; token="$(___x_cmd_hub___util_get_token)" || return 1
    local cmd; cmd="curl -sS -X PUT -F 'file=@$localfp' '$___X_CMD_HUB_SERVICE_URL/api/v0/file?token=${token}&res=${respath}'"
    # TODO: when http return error code, curl will not return error code
    eval "$cmd" || {  hub:debug "Exec cmd: $cmd" ; return 1 ;}
}

___x_cmd_hub___util_send_archive() {
    local localfp="${1:?Provide local file}"
    local respath="${2:?Provide respath}"

    local token; token="$(___x_cmd_hub___util_get_token)" || return 1
    local cmd; cmd="curl -sS -X PUT -F 'file=@$localfp' '$___X_CMD_HUB_SERVICE_URL/api/v0/file/archive?token=${token}&res=${respath}'"
    # TODO: when http return error code, curl will not return error code
    eval "$cmd" || {  hub:debug "Exec cmd: $cmd" ; return 1 ;}
}

#EndSection

# Section: math ___x_cmd_hub___util_unit_suffixes, ___x_cmd_hub___util_percent

# use unit suffixes. Byte, Kilobyte, Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the number of digits to four or fewer using base 2 for sizes
___x_cmd_hub___util_unit_suffixes(){
    local base="${1:?Provide base}"
    local unit="B"
    base=$((base*100))
    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="KB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="MB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="GB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="TB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="PB"
    fi

    printf "%s %s" "$((base/100)).$((base%100))" "$unit"
}

___x_cmd_hub___util_percent(){
    local base="${1:?Provide base}"
    local total="${2:?Provide total}"
    base="$((base*100*100/total))"
    printf "%s" "$((base/100)).$((base%100)) %"
}

#EndSection

# Section: token_generate

___x_cmd_hub___util_get_token(){
    local token; token=$(___x_cmd_hub_cfg get token)
    if [ ! "$token" ]; then
        ___x_cmd_ui_tf false "Token is empty, please 'x hub login' first:" >&2
        return 1
    fi
    printf "%s\n" "$token"
}

___x_cmd_hub___util_save_token_with_ui(){
    local token="${1}"
    if ___x_cmd_hub_get_userinfo_by_token "${token}" ; then
        ___x_cmd_hub_cfg token="${token}"
        ___x_cmd_hub___util_handle_resp true "" "Save token to config file"
    else
        ___x_cmd_ui_tf false "Failed" >&2
        return 1
    fi
}

___x_cmd_hub___util_token_generate(){
    printf "%s%s" "$(date +%s)" "$(x rand uuid)" | x md5
}

# EndSection
