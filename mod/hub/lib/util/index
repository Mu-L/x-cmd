# shellcheck shell=dash

xrc:mod:lib hub util/curl

___x_cmd_hub___util_user_id(){
    local res;    res="$(NO_AUTH=1 x ccmd -- ___x_cmd_hub___util_curl_v2 get "/api/v0/account/id" "username=$1")"
    local userId; userId="$(printf "%s" "$res" | x jo env . id=.id ; printf "%s\n" "$id")"
    if [ -z "${userId}" ] ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to get user id for $1"
        x ccmd invalidate ___x_cmd_hub___util_curl_v2 get "/api/v0/account/id" "username=$1"
        return 1
    fi
    printf "%s" "$userId"
}

___x_cmd_hub___util_userid(){
    local x_; ___x_cmd_hub___util_ensure_userid_; printf "%s" "$x_"
}

___x_cmd_hub___util_ensure_userid_(){
    local token;  token="$(___x_cmd_hub_cur get token)"
    local res;    res="$(NO_AUTH=1 x ccmd -- ___x_cmd_hub___util_curl_v2 get "/api/v0/account" "token=$token")"
    local userId; userId="$(printf "%s" "$res" | x jo env . id=.id ; printf "%s\n" "$id")"
    if [ -z "${userId}" ] ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to get user id"
        x ccmd invalidate ___x_cmd_hub___util_curl_v2 get "/api/v0/account" "token=$token"
        return 1
    fi
    x_="$userId"
}

___x_cmd_hub___util_handle_resp(){
    local isSuccess="$1"; local resp="$2"; local msg="$3"; shift 3
    local resp_msg; resp_msg="$(printf "%s" "$resp" | {
        x jo env . resp_msg=.msg ; printf "%s\n" "$resp_msg" ;
    })"

    [ -z "$resp_msg" ] || {
        ___x_cmd_ui_tf "$isSuccess" "$msg" "resp: $resp_msg" >&2
        return
    }

    if [ -n "$resp" ] ; then  ___x_cmd_ui_tf "$isSuccess" "$msg" "resp: $resp" "$@" >&2
    else                      ___x_cmd_ui_tf "$isSuccess" "$msg"               "$@" >&2  ;fi
}

___x_cmd_hub___util_user_dir(){
    local username="${1:?username required}"
    local p="${2}"

    case "$username" in
        -|me)
            local x_
            ___x_cmd_hub___util_ensure_userid_ || return
            res="$___X_CMD_HUB_DATA/$x_/$p" ;;
        *)  res="$___X_CMD_HUB_DATA/$(___x_cmd_hub___util_user_id "$username")/$p" || return ;;
    esac

    x mkdirp "$res"
    printf "%s" "$res"
}

___x_cmd_hub___util_subcmd_invalid(){
    local subcmd="${1}"
    local arg="${2}"
    [ -z "$subcmd" ] || subcmd="$subcmd "
    if [ -z "$arg" ]; then ___x_cmd_ui_tf false "Subcommand required. See 'x hub $subcmd--help|-h':" >&2
    else                   ___x_cmd_ui_tf false "'$arg' is not a subcommand. See 'x hub $subcmd--help|-h':" >&2 ; fi
    return 1
}

___x_cmd_hub___help(){
    x help -m hub "$@" >&2
    return 1
}

___x_cmd_hub___util_st_tab(){
    if ! ___x_cmd_is_interative_tty || [ ! -t 1 ]; then
        x csv static_tab
    else
        x csv static_tab "$@"
    fi
}

___x_cmd_hub___util_read_password_(){
    local password
    printf "%s" "$1"
    stty -echo
    read -r password
    stty echo
    printf "\n"
    x_="$password"
}

# Section: encrypt

# Section: math ___x_cmd_hub___util_unit_suffixes, ___x_cmd_hub___util_percent

# use unit suffixes. Byte, Kilobyte, Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the number of digits to four or fewer using base 2 for sizes
___x_cmd_hub___util_unit_suffixes(){
    local base="${1:?Provide base}"
    local unit="B"
    base=$((base*100))
    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="KB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="MB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="GB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="TB"
    fi

    if [ "$base" -ge 102400 ] ; then
        base=$((base/1024))
        unit="PB"
    fi

    printf "%s %s" "$((base/100)).$((base%100))" "$unit"
}

___x_cmd_hub___util_percent(){
    local base="${1:?Provide base}"
    local total="${2:?Provide total}"
    base="$((base*100*100/total))"
    printf "%s" "$((base/100)).$((base%100)) %"
}

#EndSection

# Section: token_generate

___x_cmd_hub___util_get_token(){
    local token; token=$(___x_cmd_hub_cfg --get token)
    if [ ! "$token" ]; then
        ___x_cmd_ui_tf false "Token is empty, please 'x hub login' first:" >&2
        return 1
    fi
    printf "%s\n" "$token"
}

___x_cmd_hub___util_save_token_with_ui(){
    local token="${1}"
    if ___x_cmd_hub_get_userinfo_by_token "${token}" ; then
        if [ -n "$(___x_cmd_hub_cfg --get token)" ]; then
            hub:info "You have already login, will logout first"
            ___x_cmd_hub_account_logout
        fi
        ___x_cmd_hub_cfg token="${token}"
        ___x_cmd_hub___util_handle_resp true "" "Save token to config file"
        local x_; ___x_cmd_hub_keypair___ensure_key_ default private || return 1
        hub:info "Login success"
    else
        ___x_cmd_ui_tf false "Failed" >&2
        return 1
    fi
}

___x_cmd_hub___util_token_generate(){
    printf "%s%s" "$(date +%s)" "$(x rand uuid)" | x md5
}

# EndSection
