# shellcheck shell=sh disable=SC3043

# Section(util): normalize_respath

# TODO: Should be review. @el
___x_cmd_hub_file_normalize_respath(){
    local respath="${1}"
    case "$respath" in
        @me/*|@i/*|@/*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=me@hub
            printf "%s" "$respath" ;;
        *@*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "$respath" ;;
        *)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "@me/${respath#/}" ;;
    esac
}

# EndSection

___x_cmd_hub_file(){

    param:subcmd ___x_cmd_hub_file                         \
        ls          "List all files or directories under the specified folder of the current user in the cloud, the default is the root directory"                    \
        upload      "Upload files/folders to the hub"      \
        cat         "Print file content"                   \
        which       "Find file in hub"                     \
        rm          "Remove file from hub"                 \
        upload_dist "Upload dist as a wx file to hub"      \
        la          "List all files in hub use ui table"

    param:subcmd:try
    param:run
    ___x_cmd_hub___util_subcmd_invalid "file" "$@"
}

# EndSection

# Section(list): ls„ÄÅ la

___x_cmd_hub_file_ls(){
    param:dsl<<A
advise:
    #1    xrc hub/latest && ___x_cmd_hub_advise_ls_remote
option:
    #1           "Resourse path"
    --json|-j    "Output json format"
A
    param:run
    ___x_cmd_hub_file_list "$@"
}

___x_cmd_hub_file_la(){
    param:dsl<<A
advise:
    #1    xrc hub/latest && ___x_cmd_hub_advise_ls_remote
option:
    #1           "Resourse path"
    --json|-j    "Output json format"
A
    param:run
    ___x_cmd_hub_file_list "$1" detail true
}

# TODO: optimize
___x_cmd_hub_file_list(){
    local respath="${1:-@me/}"
    local type="${2:-""}"
    local recursive="${3:-""}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local res
    if ! res="$(___x_cmd_hub___util_curl get /api/v0/file res="${respath}" type="${type}" recursive="${recursive}")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to ls file"
        return 1
    fi

    [ -z "$json" ] || { printf "%s\n" "$res"; return 0; }
    if [ "$type" = "detail" ] ; then
        x ui table json PATH=.path SIZE=.size MD5=.md5 CREATE_AT=.createdAt UPDATE_AT=.updateAt \
            -- 'printf "%s" "$res"'
    else
        local code; code="$(xrc cat awk/lib/default.awk awk/lib/j/json.awk awk/lib/j/jiter.awk )"
        printf "%s" "$res" | awk "$code"'
            { jiget_after_tokenize_unquote($0, ".") }'
    fi
}

# EndSection

# Section: rm

___x_cmd_hub_file_rm(){
    param:dsl<<A
advise:
    #1    xrc hub/latest && ___x_cmd_hub_advise_ls_remote
option:
    #1                "Resourse path"
    --recursive|-r    "Recursive"
A
    param:run

    local respath="${1:-@me/}" ; respath="$(___x_cmd_hub_file_normalize_respath "$respath")"
    local recursive="${2:-false}"

    local res
    if ! res="$(___x_cmd_hub___util_curl delete /api/v0/file "res=$respath" "recursive=$recursive")" ; then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to rm file, respath:$respath, recursive:$recursive"
        return 1
    fi
    ___x_cmd_hub___util_handle_resp true "$res" "Success to rm file, respath:$respath, recursive:$recursive"
}

# EndSection

# Section: which upload cat

___x_cmd_hub_file_which(){
    param:dsl<<A
advise:
    #1    xrc hub/latest && ___x_cmd_hub_advise_ls_remote
option:
    #1    "Resourse path"
A
    param:run

    local respath="${1:?Provide respath}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    if ! res=$(___x_cmd_hub___util_curl get /api/v0/file/cat "res=$respath"); then
        ___x_cmd_hub___util_handle_resp false "$res" "Please check the respath."
        return 1
    fi

    local cache_path="${___X_CMD_HUB_CACHE}/cache/${respath#/}"
    x mkdirp "${cache_path%/*}"
    printf "%s\n" "$res" > "${cache_path}"
    printf "%s\n" "${cache_path}"
}

___x_cmd_hub_file_cat(){
    param:dsl<<A
advise:
    #1    xrc hub/latest && ___x_cmd_hub_advise_ls_remote
option:
    #1    "Resourse path to cat"  <respath>
A
    param:run

    local respath="${1:?Provide respath}"
    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local tmp="${respath#@}"
    local userId; userId="$(___x_cmd_hub___util_user_id "${tmp%%/*}")"
    hub:debug "userId: $userId, ${tmp%%/*}"
    ___x_cmd_http get "https://hub-public.oss-cn-heyuan.aliyuncs.com/${userId}/${respath#*/}" 2>/dev/null || {
        local res
        if ! res=$(___x_cmd_hub___util_curl get /api/v0/file/cat "res=${respath}"); then
            ___x_cmd_hub___util_handle_resp false "$res" "Please check the respath."
            return 1
        fi
        printf "%s\n" "$res"
    }
}

___x_cmd_hub_file_upload(){
    param:dsl<<A
advise:
    #1    ___x_cmd_advise__file
option:
    #1    "local  path"        <>
    #2    "remote path"
A
    param:run

    local localfp="${1:?Provide local file}"
    local respath="${2}"

    # TODO: Should be review to optimize.
    local res
    if [ -d "$localfp" ]; then
        local filename; local remotefp
        [ -n "$respath" ] || respath="${localfp%/}" && respath="${respath##*/}/"
        # TODO: Use one request to upload
        find "${localfp%/}"/* -type f | while IFS= read -r f; do
            filename="$(basename "$f")"
            remotefp="$(___x_cmd_hub_file_normalize_respath "${respath%/}/$filename")"
            if res="$(___x_cmd_hub___util_send_file "$f" "$remotefp")" ; then
                ___x_cmd_hub___util_handle_resp true "$res" "Upload $f to $remotefp"
            else
                ___x_cmd_hub___util_handle_resp false "$res" "Failed to upload $f to $remotefp"
                return 1
            fi
        done

    elif [ -f "$localfp" ]; then
        local filename ; filename="$(basename "$localfp")"
        [ -n "$respath" ] || respath="/$filename"
        local remotefp="$respath"; [ "${respath%/}" = "$respath" ] ||  remotefp="$respath$filename"
        remotefp="$(___x_cmd_hub_file_normalize_respath "$remotefp")"
        if res="$(___x_cmd_hub___util_send_file "$localfp" "$remotefp")" ; then
            ___x_cmd_hub___util_handle_resp true "$res" "Upload $localfp to $remotefp"
        else
            ___x_cmd_hub___util_handle_resp false "$res" "Failed to upload $localfp to $remotefp"
            return 1
        fi
    else
        ___x_cmd_ui_tf false "Not a file or dir: $localfp" >&2
        return 1
    fi
}

___x_cmd_hub_file_upload_dist(){
    param:dsl<<A
advise:
    #1    ___x_cmd_advise__file
option:
    #1    "local  path"
    #2    "remote path"
A
    param:run

    local localfp="${1:?Provide local file}"
    local respath="${2:?provide respath}"

    x wx pkg "$localfp" ___x_cmd_hub_tmp.wx || {
        ___x_cmd_ui_tf false "Failed to wx pkg: $localfp" >&2
        return 1
    }

    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local res
    if ! res=$(___x_cmd_hub___util_send_file ___x_cmd_hub_tmp.wx "$respath"); then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to upload $localfp to $respath"
        rm -rf ___x_cmd_hub_tmp.wx
        return 1
    fi

    ___x_cmd_hub___util_handle_resp true "$res" "Success to upload $localfp to $respath"
    rm -rf ___x_cmd_hub_tmp.wx
}

# EndSection
