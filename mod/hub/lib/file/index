# shellcheck shell=dash

xrc:mod:lib hub file/encrypt file/put file/cat file/list file/parse file/link file/which file/rm file/download

# Section(util): normalize_respath

___x_cmd_hub_file_normalize_respath(){
    local respath="${1}"
    case "$respath" in
        me:*|i:/*|:*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "$respath" ;;
        *:*)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "$respath" ;;
        *)
            ___X_CMD_WHICH_ONE_RESOURCE_TYPE=hub
            printf "%s" "me:${respath}" ;;
    esac
}

# EndSection

___x_cmd_hub_file(){
    local X_help_cmd='___x_cmd_hub___help file'
    help:arg-null:parse

    local op="$1"
    case "$op" in
        ls|put|eput|cat|download|which|rm|link|put_dist) shift
            "___x_cmd_hub_file_$op" "$@"                         ;;
        *) ___x_cmd_hub___util_subcmd_invalid "file" "$@"       ;;
    esac
}

# Section(put_dist): freeze

___x_cmd_hub_file_put_dist(){
    local X_help_cmd='___x_cmd_hub___help file put_dist'
    help:arg-null:parse

    local localfp="${1:?Provide local file}"
    local respath="${2:?provide respath}"

    x wx pkg "$localfp" ___x_cmd_hub_tmp.wx || {
        ___x_cmd_ui_tf false "Failed to wx pkg $localfp: " >&2
        return 1
    }

    respath="$(___x_cmd_hub_file_normalize_respath "$respath")"

    local res
    if ! res=$(___x_cmd_hub___util_curl put /api/v0/file -F "file=@___x_cmd_hub_tmp.wx" "res=$respath"); then
        ___x_cmd_hub___util_handle_resp false "$res" "Failed to put $localfp to $respath :"
        rm -rf ___x_cmd_hub_tmp.wx
        return 1
    fi

    ___x_cmd_hub___util_handle_resp true "$res" "Success to put $localfp to $respath :"
    rm -rf ___x_cmd_hub_tmp.wx
}

# EndSection
