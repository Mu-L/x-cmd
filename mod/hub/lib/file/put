# shellcheck shell=dash

# TODO: support multiple file put and put dir
___x_cmd_hub_file_put(){
    local X_help_cmd='___x_cmd_hub___help file put'
    help:arg-null:parse

    local public; local force
    while [ $# -gt 0 ] ; do
        case "$1" in
            --public|-p)     public=true; shift ;;
            --force|-f)      force=true;  shift ;;
            *) break ;;
        esac
    done

    local localfp="$1"; ___x_cmd_hub_file___check_localfp "$localfp" || return 1
    local remotefp;     remotefp="$(___x_cmd_hub_file___remotefp "$localfp" "$2")"
    hub:debug "localfp=$localfp, remotefp=$remotefp"

    ___x_cmd_hub_file___upload_file "$localfp" "$remotefp" "$force" || return 1
    [ -z "$public" ] || ___x_cmd_hub_access___set_public "$remotefp"
}

___x_cmd_hub_file_eput(){
    local X_help_cmd='___x_cmd_hub___help file eput'
    help:arg-null:parse

    local force
    case "$1" in
        --force|-f)      force=true; shift ;;
    esac

    local localfp="$1" ; ___x_cmd_hub_file___check_localfp "$localfp" || return 1
    local remotefp;      remotefp="$(___x_cmd_hub_file___remotefp "$localfp" "$2")"
    hub:debug "localfp=$localfp, remotefp=$remotefp"

    ___X_CMD_HUB_ENC=1 ___x_cmd_hub_file___upload_file "$localfp" "$remotefp" "$force" || return 1
}

___x_cmd_hub_file___upload_file(){
    local localfp="$1";  [ -n "$localfp" ]  || M='Provide local file path'  N=hub log:ret:64
    local remotefp="$2"; [ -n "$remotefp" ] || M='Provide remote file path' N=hub log:ret:64
    local force="$3"

    local filekey_path
    [ -z "${___X_CMD_HUB_ENC}" ] || {
        # Generate filekey and encrypt file
        filekey_path="$(___x_cmd_hub_u_remote2localfp datakey "$remotefp")" || return 1
        ___x_cmd_hub_file___gen_filekey "$filekey_path" || return 1
    }

    ___x_cmd_hub_u_curl get "/api/v0/file/upload/url?res=$(x url encode "$remotefp")&force=${force}" \
        ${___X_CMD_HUB_ENC+"-H"} ${___X_CMD_HUB_ENC+"Encryption-filekey-base64: $(___x_cmd_hub_file___get_current_encrypt_filekey "$filekey_path")"}  | {
        local url; local msg
        x jo env . .url .msg
        [ -n "$url" ] || {
            ___x_cmd_hub_u_handle_resp false "Failed to put $localfp to $remotefp:"
            return 1
        }

        hub:debug "Upload $url"
        <"$localfp" ___x_cmd_hub_file___encrypt_file "$filekey_path" \
            | x curl -X PUT -sSL "$url"  -H "Content-Type: application/octet-stream" --data-binary @- || {
            ___x_cmd_ui_tf false "Failed to put $localfp to $remotefp" >&2
            return 1
        }

        ___x_cmd_hub_u_handle_resp true "Upload $localfp to $remotefp:"
    }
}

___x_cmd_hub_file___get_current_encrypt_filekey(){
    local filekey_path="$1"; [ -n "$filekey_path" ] || M='Provide filekey path' N=hub log:ret:64

    local x_ ; ___x_cmd_hub_keypair get_key_path_ "$___X_CMD_HUB_KEYPAIR_NAME" public || return 1
    < "$filekey_path" ___x_cmd_hub_file___encrypt_filekey "$x_"  || {
        ___x_cmd_ui_tf false "Failed to encrypt filekey to ${filekey_path}.enc" >&2
        return 1
    }
}

___x_cmd_hub_file___check_localfp(){
    local localfp="$1"
    [ -n "$localfp" ] || M='Provide local file path' N=hub log:ret:64
    [ -f "$localfp" ] || {  ___x_cmd_ui_tf false "$localfp not a file or diractory " >&2 ; return 1; }
}

# aaa             => me:aaa
# aaa    user1:   => user1:aaa
# p/aaa  ccc/     => me:ccc/aaa
# p/aaa  ccc/bbb  => me:ccc/bbb
___x_cmd_hub_file___remotefp(){
    local localfp="$1"
    local remotefp="$2"
    [ -n "$localfp" ] || M='Provide local file path' N=hub log:ret:64

    local filename="${localfp##*/}"
    [ -n "$remotefp" ] || remotefp="$filename"
    if [ "${remotefp%/}" != "$remotefp" ] || [ "${remotefp%":"}" != "$remotefp" ] ; then
        remotefp="${remotefp}${filename}"
    fi
    ___x_cmd_hub_file_normalize_remotefp "$remotefp"
}
