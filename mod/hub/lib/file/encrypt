# shellcheck shell=dash

___x_cmd_hub_file___encrypt_file(){
    local fp="${1:? file path is required}"
    local fp_enc="${2:? file_enc path is required}"
    local filekey_path="${3:? filekey path is required}"
    hub:debug "encrypt file => fp=$fp, fp_enc=$fp_enc, filekey_path=$filekey_path"
    x openssl rand -hex 32 > "$filekey_path" || return 1
    x openssl enc -aes-256-cbc -salt -in "$fp" -out - -pbkdf2 -pass file:"$filekey_path" >> "$fp_enc"
    # TODO: maybe it can use 7z to encrypt file
}

___x_cmd_hub_file___encrypt_filekey(){
    local filekey_path="${1:? file_key path is required}"
    local filekey_enc_path="${2:? file_key_enc path is required}"
    local pubkey_path="${3:? public_key path is required}"
    hub:debug "encrypt filekey => filekey_path=$filekey_path, filekey_enc_path=$filekey_enc_path, pubkey_path=$pubkey_path"
    x openssl pkeyutl -encrypt -pubin -inkey "$pubkey_path" -in "$filekey_path" -out "$filekey_enc_path"
}

___x_cmd_hub_file___decrypt_file(){
    local fp_enc="${1:? file_enc path is required}"
    local fp="${2:? file path is required}"
    local filekey_path="${3:? filekey path is required}"
    hub:debug "decrypt file => fp_enc=$fp_enc, fp=$fp, filekey_path=$filekey_path"
    x openssl enc -d -aes-256-cbc -in "$fp_enc"  -pbkdf2 -out "$fp" -pass file:"$filekey_path"
}

___x_cmd_hub_file___decrypt_filekey(){
    local filekey_enc_path="${1:? file_key_enc path is required}"
    local filekey_path="${2:? file_key path is required}"
    local privkey_path="${3:? private_key path is required}"
    hub:debug "decrypt filekey => filekey_enc_path=$filekey_enc_path, filekey_path=$filekey_path, privkey_path=$privkey_path"
    x openssl pkeyutl -decrypt -inkey "$privkey_path" -in "$filekey_enc_path" -out "$filekey_path"
}
