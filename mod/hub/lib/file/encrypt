# shellcheck shell=dash

___x_cmd_hub_file___encrypt_file(){
    local filekey_path="$1"
    if [ -z "$filekey_path" ]; then
        printf "%s\n\n" "compress: xz"
        ___x_cmd_hub_file___xz
    else
        hub:debug "encrypt file => filekey_path=$filekey_path"
        printf "%s\n%s\n\n" "compress: xz" "keyname: $___X_CMD_HUB_KEYPAIR_NAME"
        ___x_cmd_hub_file___xz | x openssl enc -aes-256-cbc -salt -in - -out - -pbkdf2 -pass pass:"$(cat "$filekey_path")"
    fi
}

___x_cmd_hub_file___gen_filekey(){
    local filekey_path="$1"; [ -n "$filekey_path" ] || M='filekey path is required' N=hub log:ret:64
    x openssl rand -hex 32 > "$filekey_path"
}

___x_cmd_hub_file___decrypt_file(){
    local filekey_path="$1"
    [ -n "$filekey_path" ] || M='filekey path is required' N=hub log:ret:64
    hub:debug "decrypt file => filekey_path=$filekey_path"
    x openssl enc -d -aes-256-cbc -in -  -pbkdf2 -out - -pass pass:"$(cat "$filekey_path")"
}

___x_cmd_hub_file___encrypt_filekey(){
    local keypath="$1"
    [ -n "$keypath" ] || M='keypath is required' N=hub log:ret:64
    # maybe some problem at pkg, if use pkg at one pipeline, it will cause error
    # TODO: oneline output use openssl
    x openssl pkeyutl -encrypt -pubin -inkey "$keypath" -in - -out - | x openssl enc -A -base64
}

___x_cmd_hub_file___decrypt_filekey(){
    local keypath="$1"
    [ -n "$keypath" ] || M='keypath is required' N=hub log:ret:64
    x openssl enc -d -A -base64 | x openssl pkeyutl -decrypt -inkey "$keypath" -in - -out -
}
