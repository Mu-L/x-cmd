# shellcheck    shell=dash disable=SC2034    # xrc

# ___x_cmd_pkg_remove --sphere <sphere name> --sphereroot <sphere root path> --osarch <osarch> <pkg> <version>
# ___x_cmd_pkg_sphere_remove(){
#     pkg:trace pkg/remove
#     pkg:sphere:parse:args
#     pkg:debug \
#         --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
#         --name "$name" --version "$version" --osarch "$osarch" remove

#     pkg:info "Removing $name $version"

#     x fslock run "pkg_sphere_${sphere_name}_${name}_${version}_${osarch}" \
#         ___x_cmd_pkg_sphere_gc_remove___populate "$name" "$version" "$osarch" || return

#     x fslock run "pkg_${name}_${version}_${osarch}" \
#         ___x_cmd_pkg_sphere_gc_remove___ball "$name" "$version" "$osarch" || return

# }

___x_cmd_pkg_sphere_gc_remove___populate(){
    pkg:sphere:parse:args

    local x_treename=; ___x_cmd_pkg_treename_ "$name" "$version" "$osarch" || return
    local tgt="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/$x_treename/$name/$version"

    pkg:info "Trying to remove $x_treename $name $version"
    if ! [ -d "$tgt" ];then
        ___x_cmd_pkg_sphere_depend_file rm      --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version" || return
        pkg:warn "This $name $version is no exist in local."
    else
        command chmod -R 700 "$tgt" >/dev/null 2>&1
        ___x_cmd_pkg_sphere_depend_file rm      --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version" || return
        ___x_cmd_pkg_sphere_xbin_remove_cache   --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version" || return
        x rmrf "$tgt"

        # ___x_cmd_pkg_sphere_depend_remove       --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" --osarch "$osarch" "$name" "$version" || return

        local tgt_folder=${tgt%/*}
        [ ! -d "$tgt_folder" ] || ! x fsiter --dirempty --folder "$tgt_folder" || x rmrf "$tgt_folder"
    fi
}

___x_cmd_pkg_sphere_gc_remove___ball(){
    local name="$1";        [ -n "$name" ]      || N=pkg M="Provide a package name"     log:ret:64
    local version="$2";     [ -n "$version" ]   || N=pkg M="Not found $name version"    log:ret:64
    local osarch="$3";      [ -n "$osarch" ]    || N=pkg M="Provide osarch value"

    local download_file_ext=
    local os="${osarch%/*}";  local arch="${osarch#*/}"
    ___x_cmd_pkg___attr "$name" "$version" "$osarch" "download_file_ext" || return
    local dir="$___X_CMD_PKG_DOWNLOAD_PATH/$name"
    local ball="$dir/${version}_${os}_${arch}.${download_file_ext}"
    pkg:info "Trying to remove $ball"
    [ ! -f "$ball" ] || x rmrf "$ball" || M="Remove $ball failed" N=pkg log:ret:1
    [ ! -d "$dir" ] || ! x fsiter --dirempty "$dir" || x rmrf "$dir"
}


___x_cmd_pkg_sphere_gc_remove___main(){

    # This is for user interaction
    # if ___x_cmd_pkg_sphere_gc_islinked_ "$pkg"; then
    #     pkg:info "Fail to remove because it is inside linked"
    #     return 1
    # fi

    # if ___x_cmd_pkg_sphere_gc_is_inside_safelist "$pkg"; then
    #     pkg:info "Fail to remove because it is inside safelist"
    #     return 1
    # fi

    ___x_cmd_pkg_sphere_gc_remove___silent \
        --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
        --osarch "$osarch" "$name" "$version" "$gcfp"
}



___x_cmd_pkg_sphere_gc_remove___silent(){
    pkg:sphere:parse:option
    local x_=
    local name="$1";
            [ -n "$name" ]      || N=pkg M="Provide a package name"     log:ret:1
    local version="$2";
            [ -n "$version" ]   || {
            x_=; ___x_cmd_pkg_default_version_ "$name" "$osarch"            || return
            version="$x_";
    }

    local gcfp="$3";
            [ -f "$gcfp" ]      || N=pkg M="Not found gc start file"    log:ret:1

    [ -n "$sphere_name" ]       || {
            ___x_cmd_pkg___attr "$name" "$version" "$osarch" "sphere_name"  || return
            sphere_name="${sphere_name:-"X"}"
    }

    # Noitce: you should never
    local fslock_name="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/$osarch/$name/$version"
    (
        x fslock wait_acquire "$fslock_name" || return

        x_=; ___x_cmd_pkg_sphere_lastaddts get_ \
            --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE"                \
            --osarch "$osarch" "$name" "$version" || return

        [ "$gcfp" -nt "$x_" ] || {
            pkg:info "The last added time of $osarch $name $version is newer than gc start time"
            return 1
        }

        if ___x_cmd_pkg_sphere_link exist   \
                --sphere "$sphere_name"                     \
                --sphereroot "$___X_CMD_PKG_ROOT_SPHERE"    \
                --osarch "$osarch" "$name" "$version"; then
            pkg:info "Fail to remove because it is inside linked"
            return 1
        fi

        if ___x_cmd_pkg_sphere_safelist exist   \
                --sphere "$sphere_name"                     \
                --sphereroot "$___X_CMD_PKG_ROOT_SPHERE"    \
                --osarch "$osarch" "${name}=${version}"; then
            pkg:info "Fail to remove because it is inside safelist"
            return 1
        fi

        if ___x_cmd_pkg_sphere_depend_file exist    \
                --sphere "$sphere_name"                     \
                --sphereroot "$___X_CMD_PKG_ROOT_SPHERE"    \
                --osarch "$osarch" "$name" "$version"; then
            pkg:info "Fail to remove because it is depeneded"
            return 1
        fi

        # TODO: just remove package
        ___x_cmd_pkg_sphere_gc_remove___populate    \
                --sphere "$sphere_name"                     \
                --sphereroot "$___X_CMD_PKG_ROOT_SPHERE"    \
                --osarch "$osarch" "$name" "$version" || return

        x fslock release "$fslock_name"
    ) || {
        x fslock release "$fslock_name"
        return 1
    }

    x fslock run "pkg_${name}_${version}_${osarch}" ___x_cmd_pkg_sphere_gc_remove___ball "$name" "$version" "$osarch"
}

