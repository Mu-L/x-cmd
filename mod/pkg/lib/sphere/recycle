# shellcheck    shell=dash

___x_cmd_pkg_recycle(){
    sphere:parse:args
    ___x_cmd_pkg_sphere_recycle --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" "$name" "$version"
}


# ___x_cmd_pkg_sphere_recycle  --sphere X <pkg name> <version>
___x_cmd_pkg_sphere_recycle(){
    sphere:parse:option
    sphere_name="${sphere_name:-"X"}"

    local name="$1";        [ -n "$name" ] || N=pkg M="Provide a package name" log:ret:1
    local version="$2";     [ -n "$version" ] || N=pkg M="Not found $name version" log:ret:1
    shift 2

    # ensure the package unlinked ?
    # ensure the package undepeneded ?
    # ensure the package not in the safelist

    pkg:debug --pkg "${name}" --version "$version" --sphere_path "$___X_CMD_PKG_ROOT_SPHERE/$sphere_name" recycle

    pkg:debug "Check the package safelist"
    ! ___x_cmd_pkg_sphere_safelist --sphere "$sphere_name" exist "${name}_${version}" || return
    pkg:debug "Check the package bin dir"
    ! ___x_cmd_pkg_sphere_link     --sphere "$sphere_name" exist "$name" "$version" || return
    pkg:debug "Check whether the package is dependent"
    ! ___x_cmd_pkg_sphere_recycle___is_dependency "$sphere_name" "$name" "$version" || return
    pkg:debug "The package can be recycled"

    return 0
}

___x_cmd_pkg_sphere_recycle___is_dependency(){
    local sphere_name="$1"
    local name="${2}=${3}"
    local dependency_dir="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/.x-cmd/dependency"
    local line=; local file=;

    [ -d "$dependency_dir" ] || return 1
    while read -r file; do
        file="$dependency_dir/$file"
        [ -f "$file" ] || continue
        while read -r line; do
            [ -n "$line" ] || continue
            [ "${line}" = "${name}" ] || continue
            return 0
        done < "$file"
    done <<A
$( x fsiter "$dependency_dir" )
A
    return 1
}
