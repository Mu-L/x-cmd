# shellcheck shell=dash

# add: link a package to sphere
# rm:
___x_cmd_pkg_link() {
    local X_help_cmd='___x_cmd_pkg_help link';   help:arg-null:parse
    sphere:parse:args
    ___x_cmd_pkg_sphere_link --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" add "$name" "$version" "$osarch"
}

___x_cmd_pkg_unlink(){
    local X_help_cmd='___x_cmd_pkg_help unlink';   help:arg-null:parse
    sphere:parse:args
    ___x_cmd_pkg_sphere_link --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" rm "$name" "$version" "$osarch"
}


# x pkg sphere link --name X rm <pkg> <version>
___x_cmd_pkg_sphere_link(){
    sphere:parse:option
    sphere_name="${sphere_name:-"X"}"

    local op="$1";  shift
    case "$op" in
        exist)      ___x_cmd_pkg_sphere_link_exist "$@"     ;;
        rm|add)     x fslock run "pkg_sphere_link_${sphere_name}_${1}_${2}" \
                        ___x_cmd_pkg_sphere_link_"$op" "$@" ;;
        *)          N=pkg M="sphere link no such option '$op'" log:ret:1
                    ;;
    esac
}


___x_cmd_pkg_sphere_link_add(){
    local name="$1";        [ -n "$name" ] || N=pkg M="Provide a package name" log:ret:1
    local version="$2";     [ -n "$version" ] || N=pkg M="Not found $name version" log:ret:1
    local osarch="$3";      [ -n "$osarch" ] || N=pkg M="Not found osarch value" log:ret:1

    local x_treename=; ___x_cmd_pkg_treename_ "$name" "$version" "$osarch" || return
    pkg:debug --sphere_path "$___X_CMD_PKG_ROOT_SPHERE/$sphere_name" --pkg "$name" --version "$version" "link add"
    local target_dir="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/l/j/h/bin"
    local tgt="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/$x_treename/$name/$version"
    local link_dir="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/.x-cmd/link_record"
    local link_file="$link_dir/${name}_${version}"
    [ ! -f "$link_file" ] || return 0
    x ensurefp "$link_file"

    local target=; local bin_file
    ___x_cmd_pkg_sphere_link___list_all_bin_path "$name" "$version" "$osarch" "$tgt" | while read -r bin_file; do
        [ -n "$bin_file" ] || continue
        [ -f "$bin_file" ] || {
            pkg:error "Not found $bin_file for $name $version bin link"
            return 1
        }

        target="$target_dir/${bin_file##*/}"
        pkg:debug "linking source=$bin_file target=$target"

        command ln -s -f "$bin_file" "$target" || N=pkg M="ln - Operation failure source=$bin_file target=$target" log:ret:1
        printf "%s\n" "$target" >> "$link_file"
    done || return


    ___x_cmd_path_add_existed_folder "$target_dir" || return
    pkg:info "Successfully set link from path"
}

___x_cmd_pkg_sphere_link_rm(){
    local name="$1";    local version="$2";
    shift 2

    pkg:debug --sphere_path "$___X_CMD_PKG_ROOT_SPHERE/$sphere_name" --pkg "$name" --version "$version" "link rm"
    local link_dir="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/.x-cmd/link_record"
    local link_file="$link_dir/${name}_${version}"
    [ -f "$link_file" ] || return 0

    local target
    while read -r target;do
        [ -f "$target" ] || continue
        pkg:debug "unlink path => $target"
        x rmrf "$target"
    done < "$link_file"

    x rmrf "$link_file"
}

___x_cmd_pkg_sphere_link_exist(){
    local name="$1";    local version="$2";
    shift 2

    local link_dir="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/.x-cmd/link_record"
    local link_file="$link_dir/${name}_${version}"
    [ -f "$link_file" ]
}

___x_cmd_pkg_sphere_link___list_all_bin_path() {
    local name="$1";    local version="$2";    local osarch="$3";   local tgt="$4"

    # TIP: use default osarch
    local bin_dir; local bin_name
    ___x_cmd_pkg___list "$name" "$version" "$osarch" "path.bin" | while read -r bin_dir; do
        [ -n "$bin_dir" ] || continue
        bin_dir="$tgt/$bin_dir"

        if [ -d "$bin_dir" ]; then
            x fsiter "$bin_dir" | while read -r bin_name; do
                [ -n "$bin_name" ] || continue
                [ -f "$bin_dir/$bin_name" ] || continue
                printf "%s\n" "$bin_dir/$bin_name"
            done
        else
            printf "%s\n" "$bin_dir"
        fi
    done
}

