# shellcheck    shell=dash

___x_cmd_pkg_runtime(){
    [ $# -gt 0 ] || set -- -h

    local op="$1";  shift
    case "$op" in
        install|which|exec|envload)
            ___x_cmd_pkg_runtime_"$op" "$@"
            ;;
    esac
}

___x_cmd_pkg_runtime_install(){
    local pkg_name="${1}"
    local pkg_version="${2}"

    local runtime_populate_path="$___X_CMD_PKG_RUNTIME_POPULATE_PATH/$pkg_name/$pkg_version"
    ! [ -d "$runtime_populate_path" ] || {
        pkg:info "Already installed $pkg_name=$pkg_version => $runtime_populate_path"
        return 0
    }

    pkg:info "Install runtime $pkg_name=$pkg_version => $runtime_populate_path"

    x mkdirp "$___X_CMD_PKG_RUNTIME_POPULATE_PATH" || return
    ___x_cmd_pkg_download "$pkg_name" "$pkg_version" || {
        pkg:error "Failed to download $pkg_name $pkg_version"
        return 1
    }

    ___x_cmd_pkg_populate "$pkg_name" "$pkg_version" "" "$runtime_populate_path" || {
        pkg:error "Failed to populate $pkg_name $pkg_version"
        return 1
    }

    # install python, node, perl
}

# x pkg runtime exec getenv_ python
# x pkg runtime exec getenv_ python=3.12
___x_cmd_pkg_runtime_getenv_(){
    local pkg_version="${1#*=}"
    local pkg_name="${1%=*}"

    pkg:info "Getenv $pkg_name $pkg_version"

    local  runtime_populate_path="$___X_CMD_PKG_RUNTIME_POPULATE_PATH/$pkg_name/$pkg_version"
    ___x_cmd_pkg_addpath "$pkg_name" "$pkg_version" "" "$runtime_populate_path" || {
        pkg:error "Failed to addpath $pkg_name $pkg_version"
        return 1
    }

    # local ___X_CMD_PKG_POPULATE_PATH="$___X_CMD_PKG_RUNTIME_POPULATE_PATH"
    ___x_cmd_pkg_boot "$pkg_name" "$pkg_version" || {
        pkg:error "Failed to boot $pkg_name $pkg_version"
        return 1
    }
}

___x_cmd_pkg_runtime_envload(){
    # local x_=
    ___x_cmd_pkg_runtime_getenv_ "$@" || return
    # eval "$x_"
}

# x pkg runtime exec python=3.10 -- python
# TODO: need to review
___x_cmd_pkg_runtime_exec(){
(
    local code="___x_cmd_pkg_runtime_envload"
    while [ $# -gt 0 ]; do
        case "$1" in
            --) shift; break ; shift ;;
            *)  code="$code $1"; shift ;;
        esac
    done

    pkg:info "Exec $code"
    eval "$code" || {
        pkg:error "Failed to exec $code"
        return 1
    }
    [ $# -eq 0 ] || "$@" || {
        pkg:error "Failed to exec $*"
        return 1
    }
     #TODO: How to execute python command without subshell
)
}

___x_cmd_pkg_runtime_which(){
    :
}

# aws(){
#     . "$___X_CMD_PKG_BOOT_PATH/python";
#     . "$___X_CMD_PKG_BOOT_PATH/aws";
#     command aws "$@"
# }

# aws "$@"
