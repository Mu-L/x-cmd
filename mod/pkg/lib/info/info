# shellcheck    shell=dash disable=SC2034
xrc:mod:lib pkg     sphere/xbin

___x_cmd_pkg_info(){
    local name="$1";     [ -n "$name" ]   || N=pkg M="Provide a package name" log:ret:1

    local osarch="$3";   [ -n "$osarch" ] || {
        ___x_cmd_pkg_osarch_ || return 1
        osarch="$___X_CMD_PKG_OSARCH"
    }

    local version="$2"; [ -n "$version" ] || {
        local x_=""; ___x_cmd_pkg_default_version_ "$name" "$osarch" || return
        [ -n "$x_" ] || N=pkg M="Not found $name version" log:ret:1
        version="$x_"
    }

    local pkg_real_name=
    pkg_real_name="$( ___x_cmd_pkg_locate "$name" )"

    [ -n "$pkg_real_name" ] || {
        local x_=; ___x_cmd_pkg_sphere_xbin_get_binmod_name_ "$name" 2>/dev/null
        [ -z "$x_" ] || pkg_real_name="$( ___x_cmd_pkg_locate "$x_" )"
    }

    # TODO: If there is not such package, search the binary provided and return the package name.
    [ -n "$pkg_real_name" ] || {

        pkg_real_name="$( ___x_cmd_pkg___recorrect_name "$name" )" ||  N=pkg M="Not found $name" log:ret:1

        if [ -t 1 ] && ___x_cmd_is_interactive; then
            pkg_real_name="$(printf "%s" "$pkg_real_name" | x pick --ask "Not found $name. Do you mean the following pkg?" --row 6)"
        else
             N=pkg M="Not found $name" log:ret:1
        fi

        [ -n "$pkg_real_name" ] ||  N=pkg M="Not found $1" log:ret:1
        pkg_real_name="$( ___x_cmd_pkg_locate "$pkg_real_name" )"

    }

    local filepath="${___X_CMD_PKG_METADATA_PATH}/${pkg_real_name}/info.tt.json"

    [ -f "$filepath" ] || N=pkg M="Not found file: $filepath" log:ret:1

    < "$filepath" x cawk  \
        -E version,osarch,___X_CMD_WEBSRC_REGION,pkg_real_name \
        -m j/json,j/jiter,j/jcp   \
        -f "${___X_CMD_ROOT_MOD}/pkg/lib/awk/info.awk" | \
        x j2y
}

