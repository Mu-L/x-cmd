# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,2012    # xrc

# ls app, default app
___x_cmd_pkg_ls(){
    case "$1" in
        i|installed)      shift;  ___x_cmd_pkg_ls_installed "$@" ;;
        a|activated)      shift;  ___x_cmd_pkg_ls_activated "$@" ;;
        A|all)            shift;  ___x_cmd_pkg_ls_all "$@" ;;
        xbin)             shift;  ___x_cmd_pkg_ls_xbin "$@" ;;
        -h|--help)
            ___x_cmd_pkg_help ls "$@"
            return 1
            ;;
        *)                ___x_cmd_pkg_ls___installed "$@" ;;
    esac
}

___x_cmd_pkg_ls_xbin(){
    <"$___X_CMD_PKG_RAW_PATH/binmod.txt" awk -v FS=":" '{ if($2 != ""){ print $2 }}'
}

# Invoked pkg ls installed
# TODO: efficiency defect
___x_cmd_pkg_ls___installed()(
    [ -d "$___X_CMD_PKG_POPULATE_PATH" ] || return 0
    [ "$(ls "$___X_CMD_PKG_POPULATE_PATH" | wc -l )" -gt 0 ] || return 0
    local osarch
    local locate_list
    osarch="$(___x_cmd_pkg_osarch)"
    locate_list="$(___x_cmd_pkg_ll)"
    (
        cd "$___X_CMD_PKG_POPULATE_PATH" || return
        for i in */*; do
            printf "%s\n" "$i";
        done
    ) | awk -v FS="/" \
        -v OSARCH="$osarch" \
        -v LOCAL_LIST="$locate_list" \
        -v PKG_RAWPATH="$___X_CMD_PKG_RAW_PATH" \
        -v TH_THEME_COLOR="\\033[${___X_CMD_THEME_COLOR_CODE}m" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"  \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.ls.awk"
)

___x_cmd_pkg_ls_installed(){
    local name="$1"
    if  [ -n "$name" ]; then
        ___x_cmd_pkg_ls___installed | awk -v name="$name" '
        {
            candidatelen = split(name,candidate," ")
             for(i = 1; i <= candidatelen; ++i ){
                 if(match($0,candidate[i])){print $0}
             }
        }'
    else
        ___x_cmd_pkg_ls___installed
    fi
}

# Invoked pkg ls activated: check environment variable...
___x_cmd_pkg_ls_activated(){
    [ -n "$___X_CMD_PKG_ACTIVATE___LIST" ] || return
    local _line
    local osarch
    local locate_list
    osarch="$(___x_cmd_pkg_osarch)"
    locate_list="$(___x_cmd_pkg_ll)"
    awk -v FS="=" \
        -v OSARCH="$osarch" \
        -v LOCAL_LIST="$locate_list" \
        -v PKG_RAWPATH="$___X_CMD_PKG_RAW_PATH" \
        -v TH_THEME_COLOR="\\033[${___X_CMD_THEME_COLOR_CODE}m" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.ls.awk" <<A
${___X_CMD_PKG_ACTIVATE___LIST}
A
}

___x_cmd_pkg_ls_all(){
    if ! [ -d "$___X_CMD_PKG_RAW_PATH" ]; then return 0; fi
    local pkg_name="${1:?Provide package name}"
    local osarch="${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}"

    # TODO: avoid to use find and subshell
    local json_path
    if ! json_path="$(find "$___X_CMD_PKG_RAW_PATH"/*/"$pkg_name/version.tt.json")"; then
        pkg:error "Can not find $pkg_name 's version.tt.json"
        return 1
    fi

    x ja 'O[2]=="\"'"$osarch"'\""{
        cur_version = juq(O[1])
        if ( juq(O[1]) != last_version) print cur_version
        last_version = cur_version
    }' <"$json_path"
}

# ___x_cmd_pkg_ls___all_candidate(){
#     # TODO: Use find to avoid awk
#     ls "$___X_CMD_PKG_RAW_PATH"/*/ | awk '{if(($0 != "") && (! match($0, /^\/[..]*/))){print $0}}'
# }

___x_cmd_pkg_ls___all_candidate()(
    cd "$___X_CMD_PKG_RAW_PATH" || {
        pkg:error Can not found dir: "$___X_CMD_PKG_RAW_PATH"
        return 1
    }
    for dir in *; do
        case "$dir" in
            binmod*)   continue ;;
        esac
        cd "$___X_CMD_PKG_RAW_PATH/$dir" || continue
        for candidate in *; do
            printf "%s\n" $candidate
        done
    done
)