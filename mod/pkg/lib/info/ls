# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,2012    # xrc

# ls app, default app
___x_cmd_pkg_ls(){
    case "$1" in
        d|downloaded)   shift;  ___x_cmd_pkg_ls_downloaded "$@" ;;
        A|all)          shift;  ___x_cmd_pkg_ls_all "$@" ;;
        xbin)           shift;  ___x_cmd_pkg_ls_xbin "$@" ;;
        i|install)      shift;  ___x_cmd_pkg_ls_installed  "$@"   ;;
        -h|--help)      M='pkg ls ' help:ret:0  ;;
        *)              ___x_cmd_pkg_ls_installed "$@" ;;
    esac
}

___x_cmd_pkg_ls_downloaded(){
    local X_help_cmd='___x_cmd_pkg_help ls d'
    help:arg:parse
    [ -d "$___X_CMD_PKG_DOWNLOAD_PATH" ] || return 0
    [ "$(x ls "$___X_CMD_PKG_DOWNLOAD_PATH" | wc -l )" -gt 0 ] || return 0

    if [ "$#" -gt 0 ]; then
        [ -d "$___X_CMD_PKG_DOWNLOAD_PATH/$1" ] || {
            pkg:error "Not found $1 in your download path"
            return 1
        }
        x ls "$___X_CMD_PKG_DOWNLOAD_PATH/$1"
    else
        x ls "$___X_CMD_PKG_DOWNLOAD_PATH"
    fi
}


___x_cmd_pkg_ls_xbin(){
    local X_help_cmd='___x_cmd_pkg_help ls xbin'
    help:arg:parse
    <"$___X_CMD_PKG_METADATA_PATH/binmod.txt" awk -v FS=":" '{ if($2 != ""){ print $2 }}'
}

# Invoked pkg ls installed
# TODO: efficiency defect
___x_cmd_pkg_ls_installed(){
    if ! ___x_cmd_is_interactive; then
        ___x_cmd_pkg_ls___installed_inner
    else
        ___x_cmd_pkg_osarch_
        local locate_list; locate_list="$(___x_cmd_pkg_ll_inner)"
        ___x_cmd_pkg_ls___installed_inner | LC_ALL="$___X_CMD_AWK_LANGUAGE_UTF8" \
            command awk -v FS="/" \
            -v OSARCH="$___X_CMD_PKG_OSARCH" \
            -v LOCAL_LIST="$locate_list" \
            -v PKG_RAWPATH="$___X_CMD_PKG_METADATA_PATH" \
            -v TH_THEME_COLOR="\\033[${___X_CMD_THEME_COLOR_CODE}m" \
            -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
            -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"  \
            -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
            -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
            -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.ls.awk"
    fi
}

___x_cmd_pkg_ls___installed_inner(){
    (
        cd "${___X_CMD_PKG_ROOT_SPHERE}" || return 1
        local i; for i in */*/*/*; do
            { [ "$i" != "${i#*"/tree."}" ] && [ -d "$i" ]; } || continue
            printf "%s\n" "${i#*/*/}"
        done 2>/dev/null
    )
}

___x_cmd_pkg_ls_all(){
    local X_help_cmd='___x_cmd_pkg_help ls all'
    help:arg:parse

    if ! [ -d "$___X_CMD_PKG_METADATA_PATH" ]; then return 0; fi
    local pkg_name="${1}"
    [ -n "$pkg_name" ] || M='Provide a package name' N=pkg log:ret:1

    local osarch="${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}"

    # TODO: avoid to use find and subshell
    local json_path
    if ! json_path="$(find "$___X_CMD_PKG_METADATA_PATH"/*/"$pkg_name/version.tt.json")"; then
        pkg:error "Can not find $pkg_name 's version.tt.json"
        return 1
    fi

    x ja 'O[2]=="\"'"$osarch"'\""{
        cur_version = juq(O[1])
        if ( juq(O[1]) != last_version) print cur_version
        last_version = cur_version
    }' <"$json_path"
}

___x_cmd_pkg_ls___all_candidate()(
    x cd "$___X_CMD_PKG_METADATA_PATH" || {
        pkg:error Can not found dir: "$___X_CMD_PKG_METADATA_PATH"
        return 1
    }
    for dir in *; do
        case "$dir" in
            binmod*)   continue ;;
        esac
        x cd "$___X_CMD_PKG_METADATA_PATH/$dir" || continue
        for candidate in *; do
            case "$candidate" in
                bash-preexec) continue ;;
            esac
            printf "%s\n" $candidate
        done
    done
)
