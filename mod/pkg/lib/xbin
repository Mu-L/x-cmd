# shellcheck    shell=sh            disable=SC3043,2155      # xrc

# Section: xbin

___x_cmd_pkg_xbin(){
    x:trace pkg/xbin
    local X_help_cmd='___x_cmd_pkg_help xbin';   help:arg-null:parse
    case "$1" in
        init)       shift; ___x_cmd_pkg_xbin_init "$@" ;;
        path)       shift; ___x_cmd_pkg_xbin_path "$@" ;;
        *)          return 1 ;;
    esac
}

___x_cmd_pkg_xbin_path(){
    local bin_mod_name="${1}"
    [ -n "$bin_mod_name" ] || M='Provide bin mod name' N=pkg log:ret:1
    local pkg_name="$(___x_cmd_pkg___get_binmod_name "$bin_mod_name" )"
    [ -n "$pkg_name" ] || return 1

    local osarch="${3:-$(___x_cmd_pkg_osarch)}"
    local version="${2:-$(___x_cmd_pkg_default_version "${pkg_name}" "${osarch}")}"
    local sphere_name=; local tree=
    ___x_cmd_pkg___attr "$pkg_name" "$version" "$osarch" "sphere_name,tree" || return
    sphere_name="${sphere_name:-"X"}"
    local tgt="$4"
    [ -n "$tgt" ] || {
        local x_treename=; ___x_cmd_pkg_treename_get_form_tree_ "$osarch" "$tree" || return
        tgt="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/$x_treename/$pkg_name/$version"
    }

    [ -n "$version" ] || return

    pkg:debug "INSTALL_PATH => $tgt"

    ___x_cmd_pkg___all_info --non-version "$pkg_name" "$version" "$osarch"  | awk \
        -v INSTALL_PATH="$tgt" \
        -v BIN_MOD_NAME="${bin_mod_name:-$pkg_name}" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.xbin.awk"
}

___x_cmd_pkg_xbin_init(){
    local bin_mod_name="${1:?Provide bin mod name}"
    # ___x_cmd_pkg___which_p7zip 86400 || return
    [ -f "$___X_CMD_PKG_ROOT_PATH/$___X_CMD_PKG_VERSION.tar.gz" ] || ___x_cmd_pkg_update
    local pkg_name="$(___x_cmd_pkg___get_binmod_name "$bin_mod_name" )"
    [ -n "$pkg_name" ] || return 1
    local version="${2:-$(___x_cmd_pkg_default_version "${pkg_name}")}"
    [ -n "$version" ] || return
    local bin_path
    bin_path="$(___x_cmd_pkg_xbin_path "$bin_mod_name" "$version")"
    pkg:debug --bin_mod_name "$bin_mod_name" --package "$pkg_name" --version "$version" --binpath "$bin_path" xbin_init

    [ -f "$bin_path" ] || {
        ___x_cmd_pkg_download "$pkg_name" "$version" || return
        ___x_cmd_pkg_populate "$pkg_name" "$version" || return
    }

    [ -f "$bin_path" ] || N=pkg M="Not found $pkg_name $version bin path" log:ret:1
    command chmod +x "$bin_path" || N=pkg M="chmod $bin_path - Operation not permitted" log:ret:1

    [ "${bin_mod_name}" = "${bin_mod_name#*-}" ] || {
        bin_mod_name="${bin_mod_name%-*}_${bin_mod_name#*-}"
    }
    local bin_mod_func_name="${3:-___x_cmd_${bin_mod_name}}"
    local bin_mod_path_name="${4}"
    eval "
        $bin_mod_func_name(){
            $bin_path \"\$@\"
        }
        if [ -n \"\$bin_mod_path_name\" ]; then
            $bin_mod_path_name=\"$bin_path\"
        fi
    "
    ___x_cmd_pkg_safelist add "${pkg_name}" "${version}"
}

___x_cmd_pkg___get_binmod_name(){
    local bin_mod_name="${1:?Provide bin mod name}"
    if [ -z "$___X_CMD_PKG_BINMOD_MAP" ]; then
        ___X_CMD_PKG_BINMOD_MAP="$(cat "$___X_CMD_PKG_METADATA_PATH/binmod.txt")"
    fi

    local pkg_name="${___X_CMD_PKG_BINMOD_MAP#*:"$bin_mod_name":}"
    if [ "$pkg_name" = "${___X_CMD_PKG_BINMOD_MAP}" ]; then
        pkg:error "Not found - ${bin_mod_name}"
        return 1
    fi

    pkg_name="${pkg_name%%
*}"

    printf "%s" "$pkg_name"
}

### EndSection
