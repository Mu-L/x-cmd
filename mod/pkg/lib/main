# shellcheck    shell=dash disable=SC2034,SC1090
___x_cmd_pkg___which_p7zip()(
    local file_path="$___X_CMD_PKG_ROOT_PATH/$___X_CMD_PKG_VERSION.tar.gz"
    local file_hash_path="$___X_CMD_PKG_ROOT_PATH/${___X_CMD_PKG_VERSION}_hash.txt"
    local tmp_file_path="$___X_CMD_PKG_SHARED/$___X_CMD_PKG_VERSION.tar.gz"
    local tmp_file_hash_path="$___X_CMD_PKG_SHARED/${___X_CMD_PKG_VERSION}_hash.txt"
    local x_url_tar=
    local x_url_hash=

    if [ -n "$___X_CMD_PKG_DEV_MOD" ]; then
        pkg:warn "update inner release ${___X_CMD_PKG_VERSION}.tar.gz"
        x_url_tar="https://github.com/x-cmd-pkg/release/raw/main/dist/${___X_CMD_PKG_VERSION}.tar.gz"
        x_url_hash="https://raw.githubusercontent.com/x-cmd-pkg/release/main/dist/${___X_CMD_PKG_VERSION}_hash.txt"
    elif [ "$___X_CMD_WEBSRC_REGION" != cn ]; then
        x_url_tar="https://github.com/x-cmd/pkg/raw/main/dist/${___X_CMD_PKG_VERSION}.tar.gz"
        x_url_hash="https://raw.githubusercontent.com/x-cmd/pkg/main/dist/${___X_CMD_PKG_VERSION}_hash.txt"
    else
        x_url_tar="https://gitcode.net/x-cmd/pkg/-/raw/main/dist/${___X_CMD_PKG_VERSION}.tar.gz"
        x_url_hash="https://gitcode.net/x-cmd/pkg/-/raw/main/dist/${___X_CMD_PKG_VERSION}_hash.txt"
    fi


    pkg:info --url "$x_url_tar" "Download ${___X_CMD_PKG_VERSION}.tar.gz"
    x curl -L -sS --speed-time 5 --speed-limit 100 "$x_url_tar" --output "$tmp_file_path" || {
        pkg:warn "Please check your network status; Or use 'x websrc set cn' and open a new session to run 'x pkg update'"
        return 1
    }

    pkg:info --url "$x_url_hash" "Download ${___X_CMD_PKG_VERSION}_hash.txt"
    x curl -L -sS --speed-time 5 --speed-limit 100 "$x_url_hash" --output "$tmp_file_hash_path" || {
         pkg:error "Download $___X_CMD_PKG_VERSION.tar.gz failed"
        return 1
    }


    # ___x_cmd_httpget_gitx x-cmd pkg main "dist/${___X_CMD_PKG_VERSION}_hash.txt" "$tmp_file_hash_path" "-" || {
    #     pkg:warn "Please check your network status; Or use 'x websrc set cn' and open a new session to run 'x pkg update'"
    #     return 1
    # }
    # ___x_cmd_httpget_gitx x-cmd pkg main "dist/$___X_CMD_PKG_VERSION.tar.gz" "$tmp_file_path" || { # 1-day
    #     pkg:error "Download $___X_CMD_PKG_VERSION.tar.gz failed"
    #     return 1
    # }


    local hash_value
    local file_hash
    hash_value="$( < "$tmp_file_hash_path" LC_ALL="$___X_CMD_AWK_LANGUAGE" ___x_cmd_awk___inner '{print $1}')"
    file_hash="$(x sha512 "$tmp_file_path")"


    [ "$hash_value" = "$file_hash" ] || {
        pkg:error "File corrupted; Please check your network status; Or use 'x websrc set cn' and open a new session to run 'x pkg update' "
        x rmrf "$tmp_file_path" "$tmp_file_hash_path"
        return 1
    }

    ! [ -d "$___X_CMD_PKG_METADATA_PATH/tmp" ] || {
        x rmrf "$___X_CMD_PKG_SHARED/tmp"
        x mv "$___X_CMD_PKG_METADATA_PATH/tmp" "$___X_CMD_PKG_SHARED"
    }

    x rmrf "$___X_CMD_PKG_ROOT_PATH/$___X_CMD_PKG_VERSION.tar.gz" && x rmrf "$___X_CMD_PKG_METADATA_PATH" && x rmrf "$file_hash_path"

    x cp "$tmp_file_path" "$___X_CMD_PKG_ROOT_PATH/$___X_CMD_PKG_VERSION.tar.gz" && x rmrf "$tmp_file_path"
    x cp "$tmp_file_hash_path" "$file_hash_path" && x rmrf "$tmp_file_path" "$tmp_file_hash_path"

    ___x_cmd_mkdirp "$___X_CMD_PKG_METADATA_PATH"
    pkg:debug --tgt "$___X_CMD_PKG_METADATA_PATH"
    pkg:debug "Deflate the $___X_CMD_PKG_VERSION.tar.gz"
    if ! ( x cd "${file_path%/*}" && x cp "$___X_CMD_PKG_VERSION.tar.gz" metadata/"$___X_CMD_PKG_VERSION.tar.gz" && x cd metadata && x uz "$___X_CMD_PKG_VERSION.tar.gz" 1>/dev/null && x rmrf "$___X_CMD_PKG_VERSION.tar.gz" ); then
        pkg:error "Deflation failure."
        return 1
    fi

    ! [ -d "$___X_CMD_PKG_SHARED/tmp" ] || x mv "$___X_CMD_PKG_SHARED/tmp" "$___X_CMD_PKG_METADATA_PATH"
)


___x_cmd_pkg_update(){
    case "$1" in
        -h|--help)
            M='pkg update' help:ret:0
            ;;
    esac
    # local file_hash_path="$___X_CMD_PKG_ROOT_PATH/${___X_CMD_PKG_VERSION}_hash.txt"
    # x rmrf "$___X_CMD_PKG_ROOT_PATH/$___X_CMD_PKG_VERSION.tar.gz" && x rmrf "$___X_CMD_PKG_METADATA_PATH" && x rmrf "$file_hash_path"
    ___x_cmd_pkg___which_p7zip || {
        pkg:error "Update the $___X_CMD_PKG_VERSION.tar.gz failed"
        return 1 # Force Update
    }
    pkg:info "Update the $___X_CMD_PKG_VERSION.tar.gz success"
}

___x_cmd_pkg_help(){
    x help -m pkg "$@"  >&2
    return 1
}