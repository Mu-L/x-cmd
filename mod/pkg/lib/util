# shellcheck    shell=sh            disable=SC3043      # xrc

# Section: attr
# ___x_cmd_pkg___attr   hook.install,hook.setup
___x_cmd_pkg___attr(){
    eval "$(___x_cmd_pkg___attr_code "$@")"
}

___x_cmd_pkg___attr_code(){
    local QUERY="${4:?Provide pat}"
    ___x_cmd_pkg___all_info "$@" | command awk \
        -v QUERY="$QUERY" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/sh.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.attr.awk"
}
# EndSection

# Section: script
# Get Script Path
___x_cmd_pkg___get_script_path(){
    local script="${4:?Provide sciprt}"

    ___x_cmd_pkg___all_info --non-version "$@" | command awk \
        -v SCRIPT="$script" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.script.awk"
}
# EndSection

# Section: osarch
___x_cmd_pkg_osarch_(){
    x_=
    if [ -z "$___X_CMD_PKG_OSARCH" ]; then
        ___X_CMD_PKG_OSARCH="$(___x_cmd_os name)/$(___x_cmd_os arch)" || return 1
        [ -n "$___X_CMD_PKG_OSARCH" ] || return 1
    fi

    x_="$___X_CMD_PKG_OSARCH"
}

___x_cmd_pkg_osarch(){
    local x_=
    ___x_cmd_pkg_osarch_ || return
    printf "%s\n" "$___X_CMD_PKG_OSARCH"
}
# EndSection

# Section: get raw text from all.7z
___x_cmd_pkg_locate(){
    local tgt="${1:?Provide name}"
    ___x_cmd_pkg_ll_inner | command awk -v FS=/ -v RS="\t" -v tgt="$tgt" '$2==tgt{ TGT=1; print $0 }END{ if(TGT>0){exit(0);}else{exit(1)}}'
}

# Default, China
___x_cmd_pkg___all_info(){
    case "$1" in
        --non-version) local version_json=--non-version; shift ;;
    esac
    if [ -n "$1" ]; then
        local name="$1"
    else
        pkg:error Provide pkg name
        return 1
    fi
    local version="${2:-""}"
    local osarch="${3:-${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}}"

    name="$(___x_cmd_pkg_locate "$name")" || return

    pkg:debug  --name "$name"  --version "$version" --osarch "$osarch"  --___X_CMD_PKG_RAW_PATH "$___X_CMD_PKG_RAW_PATH" --___X_CMD_WEBSRC_REGION "$___X_CMD_WEBSRC_REGION" "all info"
    printf "%s\n%s\n%s\n%s\n%s\n" "$name" "$version" "$osarch" "$___X_CMD_PKG_RAW_PATH" "$___X_CMD_WEBSRC_REGION"

    cat "$___X_CMD_PKG_RAW_PATH/$name/meta.tt.json" || return
    printf "\n"

    if [ -z "$version_json" ]; then
        cat "$___X_CMD_PKG_RAW_PATH/$name/version.tt.json" || return
    else
        printf "\n"
    fi
}
# EndSection

___x_cmd_pkg___list(){
    local expr="${4:?Provide EXPR, like bin, url.cn}"

    ___x_cmd_pkg___all_info "$@" | command awk \
        -v EXPR="$expr" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.list.awk"
}


___x_cmd_pkg_default_version(){

    case "$1" in
        -h|--help)
            ___x_cmd_pkg_help default_version
            return 1
            ;;
    esac

    local name="${1:?Provide pkg name}"
    local osarch="${2:-$(___x_cmd_pkg_osarch)}"

    # ___x_cmd_pkg___which_p7zip 86400 || return
    [ -f "$___X_CMD_PKG_BASE_PATH/$___X_CMD_PKG_VERSION.tar.gz" ] || ___x_cmd_pkg_update
    ___x_cmd_pkg___all_info --non-version "$name" "" "$osarch" | command awk \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.default_version.awk"
}

___x_cmd_pkg___link(){
    local expr="${4:?Provide EXPR, like bin}"

    ___x_cmd_pkg___all_info  --non-version "$@" | command awk \
        -v EXPR="$expr" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.link.awk"
}

___x_cmd_pkg___get_linkenv(){
    local expr="${4:?Provide EXPR, like path}"

    ___x_cmd_pkg___all_info --non-version "$@" | command awk \
        -v EXPR="$expr" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/core.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/json.awk"   \
        -f "$___X_CMD_ROOT_MOD/awk/lib/j/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg._.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.link_content.awk"
}

___x_cmd_pkg___is_support(){
    [ "$#" -eq 1 ] || return
    local i; for i in "$___X_CMD_PKG_RAW_PATH/"*; do
        [ ! -d "$i/$1" ] || return 0
    done
    return 1
}

