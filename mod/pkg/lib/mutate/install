# shellcheck    shell=sh            disable=SC3043,SC1090       # xrc

___x_cmd_pkg_install(){
    x:trace pkg/install

    case "$1" in
        -h|--help)
            ___x_cmd_pkg_help install
            return 1
            ;;
    esac

    local name="${1:?Provide pkg name}"
    local version="${2:-$(___x_cmd_pkg_default_version "$name")}"
    [ -n "$version" ] || return
    local osarch="${3:-${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}}"
    local tgt="${4:-"$___X_CMD_PKG_INSTALL_PATH/$name/$version"}"
    ! [ -d "$tgt" ] || return 0


    local os="${osarch%/*}";  local arch="${osarch#*/}"
    [ -n "$version" ] || return

    ___x_cmd_pkg_download "$name" "$version" "$osarch" || {
        pkg:error "Download $name $version $osarch failed"
        return 1
    }

    local script_path
    if script_path="$(___x_cmd_pkg___get_script_path "$name" "$version" "$osarch" install)"; then
        local bin_path
        bin_path="$(___x_cmd_pkg_xbin_path "$name" "$version" "$osarch" "$tgt")"
        if [ -x "$bin_path" ]; then
            return 0
        fi

        local file_suffix
        ___x_cmd_pkg___attr "$name" "$version" "$osarch" file_suffix
        local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version.$file_suffix"
        pkg:info "Running $script_path after download $name $version"
        pkg:debug --name "$name"  --version "$version"  --osarch "$osarch" --file_suffix "$file_suffix" --ball "$ball" --bin_path "$bin_path"
        . "$script_path" || {
            pkg:error "Source $script_path failed" ; return 1
        }

        return 0
    else
        local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version.$osarch"
        ___x_cmd_pkg_download___check_hashsum "$ball" "$md5" "$sha1" "$sha256" "$sha512" || {
            pkg:error "$name.$version.$osarch File corrupted.  File had been removed"
            x rmrf $ball
            return 1
        }

        ___x_cmd_pkg_install___unzip "$name" "$version" "$osarch" "$tgt" || {
            pkg:error "unzip $name $version $osarch failed"
            return 1
        }
    fi
}

 ___x_cmd_pkg_uninstall(){
    x:trace pkg/uninstall

    case "$1" in
        -h|--help)
            ___x_cmd_pkg_help uninstall
            return 1
            ;;
    esac

    local name="${1:?Provide pkg name}"
    local version="${2:-$(___x_cmd_pkg_default_version "$name")}"
    [ -n "$version" ] || return
    local osarch="${3:-$(___x_cmd_pkg_osarch)}"
    local tgt="${4:-"$___X_CMD_PKG_INSTALL_PATH/$name/$version"}"

    local install_path="$tgt"
    local file_suffix
    ___x_cmd_pkg___attr "$name" "$version" "$osarch" file_suffix
    local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version.$file_suffix"

    if [ -e "$ball" ]; then
        pkg:info "Remove $ball"
        x rmrf "$ball" || {
            pkg:error "Remove $ball failed "; return 1
        }
    fi
    if ! [ -d "$install_path" ];then
        pkg:warn "This $name $version is no exist."
    else
        pkg:info "Uninstalling $name $version"
        x rmrf "$install_path"
    fi
 }

___x_cmd_pkg_reinstall(){
    x:trace pkg/reinstall

    case "$1" in
        -h|--help)
            ___x_cmd_pkg_help reinstall
            return 1
            ;;
    esac

    local name="${1:?Provide pkg name}"
    local version="${2:?Provide version}"
    local osarch="${3:-${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}}"
    local tgt="${4:-"$___X_CMD_PKG_INSTALL_PATH/$name/$version"}"
    [ -n "$version" ] || return

    local file_suffix
    ___x_cmd_pkg___attr "$name" "$version" "$osarch" file_suffix
    local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version.$file_suffix"
    pkg:debug "{ ball: $ball }"
    if [ -f "$ball" ] || [ -d "$tgt" ]; then
        pkg:info "Delete $ball and reinstall $name $version"
        x rmrf "$ball"
        x rmrf "$tgt"
    fi
    ___x_cmd_pkg_install "$@" || return 1
    # Delete the installation. Re unpack or running the installation script ?
}


# This is default
___x_cmd_pkg_install___unzip(){
    local name="${1:?Provide pkg name}"
    local version="${2:?Provide version}"
    local osarch="${3:-${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}}"
    local tgt="${4:-"$___X_CMD_PKG_INSTALL_PATH/$name/$version"}"

    local bin_path
    bin_path="$(___x_cmd_pkg_xbin_path "$name" "$version" "$osarch" "$tgt")"
    [ ! -x "$bin_path" ] || return 0

    local file_suffix unpack_way
    ___x_cmd_pkg___attr "$name" "$version" "$osarch" "file_suffix,unpack_way"
    local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version.$file_suffix"

    pkg:debug --bin_path "$bin_path"  --unpack_way "$unpack_way"

    if [ "$unpack_way" = "unpack_copy_to_target_dir" ]; then
        local unpack_dir="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version"
        pkg:debug --ball "$ball"   --to  "$unpack_dir" Unpack
        # FIXME: use no ___X_CMD_PKG_OSARCH for unzip
        # ___X_CMD_PKG_OSARCH="$(___x_cmd_pkg_osarch)" \
        x uz "$ball" "$unpack_dir" 1>/dev/null || {
            pkg:error "Fail to unzip $ball" ; return 1
        }
        x rmrf "$tgt"
        mkdir -p "$tgt"
        pkg:debug "Moving $unpack_dir to $tgt"
        mv -f "$unpack_dir"/*/* "$tgt"
        x rmrf "$unpack_dir"
    elif [ "$unpack_way" = "non_unpack" ]; then
        local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name"
        mkdir -p "$tgt"
        pkg:debug "Moving $ball to $tgt"
        mv -f "$ball"/* "$tgt"
    else
        pkg:info "Unpack - '$ball to $tgt'"
        # FIXME: use no ___X_CMD_PKG_OSARCH for unzip
        # ___X_CMD_PKG_OSARCH="$(___x_cmd_pkg_osarch)" \
        x uz "$ball" "$tgt"  || {
            pkg:error "Fail to unzip $ball"; return 1
        }
    fi
    if [ -n "$bin_path" ]; then
        chmod +x "$bin_path" || {
            pkg:error "chmod: $bin_path - Operation not permitted "
            return 1
        }
    fi
    pkg:info "Finish unpack $name $version to $tgt"
}
