# shellcheck shell=dash disable=SC2034,1090 #xrc

# This is default
___x_cmd_pkg_populate___unzip(){
    local name="${1}"
    [ -n "$name" ] || M='Provide a package name' N=pkg log:ret:1
    local version="${2}"
    [ -n "$version" ] || M='Provide version' N=pkg log:ret:1
    local osarch="${3:-$(___x_cmd_pkg_osarch)}"
    local tgt="${4:-"$___X_CMD_PKG_POPULATE_PATH/$name/$version"}"
    local os="${osarch%/*}";  local arch="${osarch#*/}"
    local download_file_ext unpack
    ___x_cmd_pkg___attr "$name" "$version" "$osarch" "download_file_ext,unpack"
    [ -n "$unpack" ] || {
        pkg:debug "Skip unzip"
        return 0
    }
    if [ "$unpack" = "none" ] && [ -z "$download_file_ext" ]; then
        local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$name.${os}.${arch}"
    else
        local ball="$___X_CMD_PKG_DOWNLOAD_PATH/$name/${version}_${os}_${arch}.${download_file_ext}"
    fi
    [ -f "$ball" ] || {
        pkg:error "Can't found zip package: $name $version"
        return 1
    }

    pkg:debug --bin_path "$bin_path"  --unpack "$unpack"

    if [ "$unpack" = "folder" ]; then
        local unpack_dir="$___X_CMD_PKG_DOWNLOAD_PATH/$name/$version"
        pkg:debug --ball "$ball"   --to  "$unpack_dir" Unpack
        x uz "$ball" "$unpack_dir" 1>/dev/null || {
            pkg:error "Fail to unzip $ball" ; return 1
        }
        x rmrf "$tgt"
        x mkdirp "$tgt"
        pkg:debug "Moving $unpack_dir to $tgt"
        x mv -f "$unpack_dir"/*/* "$tgt"
        x rmrf "$unpack_dir"
    elif [ "$unpack" = "none" ]; then
        x mkdirp "$tgt"
        pkg:debug "Moving $ball to $tgt"
        x cp -f "$ball" "$tgt"
    elif [ "$unpack" = "file" ]; then
        pkg:info "Unpack - '$ball to $tgt'"
        x uz "$ball" "$tgt"  || {
            pkg:error "Fail to unzip $ball"; return 1
        }
    else
        pkg:error "Yml of $name lacks of unpack key"
        return 1
    fi

}

___x_cmd_pkg_populate(){
    local X_help_cmd='___x_cmd_pkg_help populate'
    help:arg:parse

    local name="${1}"
    [ -n "$name" ] || M='Provide a package name' N=pkg log:ret:1
    local osarch="${3:-$(___x_cmd_pkg_osarch)}"
    local version="${2:-$(___x_cmd_pkg_default_version "$name" "$osarch")}"
    local tgt="${4:-"$___X_CMD_PKG_POPULATE_PATH/$name/$version"}"

    [ -n "$version" ] || {
        pkg:error "Not found candidate: $name or version;"
        pkg:error "Please use 'x pkg ll' or 'x pkg ls all <candidate>' to check available candidate and version"
        return 1
    }

    local os="${osarch%/*}";  local arch="${osarch#*/}"
    ( bgsingleton_name="${name}_${version}_${os}_${arch}" x bgsingleton run --wait ___x_cmd_pkg_populate___inner_ )
    [ -d "$tgt" ]
}
___x_cmd_pkg_populate___inner_(){
    ___x_cmd_pkg_populate___unzip "$name" "$version" "$osarch" "$tgt" || {
        pkg:error "unzip $name $version $osarch failed"
        x rmrf "$tgt"
        return 1
    }

    local script_path
    if ! script_path="$(___x_cmd_pkg___get_script_path "$name" "$version" "$osarch" populate)"; then
        pkg:error "Can't get script path"
        x rmrf "$tgt"
        return 1
    fi

    if [ -n "$script_path" ]; then
        pkg:info "Running $script_path"
        pkg:debug --name "$name"  --version "$version"  --osarch "$osarch" --script_path "$script_path"

        local ___X_CMD_PKG___META_NAME="$name"
        local ___X_CMD_PKG___META_VERSION="$version"
        local ___X_CMD_PKG___META_OS="${osarch%%/*}"
        local ___X_CMD_PKG___META_ARCH="${osarch##*/}"
        local ___X_CMD_PKG___META_TGT="$tgt"
        {
            {
                trap 'printf "\r\n"; pkg:error "populate interrupted script"; return 130' INT
                . "$script_path"
            } || {
                x rmrf "$tgt"
                pkg:error "Source $script_path failed"
                return 1
            }
        }
    fi

    ___x_cmd_pkg_populate___chmod "$name" "$version" "$osarch" "$tgt" || return 1
}

___x_cmd_pkg_populate___chmod(){
    local name="${1}"
    [ -n "$name" ] || M='Provide a package name' N=pkg log:ret:1
    local version="${2:?Provide version}"
    [ -n "$version" ] || M='Provide version' N=pkg log:ret:1
    local osarch="${3:-$(___x_cmd_pkg_osarch)}"
    local tgt="${4:-"$___X_CMD_PKG_POPULATE_PATH/$name/$version"}"
    local bin_path

    local xbin_name; while read -r xbin_name; do
        [ -n "$xbin_name" ] || continue
        [ "${xbin_name##*:}" = "$name" ] || continue
        xbin_name="${xbin_name#*:}"
        xbin_name="${xbin_name%:*}"

        bin_path="$(___x_cmd_pkg_xbin_path "$xbin_name" "$version" "$osarch")"
        if  [ -f "$bin_path" ]; then
            chmod +x "$bin_path" || {
                pkg:error "Can't use chmod on $bin_path"
                x rmrf "$tgt"
                return 1
            }
        fi
    done < "$___X_CMD_PKG_METADATA_PATH/binmod.txt"
}

