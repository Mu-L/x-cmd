# shellcheck shell=dash disable=SC2034

x log init chat

___X_CMD_CHAT_TMP="$___X_CMD_ROOT_TMP/chat"
x mkdirp "$___X_CMD_CHAT_TMP"

___X_CMD_CHAT_SESSION_DIR="$___X_CMD_ROOT_DATA/chat/session"

xrc:mod:lib chat    util cfg request file

# Stage 1:
# x chat cfg apikey=XXXX proxy=localhost:7070
# x chat proxy=localhost:7070
# Running the web service in background.

# Stage 2:
# x chat --md "Tell me how to do"

# Providing the list of file as the json, return me the list of json in the json format.
# , --file=a.txt,b.txt,c.txt /en
# , --send
# , --convert

___x_cmd_chat___main(){
     local X_help_cmd=; X_help_cmd='x help -m chat' help:arg-null:parse

    local ___X_CMD_CHAT_LOCAL_CONFIG="${___X_CMD_CHAT_LOCAL_CONFIG}"
    local ___X_CMD_CHAT_LOCAL_PROFILE="${___X_CMD_CHAT_LOCAL_PROFILE}"
    local ___X_CMD_CHAT_OUTPUT=""

    local ___X_CMD_CHAT_CFG_DATA_CURRENT_history="$___X_CMD_CHAT_CFG_DATA_CURRENT_history"
    local ___X_CMD_CHAT_CFG_DATA_CURRENT_maxtoken="$___X_CMD_CHAT_CFG_DATA_CURRENT_maxtoken"
    local ___X_CMD_CHAT_SEND_IN_FILE_LIST=

    local ___X_CMD_CHAT_PIPECONTENT=
    local ___X_CMD_CHAT_CONFIRM_BEFORE_SEND=

    while [ $# -gt 0 ]; do
        local op="$1";          shift
        case "$op" in
            --raw)              ___X_CMD_CHAT_OUTPUT=${op#--} ;; # Output the response data in json format or yml format, default output the data in text format
            :*:*)
                                ___X_CMD_CHAT_LOCAL_CONFIG="${op#:}"
                                ___X_CMD_CHAT_LOCAL_CONFIG="${___X_CMD_CHAT_LOCAL_CONFIG%%:*}"
                                ___X_CMD_CHAT_LOCAL_PROFILE="${op#:"$___X_CMD_CHAT_LOCAL_CONFIG":}"
                                ;;
            :*)                 ___X_CMD_CHAT_LOCAL_PROFILE="${op#:}" ;;

            --profile)          ___X_CMD_CHAT_LOCAL_PROFILE="$1";               shift ;;
            --config)           ___X_CMD_CHAT_LOCAL_CONFIG="$1";                shift ;;

            --request)          ___x_cmd_chat_request "$@"; return ;;

            --jqu)              ___x_cmd_chat_jqu "$@"; return ;;

            -p|--pipe)          ___X_CMD_CHAT_PIPECONTENT="$(cat)" ;
                                set -- "$@" "${___X_CMD_UNSEENCHAR_NEWLINE}${___X_CMD_CHAT_PIPECONTENT}"
                                ;;

            -c|--confirm-before-send)
                                ___X_CMD_CHAT_CONFIRM_BEFORE_SEND=1 ;;

            -n)                 ___X_CMD_CHAT_CFG_DATA_CURRENT_history="${1}";  shift ;;
            --maxtoken)         ___X_CMD_CHAT_CFG_DATA_CURRENT_maxtoken="${1}"; shift ;;

            # x chat proxy=localhost:7070
            # x chat proxy=socks5://localhost:7070
            *=*)                ___x_cmd_chat_cur "$op" "$@";           return ;;
            --cfg|--cur|--init) ___x_cmd_chat_"${op#--}" "$@";          return ;;
            *)                  ___x_cmd_chat_main___other "$op" "$@";  return ;;
        esac
    done
}

___x_cmd_chat_send(){
    ___x_cmd_chat_normal "$@"
}

___x_cmd_chat_main___other(){
    local op="$1";  shift
    case "$op" in
        --send)     ___x_cmd_chat_send "$@" ;;
        # TODO: In the future add stdin support.
        --convert)
            ___X_CMD_CHAT_SEND_IN_FILE_LIST="$___X_CMD_CHAT_SEND_IN_FILE_LIST,$2"; shift 2 ;;

        --*)
            ___x_cmd_chat_main___other__ "${op#--}" "$@"
            ;;
        *)
            ___x_cmd_chat_send "$op" "$@"
            # N=chat M="Unknown subcmd ==> $op" log:ret:64
    esac
}

___x_cmd_chat_main___other__(){
    local op="$1";  shift
    case "$op" in
        sh|sh1|awk|\
        json|yml|csv|varname)
                                "___x_cmd_chat_${op}"      "$@" ;;

        fjs|fjp)                "___x_cmd_chat_$op"        "$@" ;;

        *)                      N=chat M="Unknown subcmd ==> $op" log:ret:64 ;;
    esac
}

