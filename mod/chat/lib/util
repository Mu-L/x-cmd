# shellcheck shell=dash

___x_cmd_chat_jqu(){
    local IFS=" "

    # The code jqu should be enhanced
    printf "%s" "$*" | ___x_cmd_cmds_awk '
{
    text = (text == "") ? $0 : (text "\n" $0)
}
END{
    gsub(/\\/, "&\\", text)
    gsub("\n", "\\n", text)
    gsub("[\r]", "\\r", text)
    gsub("[\t]", "\\t", text)
    gsub("[\v]", "\\v", text)
    gsub(/"/, "\\\"", text)
    printf("\"%s\"", text)
}
'

}

___x_cmd_chat_normal(){
    local cur_provider=""
    while [ $# -gt 0 ]; do
        case "$1" in
            --provider)     cur_provider="$2";  shift 2 ;;
            *)              break ;;
        esac
    done

    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    # ___x_cmd_chat_request normal "" '{"role": "user", "content": '"$(___x_cmd_chat_jqu "$*")"' }'
    if [ -z "$cur_provider" ]; then
        ___x_cmd_chat_cur cur_provider:=provider 2>/dev/null
    fi
    # TODO: find out which is init: gemini, openai
    x "${cur_provider:-openai}" chat request "$@"
}

___x_cmd_chat_json(){
    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    local msg; msg='
        {
            role: user,
            content: '$(___x_cmd_chat_jqu "Your response only contains answer in json format without extra description.
$*")'
        }'
    ___x_cmd_chat_request json "" "$msg"
}

___x_cmd_chat_yml(){
    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    local msg; msg='
        {
            role: user,
            content: '$(___x_cmd_chat_jqu "Your response only contains answer in yml format without extra description.
$*")'
        }'
    ___x_cmd_chat_request yml "" "$msg"
}

___x_cmd_chat_csv(){
    [ "$#" -gt 0 ] || set -- "$(___x_cmd_cmds_cat)"
    local IFS=" "
    local msg; msg='
        {
            role: user,
            content: '$(___x_cmd_chat_jqu "Your response only contains answer in csv format without extra description.
$*")'
        }'
    ___x_cmd_chat_request csv "" "$msg"
}
