# shellcheck shell=dash disable=SC2034

xrc cfgy
___x_cmd_chat_cfg(){
    [ "$#" -gt 0 ] || {
        ___x_cmd_chat_init
        return
    }

    local op="$1"; shift
    case "$op" in
        -h|--help)          x help -m chat --cfg ;;
        *)                  ___x_cmd_chat_cfg___invoke "$op" "$@" ;;
    esac
}

___x_cmd_chat_cur(){
    local X_help_cmd=; X_help_cmd='x help -m chat --cur' help:arg:parse
    ___x_cmd_chat_cfg --current "$@"
}

# Config setting the key.
# set the default prompt

___X_CMD_CHAT_CFG_VARLIST="proxy,history,ai"

___x_cmd_chat_init(){
    local cur_history=; local cur_proxy=; local cur_ai=;
    if [ -f "$(___x_cmd_chat_cur --get config)" ]; then
        ___x_cmd_chat_cur cur_ai:=ai cur_history:=history cur_proxy:=proxy
    fi
    # default loading the last 0 history record as the context
    ___x_cmd_chat_cfg___invoke --init \
        ai      "Select the AI"     "${cur_ai:-openai}" '=' openai zhipu -- \
        proxy   "Set up the network proxy for API requests"     "$cur_proxy"         '=~'  "^([a-z0-9]+://)?[0-9.:]+$" -- \
        history "Set up the number of context history records"  "${cur_history:-0}"  '=~' "^[0-9]+$" || return

    ___x_cmd_chat_cur cur_ai:=ai
    chat:info "Executing \`x $cur_ai --init\`"
    case "$cur_ai" in
        openai) x openai --init ;;
        zhipu)  x zhipu --init  ;;
        *)      N=chat M="Not support ai=$cur_ai" log:ret:64 ;;
    esac

}

___x_cmd_chat_cfg___invoke(){
    ___x_cmd_cfgy_obj                                               \
        --prefix            ___X_CMD_CHAT_CFG_DATA                  \
        --default-config    "${___X_CMD_ROOT_CFG}/chat/X.cfg.yml"   \
        --current-config    "${___X_CMD_CHAT_LOCAL_CONFIG}"         \
        --current-profile   "${___X_CMD_CHAT_LOCAL_PROFILE}"        \
        --varlist           "$___X_CMD_CHAT_CFG_VARLIST"            \
        "$@"
}

