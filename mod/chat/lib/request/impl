

___x_cmd_chat_request_impl(){
    local type="$1"; shift
    local system="$1"; shift

    local current_message;
    current_message="$( printf "%s\n" "$*" | x jo n | x jo t " " )"

    local cur_ai=;                  local cur_history=
    ___x_cmd_chat_cur cur_history:=history cur_ai:=ai 2>/dev/null
    cur_ai="${cur_ai:-openai}";     cur_history="${cur_history:-"${___X_CMD_CHAT_CFG_DATA_CURRENT_history:-0}"}"
    chat:debug --ai "$cur_ai" --history "$cur_history"

    local message; message="$(
        {
            printf "[\n%s\n" "$system"
            x "$cur_ai" handler get_history_record "$___X_CMD_CHAT_SESSION_DIR/$cur_ai" "$cur_history"
            printf "%s\n]\n" "$current_message"
        } | x jo n | x jo t " "
    )"

    [ -z "$___X_CMD_CHAT_CONFIRM_BEFORE_SEND" ] || {
        printf "%s\n" "$current_message" | x j2y | x bat -l yml
        x ui yesno "Do your want to send this message?" || return
    }

    # Handle the output by increasing the index
    local outputfile="$___X_CMD_CHAT_TMP/output.$$"
    ___x_cmd_chat_request___api "$cur_ai" "$outputfile" "$type" "$message" "$current_message"

    case "$___X_CMD_CHAT_OUTPUT" in
        raw)        ___x_cmd_cmds_cat "$outputfile" ; return ;;
    esac

    if [ -t 1 ] && ___x_cmd_is_interactive; then
        case "$type" in
            normal)     x "$cur_ai" handler stream_output <"$outputfile" | x md show ;;
            json)       x "$cur_ai" handler stream_output <"$outputfile" | x jo color ;;
            *)          x "$cur_ai" handler stream_output <"$outputfile" ;;
        esac
    else
        # Just Using tail
        x "$cur_ai" handler stream_output <"$outputfile"
    fi
}
