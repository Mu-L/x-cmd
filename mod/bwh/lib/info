# shellcheck    shell=dash
___x_cmd_bwh_info(){
    [ "$#" -gt 0 ] || {
        ___x_cmd_bwh_api getLiveServiceInfo
        return 0
    }

    local op="$1"; shift
    case "$op" in
        get)                        ___x_cmd_bwh_info___runapi "$op" "$1" getServiceInfo         ;;
        live)                       ___x_cmd_bwh_info___runapi "$op" "$1" getLiveServiceInfo     ;;
        availableos)                ___x_cmd_bwh_info___runapi "$op" "$1" getAvailableOS         ;;
        usagegraphs)                ___x_cmd_bwh_info___runapi "$op" "$1" getUsageGraphs         ;;
        auditlog)                   ___x_cmd_bwh_info___runapi "$op" "$1" getAuditLog            ;;
        ratelimit)                  ___x_cmd_bwh_info___runapi "$op" "$1" getRateLimitStatus     ;;
        rawusagestats)              ___x_cmd_bwh_info___runapi "$op" "$1" getRawUsageStats       ;;
        suspensiondetails)          ___x_cmd_bwh_info___runapi "$op" "$1" getSuspensionDetails   ;;

        data)                       ___x_cmd_bwh_info___"$op" ;;

        -h|--help)                  ___x_cmd_bwh_help info; return 1 ;;
        *)                          N=bwh M="Unknown subcmd ==> $op" log:ret:64
    esac
}

___x_cmd_bwh_info___runapi(){
    case "$2" in
        --help|-h)  ___x_cmd_bwh_help info "$1" ;;
        *)         ___x_cmd_bwh_api "$3"        ;;
    esac
}

___x_cmd_bwh_info___data(){
    ___x_cmd_bwh_info___runapi live "" getLiveServiceInfo | {
        x jo env . .data_counter .plan_monthly_data .data_next_reset
        printf "usage: %s = %s / %s\n" "$(( data_counter * 100 / plan_monthly_data ))%" "$data_counter" "$plan_monthly_data"
        printf "next-reset: %s" "$(x date ts "$data_next_reset")"
    }
}
