# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_tea_repo_branch(){
    param:subcmd ___x_cmd_tea_repo_branch                   \
        "ls|l"              "list repo branch"              \
        "info|i"            "get repo branch info"          \
        create              "create the repo branch"        \
        default             "set default branch"            \
        protection          "protection branch management"
    param:subcmd:try
    param:run


    ___x_cmd_tea_repo_branch _param_help_doc
    return 1
}

# Section:list & info
# https://try.gitea.io/api/swagger#/repository/repoListBranches
___x_cmd_tea_repo_branch_ls(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --limit         "Results per page"                                                  <>:Numbers="30"
    --page          "Page number of the results to fetch."                              <>:Numbers="1"
    --json|-j       "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    local ___tea_error_msg="get repo ${owner_repo} branch list fail"

    ___X_CMD_UI_STATIC=1 ___tea_ui_mutual '___ui_table_json BranchName=.name Protected=.protected LastCommit=.commit.id -- $@' \
         ___x_cmd_tea_get_multi "/repos/${owner_repo}/branches" limit page
}

# https://try.gitea.io/api/swagger#/repository/repoListBranches
___x_cmd_tea_repo_branch_info(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    #1          "branch name"                                                       <>:Branch
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --json|-j   "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    ___x_cmd_tea_get_multi "/repos/${owner_repo}/branches/$1" | _____x_cmd_tea_branch_ui_utils Info
}

# EndSection

# Section: create & default
# https://try.gitea.io/api/swagger#/repository/repoCreateBranch
___x_cmd_tea_repo_branch_create(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo                "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --branch              "branch name"                                                       <>
    --old_branch_name     "Name of the old branch to create from"                             <>=""
    --json|-j             "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo

    local gen_tea_json
    gen_tea_json="$(param:option2json -repo -branch ${branch+"new_branch_name=branch"} )"
    ___x_cmd_tea_curl post "/repos/${owner_repo}/branches" "gen_tea_json" | _____x_cmd_tea_branch_ui_utils Creating
}

# https://try.gitea.io/api/swagger#/repository/repoCreateBranch
___x_cmd_tea_repo_branch_default(){
    param:dsl       '
options:
    #1          "branch name"                                                       <>
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --json|-j   "output json data"
'
    param:run
    # TODO:source data
    ___x_cmd_tea_repo_edit -j --default_branch "$1" "$repo" |_____x_cmd_tea_branch_ui_utils Default
}
# EndSection

___x_cmd_tea_repo_branch_protection(){
    param:subcmd ___x_cmd_tea_repo_branch_protection            \
        "info|i"            "protection branch info"            \
        "ls|l"              "protection branch list"            \
        unset               "remove branch protection"          \
        set                 "set branch to protection branch"
    param:subcmd:try
    param:run


    ___x_cmd_tea_repo_branch_protection _param_help_doc
    return 1
}

# Section:protection
# https://try.gitea.io/api/swagger#/repository/repoListBranchProtection
___x_cmd_tea_repo_branch_protection_ls(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --limit         "Results per page"                                                  <>:Numbers="30"
    --page          "Page number of the results to fetch."                              <>:Numbers="1"
    --json|-j       "output json data"
'
    param:run
    ___x_cmd_tea_param_init_owner_repo

    ___X_CMD_UI_STATIC=1 ___tea_ui_mutual '___ui_table_json BranchName=.branch_name Protected=.protected LastCommit=.commit.id -- $@' \
         ___x_cmd_tea_get_multi "/repos/${owner_repo}/branch_protections"
}

# https://try.gitea.io/api/swagger#/repository/repoListBranchProtection
___x_cmd_tea_repo_branch_protection_info(){
    param:dsl       '
options:
    #1          "branch name"               <>
    --repo      "repo name"                 <>:RepoName
    --json|-j   "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    ___x_cmd_tea_curl get "/repos/${owner_repo}/branch_protections/${1}" | (
        if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
            cat
            ___x_cmd_tea_http_error
            return
        fi

        x jo env . name=.branch_name  \
        enablePush=.enable_push pushWhitelist=.push_whitelist_usernames \
        pushWhitelistTeams=.push_whitelist_teams tea_resp_err=.message
        if [ -n "$name" ]; then
            ___x_cmd_ui_tf true "protection branch $1 info" "enablePush:$enablePush" \
                "pushWhitelist:$pushWhitelist" "pushWhitelistTeams:$pushWhitelistTeams"
        else
            ___x_cmd_ui_tf false "protection branch $1 info failed"
            ___x_cmd_tea____handle_resp
            return 1
        fi
    )
}
___x_cmd_tea_repo_branch_protection_set(){
    param:dsl       '
options:
    --repo                                  "repo name"                     <>:RepoName
    --branch_name                            "branch name"                  <>
    --approvals_whitelist_teams              "approvals whitelist teams"    <>=""
    --merge_whitelist_teams                  "merge whitelist teams"        <>=""
    --merge_whitelist_usernames              "merge whitelist usernames"    <>=""
    --protected_file_patterns                "protected file patterns"      <>=""
    --push_whitelist_teams                   "push whitelist teams"         <>=""
    --push_whitelist_usernames               "push whitelist usernames"     <>=""
    --required_approvals                     "required approvals"           <>:Number=""
    --status_check_contexts                  "status check contexts"        <>=""
    --unprotected_file_patterns              "unprotected file patterns"    <>=""
    --enable_push                            "enable push"
    --enable_push_whitelist                  "enable push whitelist"
    --enable_approvals_whitelist             "enable approvals whitelist"
    --require_signed_commits                 "require signed commits"
    --block_on_outdated_branch               "block on outdated branch"
    --block_on_rejected_reviews              "block on rejected reviews"
    --dismiss_stale_approvals                "dismiss stale approvals"
    --push_whitelist_deploy_keys             "push whitelist deploy keys"
    --approvals_whitelist_username           "approvals whitelist username"
    --block_on_official_review_requests      "block on official review requests"
    --json|-j                                "output json data"
'
    param:run

    local gen_tea_json
    gen_tea_json="$(param:option2json -repo)"

    tea:debug "data:$gen_tea_json"
    ___x_cmd_tea_param_init_owner_repo
    ___x_cmd_tea_curl post "/repos/${owner_repo}/branch_protections" "gen_tea_json" | (
        if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
            cat
            ___x_cmd_tea_http_error
            return
        fi

        x jo env . name=.branch_name tea_resp_err=.message
        if [ -n "$name" ]; then
            ___x_cmd_ui_tf true "set protection branch $1 success"
        else
            ___x_cmd_ui_tf false "set protection branch $1 failed."
            ___x_cmd_tea____handle_resp
            return 1
        fi
    )
}

___x_cmd_tea_repo_branch_protection_unset(){
    param:dsl       '
options:
    #1          "branch name"                                                       <>
    --repo      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    ___x_cmd_tea_curl delete "/repos/${owner_repo}/branch_protections/${1}"| (
        x jo env . tea_resp_err=.message
        if ___x_cmd_tea_http_error; then
            ___x_cmd_ui_tf  true "del ${1} branch protection success"
        else
            ___x_cmd_ui_tf false "del ${1} branch protection fail"
            ___x_cmd_tea____handle_resp
            return 1
        fi
    )
}
# EndSection

# Section: branch utils
_____x_cmd_tea_branch_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_tea_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="Protected=.protected sha=.commit.id url=.commit.url"
            msg="get repo ${owner_repo} branch info success"
            error_msg="get repo ${owner_repo} branch info fail"
            ;;
        Creating)
            data="Protected=.protected sha=.commit.id url=.commit.url"
            msg="Creating $branch successfully"
            error_msg="Creating $branch failed"
            ;;
        Default)
            msg="Successfully set repo default branch"
            error_msg="Failed to set repo default branch"
            ;;
    esac
    eval x jo env . name=.name tea_resp_err=.message "$data"
    if [ -n "$name" ]; then
        ___x_cmd_ui_tf true "$msg" ${name+"Name: $name"} ${Protected+"Protected: $Protected"}  ${sha+"LastCommit: $sha"} ${url+"Url: $url"}
    else
        ___x_cmd_ui_tf false "$error_msg"
        ___x_cmd_tea____handle_resp
        return 1
    fi
)
# EndSection