# shellcheck shell=sh
# shellcheck disable=SC2039,3043
xrc:mod:lib tea \
    repo/util \
    repo/collaborator/index \
    repo/branch/index \
    repo/pr/index \
    repo/release/index

___x_cmd_tea_repo(){
    param:scope     ___x_cmd_tea
    param:subcmd ___x_cmd_tea_repo                               \
        "ls|l"          "list repo of owner"                    \
        "create|c"      "create repo"                           \
        "edit|ed"       "update repo"                           \
        "info|i"        "Show detailed information of repo"     \
        rm              "Remove repo"                           \
        collaborator    "manage collaborator"                   \
        "cl|clone"      "Clone repo from gitea"                 \
        branch          "manage branch"                         \
        pr              "manage pr"                             \
        hook            "repo webhook manage"                   \
        release         "repo release manage"                   \
        team            "List repository teams"                 \
        tag             "list repo tags"
    param:subcmd:try
    param:run

    ___x_cmd_tea_repo _param_help_doc
    return 1
}

# Section: List
# shellcheck disable=2154
___x_cmd_tea_repo_ls() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --limit         "Results per page"                          <>:Numbers="30"
    --page          "Page number of the results to fetch."      <>:Numbers="1"
    --json|-j       "output json data"
'
    param:run

    local owner_type=user
    [ -z "$1" ] || {
        if ! owner_type="$(___x_cmd_tea_owner_type_query "${1%%/*}")"; then
            tea:error "No found any onwer type. Please check owner exist $1"
            return 1
        fi
    }
    "___x_cmd_tea_${owner_type}_repo_ls" --limit "$limit" --page "$page" ${json:+"--json"} "${1%%/*}"

}
# EndSection

# Section: Info
# https://gitea.com/api/swagger#/repository/repoGet
___x_cmd_tea_repo_info() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    #1              "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName
    --json|-j       "output json data"
'
    param:run
    local repo="$1"
    ___x_cmd_tea_param_init_owner_repo

    ___x_cmd_tea_curl get "/repos/${owner_repo}" | ___x_cmd_tea_repo____ui_handler Info
}

# EndSection

# Section: Create
# https://gitea.com/api/swagger#/repository/createCurrentUserRepo
___x_cmd_tea_repo_create() {
    param:scope     ___x_cmd_tea
    param:dsl       '
type:
    access  =   private public
option:
    #1                   "repo names"                                                                       <>
    --access             "private,public"                                                                   <>:access=private
    --readme             "Readme of the repository to create"                                               <>=""
    --license            "License to use"                                                                   <>=""
    --description        "Description of the repository to create"                                          <>=""
    --gitignores         "Gitignores to use"                                                                <>=""
    --issue_labels       "Label-Set to use"                                                                 <>=""
    --trust_model        "TrustModel of the repository"                                                     <>=""      = default collaborator committer collaboratorcommitter
    --default_branch     "DefaultBranch of the repository (used when initializes and in template)"          <>=""
    --template           "Whether the repository is template"
    --auto_init          "Whether the repository should be auto-initialized"
    --json|-j            "output json data"
'
    param:run

    local private=true
    [ "$access" = "public" ] && private=false

    local name="${___X_CMD_TX}"
    local gen_tea_json
    gen_tea_json="$(param:option2json -access +private +name)"

    for name in "$@"; do
        tea:debug "$(x tmpl "$gen_tea_json"  "${name##%/}")"
        x tmpl "$gen_tea_json"  "${name##%/}" | ___x_cmd_tea_curl post "/user/repos" "@-" | ___x_cmd_tea_repo____ui_handler Creating
    done
}
# EndSection

# Section: Edit
# https://gitea.com/api/swagger#/repository/repoEdit
___x_cmd_tea_repo_edit() {
    param:scope     ___x_cmd_tea
    param:dsl       '
type:
    access  =   private "" public
option:
    #1                          "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName

    --access                                   "private,public"                                         <>:access=""
    --name                                     "name of the repository"                                                                                                                                         <>=""
    --website                                  "a URL with more information about the repository"                                                                                                               <>=""
    --mirror_interval                          "a short description of the repository."                                                                                                                         <>=""
    --default_branch                           "sets the default branch for this repository."                                                                                                                   <>=""
    --default_merge_style                      "set to a merge style to be used by this repository: merge, rebase, rebase-merge, or squash. has_pull_requests must be true"                                     <>=""
    --description                              "a short description of the repository"                                                                                                                          <>=""
    --external_tracker_format                  "External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index"                           <>=""
    --external_tracker_style                   "External Issue Tracker Number Format, either numeric or alphanumeric"                                                                                           <>=""
    --external_tracker_url                     "URL of external issue tracker"                                                                                                                                  <>=""
    --external_wiki_url                        "URL of external wiki"                                                                                                                                           <>=""
    --has_issues                               "either true to enable issues for this repository or false to disable them."
    --has_projects                             "either true to enable project unit, or false to disable them."
    --has_wiki                                 "either true to enable the wiki for this repository or false to disable it"
    --archived                                 "set to true to archive this repository."
    --template                                 "either true to make this repository a template or false to make it a normal repository"
    --enable_prune                             "enable prune - remove obsolete remote-tracking references"
    --allow_rebase                             "either true to allow rebase-merging pull requests, or false to prevent rebase-merging. has_pull_requests must be true"
    --allow_manual_merge                       "either true to allow mark pr as merged manually, or false to prevent it. has_pull_requests must be true"
    --allow_merge_commits                      "either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. has_pull_requests must be true."
    --allow_rebase_update                      "either true to allow updating pull request branch by rebase, or false to prevent it. has_pull_requests must be true."
    --allow_squash_merge                       "either true to allow squash-merging pull requests, or false to prevent squash-merging. has_pull_requests must be true."
    --has_pull_requests                        "either true to allow pull requests, or false to prevent pull request"
    --enable_time_tracker                      "Enable time tracking (Built-in issue tracker)"
    --allow_rebase_explicit                    "either true to allow rebase with explicit merge commits (--no-ff), or false to prevent rebase with explicit merge commits. has_pull_requests must be true."
    --autodetect_manual_merge                  "either true to enable AutodetectManualMerge, or false to prevent it. has_pull_requests must be true, Note: In some special cases, misjudgments can occur."
    --enable_issue_dependencies                "Enable dependencies for issues and pull requests (Built-in issue tracker)"
    --ignore_whitespace_conflicts              "either true to ignore whitespace for conflicts, or false to not ignore whitespace. has_pull_requests must be true"
    --allow_only_contributors_to_track_time    "Let only contributors track time (Built-in issue tracker)"
    --default_delete_branch_after_merge        "set to true to delete pr branch after merge by default."

    --json|-j       "output json data"
'
    param:run
    local private=""
    [ "$access" = "public" ]  && private=false
    [ "$access" = "private" ] && private=true

    [ -n "$external_tracker_url" ] || unset external_tracker_url
    [ -n "$external_tracker_style" ] || unset external_tracker_style
    [ -n "$external_tracker_format" ] || unset external_tracker_format

    local external_tracker
    external_tracker=$(x jo "{
        ${external_tracker_url+"external_tracker_url: $external_tracker_url"},
        ${external_tracker_style+"external_tracker_style: $external_tracker_style"},
        ${external_tracker_format+"external_tracker_format: $external_tracker_format"}
        }")
    local external_wiki
    external_wiki=$(x jo "{
        ${external_wiki_url+"external_wiki_url: $external_wiki_url"}
        }")
    local internal_tracker
    internal_tracker=$(x jo "{
        ${enable_time_tracker+"enable_time_tracker: $enable_time_tracker"},
        ${enable_issue_dependencies+"enable_issue_dependencies: $enable_issue_dependencies"},
        ${allow_only_contributors_to_track_time+"allow_only_contributors_to_track_time: $allow_only_contributors_to_track_time"}
        }")

    local repo="${1:?repo name must be specified}"
    [ -n "$access" ] || unset access

    local gen_tea_json
    gen_tea_json="$(param:option2json -repo ${access+"private"} +internal_tracker +external_wiki +external_tracker \
        has_issues=^no_issues                   has_wiki=^no_wiki                       has_projects=^no_projects \
        allow_rebase_merge=^no_rebase_merge     allow_squash_merge=^no_squash_merge     allow_merge_commit=^no_merge_commit)"
    ___x_cmd_tea_param_init_owner_repo
    printf "%s" "${gen_tea_json}"
    printf "%s" "${gen_tea_json}"  | ___x_cmd_tea_curl patch "/repos/${owner_repo}" "@-" | (
        ___x_cmd_tea_repo____ui_handler Edit
    )
}


# EndSection

# Section: Remove
# https://gitea.com/api/swagger#/repository/repoDelete
___x_cmd_tea_repo_rm() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    #1          "Provide repo list.(separated by spaces)"    <>
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    [ -n "$1" ] || M='accepts 1 arg(s) (ownerPath/RepoPath), received empty' arg:ret:64
    local owner_repo=""
    local i=""
    for i in "$@"; do
        ___x_cmd_tea_param_normalize_repo "$i"
        [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure you want to delete repo : $(___x_cmd_ui bold red "$owner_repo") ?" || continue
        ___x_cmd_tea_curl delete "/repos/$owner_repo" | (
                [ -z "$___X_CMD_TEA_IN_TEST" ] || { ___x_cmd_cmds_cat; return; }
                x jo env . tea_resp_msg=.message tea_resp_err=.errors
                if ___x_cmd_tea_http_error; then
                    ___x_cmd_ui_tf  true "[Success]: Deleting repo $owner_repo"
                else
                    ___x_cmd_ui_tf false "Deleting repo $owner_repo failure:" >&2
                    ___x_cmd_tea____handle_resp
                    return 1
                fi
            )
    done
}
# EndSection

# Section: repo Tags ls
# https://gitea.com/api/swagger#/repository/repoListTags
___x_cmd_tea_repo_tag(){
    param:scope     ___x_cmd_tea
    param:dsl       <<A
options:
    --repo|-r       "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName=
    --limit         "Results per page"                                                      <>:Numbers="30"
    --page          "Page number of the results to fetch."                                  <>:Numbers="1"

    --json|-j       "output json data"
A
    param:run
    ___x_cmd_tea_param_init_owner_repo
    # ___tea_ui_mutual '___ui_table_json Name=.name Commit=.commit.sha Url=.commit.url -- $@' \
    #     ___x_cmd_tea_get_multi "/repos/${owner_repo}/tags"
    ___x_cmd_tea_get_multi "/repos/${owner_repo}/tags"
}
# EndSection

# Section: repo team ls
# https://gitea.com/api/swagger#/repository/repoListTeams
___x_cmd_tea_repo_team(){
    param:scope     ___x_cmd_tea
    param:dsl       <<A
options:
    --repo|-r       "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName=""
    --limit         "Results per page"                                                  <>:Numbers="30"
    --page          "Page number of the results to fetch."                              <>:Numbers="1"

    --json|-j       "output json data"
A
    param:run
    ___x_cmd_tea_param_init_owner_repo
    # ___tea_ui_mutual '___ui_table_json Name=.name Slug=.slug Description=.description Privacy=.privacy Permission=.permission -- $@' \
    #     ___x_cmd_tea_get_multi "/repos/${owner_repo}/teams" visibility affiliation sort direction
    ___x_cmd_tea_get_multi "/repos/${owner_repo}/teams" visibility affiliation sort direction
}
# EndSection

# Section: repo UI
___x_cmd_tea_repo____ui_handler(){
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        ___x_cmd_cmds_cat
        ___x_cmd_tea_http_error
        return
    fi
    (
        local _id=""
        case "$1" in
            Info)
                x jo env . _id=.id url=.html_url tea_resp_msg=.message tea_resp_err=.errors \
                    full_name=.full_name visibility=.visibility
                _data="full_name=.full_name visibility=.visibility"
                _inf_msg="Getting $owner_repo repo information successfully"
                _err_msg="Getting $owner_repo repo information failure"
                ;;
            Creating|Edit)
                x jo env . _id=.id url=.html_url tea_resp_msg=.message tea_resp_err=.errors \
                    owner=.owner.login full_name=.full_name visibility=.visibility
                _inf_msg="$1 repo ${owner_repo:-$name} successfully"
                _err_msg="$1 ${owner_repo:-$name} repo failure"
                ;;
        esac
        if [ -n "$_id" ]; then
            ___x_cmd_ui_tf  true "${_inf_msg}:" ${full_name:+"Name: $full_name"} ${owner:+"Repo_Owner: $owner"} ${visibility:+"Visibility: $visibility"} ${url:+"URL: $url"}
        else
            ___x_cmd_ui_tf false "${_err_msg}:" >&2
            ___x_cmd_tea____handle_resp
            return 1
        fi
    )
}
# EndSection