# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_tea_repo_pr(){
    param:subcmd ___x_cmd_tea_repo_pr            \
        "ls|l"              "list pull requests"    \
        "info|i"            "pull request info"     \
        "create|c"          "create pull request"   \
        "edit|ed"           "update pull requests"  \
        merge               "merge pull requests"
    param:subcmd:try
    param:run


    ___x_cmd_tea_repo_pr _param_help_doc
    return 1
}


# Section: ls info log comments view
#TODO: the labels type of Array
# https://gitea.com/api/swagger#/repository/repoListPullRequests
___x_cmd_tea_repo_pr_ls() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo|-r          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --state         "state"                                                             <>:PrState=""      = all closed open
    --sort          "sort"                                                              <>=""       = oldest recentupdate leastupdate mostcomment leastcomment priority
    --milestone     "ID of the milestone"                                               <>:Number=""
    --labels        "Label IDs"                                                         <>:Array=""
    --limit         "Results per page"                                                  <>:Numbers="30"
    --page          "Page number of the results to fetch."                              <>:Numbers="1"

    --json|-j   "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    # ___X_CMD_UI_STATIC=1 ___tea_ui_mutual '___ui_table_json number=.number state=.state title=.title url=.html_url -- $@' \
    #     ___x_cmd_tea_curl get "/repos/$owner_repo/pulls" state sort
    ___x_cmd_tea_curl get "/repos/$owner_repo/pulls" state sort
}

# https://gitea.com/api/swagger#/repository/repoGetPullRequest
___x_cmd_tea_repo_pr_info() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    #1           "pr number"     <>:Number
    --repo|-r       "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --json|-j   "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    ___x_cmd_tea_curl get "/repos/${owner_repo}/pulls/$1" | _____x_cmd_tea_pr_ui_utils Info
}
# EndSection

# Section: create update merge
# https://gitea.com/api/swagger#/repository/repoCreatePullRequest
___x_cmd_tea_repo_pr_create() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo|-r          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --title         "pr title"                                                          <>
    --head          "source branch. Format: [username:]<branch>"                        <>:name
    --base          "target branch. Format: [username:]<branch>"                        <>:name
    --body          "pull request content"                                              <>=""
    --due_date      "due date"                                                          <>=""
    --assignee      "User responsible for this pull request"                            <>=""
    --assignees     "User responsible for this pull request"                            <>:Array=""
    --milestone     "ID of the milestone"                                               <>:Number=""
    --labels        "Label IDs"                                                         <>:Array=""

    --json|-j   "output json data"
'
    param:run
    ___x_cmd_tea_param_init_owner_repo
    local tmp_assignees
    tmp_assignees=$(x jo "[$assignees]")
    local tmp
    tmp=$(x jo "[$labels]")
    local gen_tea_json
    gen_tea_json="$(param:option2json -repo -assignees -labels ${assignees+"assignees=tmp_assignees"} ${labels+"labels=tmp"})"
    ___x_cmd_tea_curl post "/repos/$owner_repo/pulls" "gen_tea_json" | _____x_cmd_tea_pr_ui_utils Creating

}

___x_cmd_tea_repo_pr_edit() {
    param:scope     ___x_cmd_tea
    param:dsl       '
type:
    state = closed open
options:
    #1                          "pr number"                                                         <>:number
    --repo|-r                      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --title                     "pr title"                                                          <>
    --body                      "pull request content"                                              <>=""
    --base                      "target branch. Format: [username:]<branch>"                        <>=""
    --due_date                  "due date"                                                          <>=""
    --assignee                  "User responsible for this pull request"                            <>=""
    --assignees                 "User responsible for this pull request"                            <>:Array=""
    --labels                    "Label IDs"                                                         <>:Array=""
    --milestone                 "ID of the milestone"                                               <>:Number=""
    --state                     "state"                                                             <>:state=""
    --unset_due_date            "ubset due date"                                                    <>=""
    --allow_maintainer_edit     "allow maintainer edit"
    --json|-j                   "output json data"
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    local tmp_assignees
    tmp_assignees=$(x jo "[$assignees]")
    local tmp
    tmp=$(x jo "[$labels]")
    local gen_tea_json
    gen_tea_json="$(param:option2json -repo -assignees -labels ${assignees+"assignees=tmp_assignees"} ${labels+"labels=tmp"})"
    ___x_cmd_tea_curl patch "/repos/${owner_repo}/pulls/$1" "gen_tea_json" | _____x_cmd_tea_pr_ui_utils Edit
}
#TODO: param desc
# https://gitea.com/api/swagger#/repository/repoMergePullRequest
___x_cmd_tea_repo_pr_merge() {
    param:scope     ___x_cmd_tea
    param:dsl       '
type:
    merge = merge rebase rebase-merge squash manually-merged
options:
    #1                              "pr id"                                                             <>
    --repo|-r                          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --merge_method                  "merge method"                                                      <>:merge
    --MergeCommitID                 ""                                                                  <>=""
    --MergeMessageField             ""                                                                  <>=""
    --MergeTitleField               ""                                                                  <>=""
    --head_commit_id                ""                                                                  <>=""
    --force_merge                   ""                                                                  <>:bool=""
    --delete_branch_after_merge     ""                                                                  <>:bool=""
    --merge_when_checks_succeed     ""                                                                  <>:bool=""
'
    param:run

    ___x_cmd_tea_param_init_owner_repo
    local gen_tea_json
    gen_tea_json="$(param:option2json -repo -merge_method ${merge_method+"Do=merge_method"})"
    ___x_cmd_tea_curl post "/repos/${owner_repo}/pulls/$1/merge" "gen_tea_json"
}

# EndSection

# https://gitea.com/api/swagger#/repository/repoCreatePullReview
___x_cmd_tea_repo_pr_view() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    #1             "pr number"         <>:number
'
    param:run

    ___x_cmd_tea_param_init_owner_repo

    x open "https://github.com/${owner_repo}/pulls/$1"
}

#
___x_cmd_tea_repo_pr_comments(){
    param:subcmd ___x_cmd_tea_repo_pr_comments   \
        "ls|l"          "list pull requests comments"   \
        "info|i"        "pull request comments info"    \
        "create|c"      "create pull request comments"  \
        "edit|ed"       "edit pull requests comments"
    param:subcmd:try
    param:run


    ___x_cmd_tea_repo_pr_comments _param_help_doc
    return 1
}
# TODO:github API error
# Section:fail
___x_cmd_tea_repo_pr_comments_ls() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo|-r      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --pr        "pr number."                                                        <>
'
    param:run
    ___x_cmd_tea_param_init_owner_repo
    # ___X_CMD_UI_STATIC=1 ___tea_ui_mutual '___ui_table_json id=.id body=.body url=.url -- $@' \
    #     ___x_cmd_tea_curl get "/repos/${owner_repo}/pulls/$pr/comments"
    ___x_cmd_tea_curl get "/repos/${owner_repo}/pulls/$pr/comments"
}

___x_cmd_tea_repo_pr_comments_create(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo|-r          "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    --number        "pr number"                                                         <>
    --body          "The text of the review comment."                                   <>
    --commit_id     "The SHA of the commit needing a comment"                           <>=""
    -p|--path       "The relative path to the file"                                     <>=""
    --position      "The position in the diff where you want to add a review comment"   <>=""
    --side          ""                                                                  <>=""
    --line          ""                                                                  <>=""
    --start_line    ""                                                                  <>=""
    --start_side    ""                                                                  <>=""
    --in_reply_to   ""                                                                  <>=""
'
    param:run
    ___x_cmd_tea_param_init_owner_repo
    local gen_tea_json
    gen_tea_json="$(param:option2json -repo)"
    ___x_cmd_tea_curl post "/repos/${owner_repo}/pulls/$number/comments" "gen_tea_json"
}

___x_cmd_tea_repo_pr_comments_rm(){
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --repo|-r      "Provide owner name and repo name.(default:the current user repo)"  <>:RepoName
    #1          "The unique identifier of the comment."                             <>
    --yes|-y    "Ignore remove prompt interception"
'
    param:run
    ___x_cmd_tea_param_init_owner_repo
    [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure $org to remove user: $(___x_cmd_ui bold red "$username") ?" || return
    ___x_cmd_tea_curl delete "/repos/${owner_repo}/pulls/comments/$1" | (
        x jo env . tea_resp_err=.message
        if ___x_cmd_tea_http_error; then
            ___x_cmd_ui_tf  true "Delete repo pr comment successful"
        else
            ___x_cmd_ui_tf false "Failed to delete repo pr comment."
            ___x_cmd_tea____handle_resp
            return 1
        fi
    )
}

___x_cmd_tea_repo_pr_comments_edit(){
    param:void
    :
}

# EndSection

# Section: pr utils
_____x_cmd_tea_pr_ui_utils()(
    if [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_tea_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="url=.html_url state=.state title=.title body=.body"
            msg="Successfully obtained PR information"
            error_msg="Failed to get PR information"
            ;;
        Creating)
            data="url=.html_url state=.state title=.title body=.body"
            msg="Successfully obtained PR information"
            error_msg="Failed to get PR information"
            ;;
        Edit)
            data="url=.html_url state=.state title=.title body=.body"
            msg="Edit PR success"
            error_msg="Failed to Edit PR"
            ;;
    esac
    eval x jo env . id=.id tea_resp_err=.message "$data"
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true "$msg" ${url+"Url: $url"}  ${state+"State: $state"} ${title+"Title: $title"} ${body+"Body: $body"}
    else
        ___x_cmd_ui_tf false "$error_msg"
        ___x_cmd_tea____handle_resp
        return 1
    fi
)
# EndSection