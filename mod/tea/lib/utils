# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2046

# Section: Help
_____x_cmd_tea_help__token_setting(){
    printf "\n%s %s \n%s\n" \
        "$(___x_cmd_ui yellow 'Run command to add|repleace token:')" \
        "$(___x_cmd_ui bold cyan "\`x tea token <token>\`")"   \
        "$(___x_cmd_ui "$(___x_cmd_tea___get_web_host)/user/settings/applications")"
}

_____x_cmd_tea_help(){
    x help -m tea "$@"
}
# EndSection

# Section: HTTP header & body & request
___x_cmd_tea_resp_header() {
    cat "$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header"
}

___x_cmd_tea_resp_code(){
    ___x_cmd_tea_resp_header | _____x_cmd_gx_get_resp_code_by_header
}

___x_cmd_tea_curl(){
    local op="$1"
    local _api_url="$2"
    shift 2
    local ___X_CMD_API_TEA_HEADER="-s -H \"accept: application/json\" -H \"Content-Type: application/json\" -D \"$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header\""

    local _curl_host_tmp=""
    local ___X_CMD_API_TEA_TOKEN=""
    ___x_cmd_tea_config___var  ___X_CMD_API_TEA_TOKEN=token _curl_host_tmp=host 2>/dev/null
    local ___X_CMD_API_TEA_HOST="${___X_CMD_API_GODE_HOST:-"$_curl_host_tmp"}"

    local ___X_CMD_TEA_SHOW_HTTP_CODE=1
    case "$op" in
        get)
            if [ -n "$NO_CACHE" ]; then
                ___x_cmd_api_tea get "$_api_url" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))")
            else
                x ccmd 10s --        eval "___X_CMD_API_TEA_HOST=$___X_CMD_API_TEA_HOST ___X_CMD_API_TEA_TOKEN=$___X_CMD_API_TEA_TOKEN ___x_cmd_api_tea get \"$_api_url\" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))")"
            fi
            ___x_cmd_tea_http_error   eval "___X_CMD_API_TEA_HOST=$___X_CMD_API_TEA_HOST ___X_CMD_API_TEA_TOKEN=$___X_CMD_API_TEA_TOKEN ___x_cmd_api_tea get \"$_api_url\" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))")"
            ;;
        post|put|patch|del)
            ___x_cmd_api_tea "$op" "$_api_url" "$(x curl gencode "$@")"
            ___x_cmd_tea_http_error
            ;;
    esac
}

___x_cmd_tea_curl___use_query_data(){
    [ $# -gt 0 ] || return
    local name
    printf "%s " "-G"
    for name in "$@";
    do
        if [ "$name" = "p" ];then  [ -z "$p" ] || printf "%s " "path==$p";
        else                                      printf "%s " "$name==" ;
        fi
    done
}

___x_cmd_tea_http_error(){
    local http_resp_code
    http_resp_code=$(___x_cmd_tea_resp_code)
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 200 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || {
            tea:debug "Cache Clear"
            x ccmd invalidate "$@" 1>/dev/null 2>&1
        }
        [ -z "$___X_CMD_TEA_SHOW_HTTP_CODE" ] || {
            tea:error "HTTP Code is $http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_TEA_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

___x_cmd_tea____printf_error(){
    if ! ___x_cmd_is_interative_tty || [ ! -t 2 ] || [ -n "$NO_COLOR" ]; then
        printf "  - ErrorMsg: %s\n" "$1" >&2
    else
        printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m'%s'\033[0m\n" "$1" >&2
    fi
}

___x_cmd_tea____handle_resp(){
    [ -z "$tea_resp_err" ] || [ "$tea_resp_err" = "null" ] || ___x_cmd_tea____printf_error "$tea_resp_err"
    [ -z "$tea_resp_msg" ] || [ "$tea_resp_msg" = "null" ] || ___x_cmd_tea____printf_error "$tea_resp_msg"
}
# EndSection

# Section: Resolve pagination
___x_cmd_tea_get_multi() {
    if [ -n "$page" ] || [ -n "$limit" ]; then
        ___x_cmd_tea_curl get "$@" page limit
        return
    fi

    local page=1
    local limit=100
    local NO_CACHE=1
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_tea_get_multi___json_prt "$@"
    else
        ___x_cmd_tea_get_multi___ui_table "$@"
    fi

}
___x_cmd_tea_get_multi___ui_table(){
    ___x_cmd_tea_curl get "$@" page limit
    printf "\n"
    local next_url
    _____x_cmd_tea_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_tea_curl get "$next_url" || return
        printf "\n"
        _____x_cmd_tea_next_url
    done
}

___x_cmd_tea_get_multi___json_prt(){
    local tmp
    tmp=$(mktemp)
    ___x_cmd_tea_curl get "$@" page limit > "$tmp"
    printf "\n" >> "$tmp"

    local next_url
    _____x_cmd_tea_next_url
    if [ -z "$next_url" ]; then
        command cat "$tmp"
        x rmrf "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_tea_curl get "$next_url" >> "$tmp"
        printf "\n" >> "$tmp"
        _____x_cmd_tea_next_url
    done
    < "$tmp" x jo q0 \*.\* . | ___x_cmd_gx_merge_multi_page_json_array
    x rmrf "$tmp"
}

_____x_cmd_tea_next_url() {
    next_url="$(grep "link:" "$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ]; then
        local _split_host=""
        if ! _split_host="$(___x_cmd_tea_config_get host 2>/dev/null)"; then
            _split_host="https://gitea.com/api/v1"
        fi
        next_url="${tmp_url#*"$_split_host"}"
    else
        next_url=""
    fi
}

# EndSection

# Section: Parameter Utilities
alias ___x_cmd_tea_param_init_owner_repo='
    local owner_repo=""
    ___x_cmd_tea_param_normalize_repo  || return
'

# shellcheck disable=SC2154,SC2034
___x_cmd_tea_param_normalize_repo() {
    local op="$repo"
    [ -n "$op" ] || op="$1"
    case "$op" in
    */*)
        owner_repo="$op"
        ;;
    "")
        case "$___X_CMD_TEA_CURRENT_repo" in
            */*) owner_repo="$___X_CMD_TEA_CURRENT_repo"    ;;
            "")  owner_repo="$(___x_cmd_gx_get_owner_repo)" ;;
            *)
                if [ -n "$___X_CMD_TEA_CURRENT_owner" ]; then
                    owner_repo="${___X_CMD_TEA_CURRENT_owner}/${___X_CMD_TEA_CURRENT_repo}"
                else
                    owner_repo="$(___x_cmd_tea_config_get owner)/${___X_CMD_TEA_CURRENT_repo}" || {
                        tea:error "No owner provided. Default owner not set."
                        tea:warn -h "$(x str ml wrap "$(_____x_cmd_tea_help__token_setting)" '    ')" -m "Can retry setup token to update owner.${___X_CMD_UNSEENCHAR_NEWLINE}Or check your current token setting."
                        return 1
                    }
                fi
            ;;
        esac
        ;;
    *)
        if [ -z "$___X_CMD_TEA_CURRENT_owner" ]; then
            local ___X_CMD_TEA_CURRENT_owner=""
            if ! ___X_CMD_TEA_CURRENT_owner="$(___x_cmd_tea_config_get owner)"; then
                tea:error "No owner provided. Default owner not set."
                tea:warn -h "$(x str ml wrap "$(_____x_cmd_tea_help__token_setting)" '    ')" -m "Can retry setup token to update owner.${___X_CMD_UNSEENCHAR_NEWLINE}Or check your current token setting."
                return 1
            fi
        fi
        owner_repo="${___X_CMD_TEA_CURRENT_owner}/${op}"
        ;;
    esac
}
# EndSection

# Section: tea util
# NOTE: remove prefix: _host_tmp="${_host_tmp#*'://'}";
___x_cmd_tea___get_web_host(){
    local _host_tmp=""
    if _host_tmp="$(___x_cmd_tea_config_get host 2>/dev/null)"; then
        printf "%s" "${_host_tmp%'/api/'*}"
    else
        printf "%s" "https://gitea.com"
    fi
}
# EndSection
