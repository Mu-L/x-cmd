# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2046

# Section: Help
_____x_cmd_tea_help__token_setting(){
    printf "\n%s %s \n%s\n" \
        "$(___x_cmd_ui yellow 'Run command to add|repleace token:')" \
        "$(___x_cmd_ui bold cyan "\`x tea token <token>\`")"   \
        "$(___x_cmd_ui "${___X_CMD_TEA_DOMAIN:-"https://gitea.com"}/user/settings/applications")"
}

_____x_cmd_tea_help(){
    x help -m tea "$@"
}
# EndSection

# Section: HTTP header & body & request
___x_cmd_tea_resp_header() {
    cat "$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header"
}

___x_cmd_tea_resp_code(){
    ___x_cmd_tea_resp_header  | awk '$1 ~/HTTP\/2$/ {print ($2+0);exit(0)}'
}

# https://gitea.com/api/v1/user
# https://codeberg.org/api/v1/user
___x_cmd_tea_curl(){
    local op="$1"
    local _curl_url="\"${___X_CMD_TEA_DOMAIN:-"https://gitea.com"}/api/v1$2\""
    local _accept="\"Accept:application/json\""
    local _content="\"Content-Type:application/json\""
    local _authorization
    _authorization="\"Authorization:token $(___x_cmd_tea_token)\""
    local tea_header="$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header"
    local ___X_CMD_TEA_SHOW_HTTP_CODE=1
    shift 2
    local req
    case "$op" in
        get)
            tea:debug "x curl -D  $tea_header   -X GET -s -H  $_accept  -H $_content   -H  $_authorization  $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))")  $_curl_url"
            if [ -n "$NO_CACHE" ]; then
                eval   x curl -D "$tea_header"  -X GET -s -H "$_accept" -H "$_content" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))") "$_curl_url"
            else
                x ccmd 10s --        eval x curl -D "$tea_header"  -X GET -s -H "$_accept" -H "$_content" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))") "$_curl_url"
            fi
            ___x_cmd_tea_http_error  eval x curl -D "$tea_header"  -X GET -s -H "$_accept" -H "$_content" -H "$_authorization" $(eval "printf '%s ' $(x curl gencode $(___x_cmd_tea_curl___use_query_data "$@"))") "$_curl_url"
            return
            ;;
        post)           req="POST"      ;;
        put)            req="PUT"       ;;
        patch)          req="PATCH"     ;;
        delete)         req="DELETE"    ;;
    esac
    tea:debug "x curl -D  $tea_header  -X  $req  -s -H  $_accept  -H  $_content  -H  $_authorization   $(x curl gencode "$@")   $_curl_url"
    eval       x curl -D "$tea_header" -X "$req" -s -H "$_accept" -H "$_content" -H "$_authorization" "$(x curl gencode "$@")" "$_curl_url"
    ___x_cmd_tea_http_error
}

___x_cmd_tea_curl___use_query_data(){
    [ $# -gt 0 ] || return
    local name
    printf "%s " "-G"
    for name in "$@";
    do
        if [ "$name" = "p" ];then  [ -z "$p" ] || printf "%s " "path==$p";
        else                                      printf "%s " "$name==" ;
        fi
    done
}

___x_cmd_tea_http_error(){
    local http_resp_code
    http_resp_code=$(___x_cmd_tea_resp_code)
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 200 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || {
            tea:debug "---! Cache Clear !---"
            x ccmd invalidate "$@" 1>/dev/null 2>&1
        }
        [ -z "$___X_CMD_TEA_SHOW_HTTP_CODE" ] || {
            tea:error "HTTP Code is $http_resp_code"
            if command -v unset 1>/dev/null; then
                unset ___X_CMD_TEA_SHOW_HTTP_CODE
            fi
        }
        return 1
    fi
}

___x_cmd_tea____handle_resp(){
    [ -z "$tea_resp_body" ] || printf "%s" "$tea_resp_body"
    [ -z "$tea_resp_err" ]  || printf "  \033[31m-\033[0m \033[1mErrorMsg: \033[31m%s\033[0m\n" "$tea_resp_err" >&2
}

___x_cmd_tea____handle_no_content(){
    local tea_resp_body
    local tea_resp_err
    x jo env . tea_resp_body=. tea_resp_err=.message

    [ -z "$gh_resp_body" ] || {
        tea:debug "tea_resp_body: $tea_resp_body"
        ___x_cmd_tea____handle_resp
        return 1
    }
    ___x_cmd_gh_http_error
}
# EndSection

# Section: Resolve pagination
___x_cmd_tea_get_multi() {
    if [ -n "$page" ] || [ -n "$limit" ]; then
        ___x_cmd_tea_curl get "$@" page limit
        return
    fi

    local page=1
    local limit=100
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_tea_get_multi___json_prt "$@"
    else
        ___x_cmd_tea_get_multi___ui_table "$@"
    fi

}
___x_cmd_tea_get_multi___ui_table(){
    ___x_cmd_tea_curl get "$@" page limit
    printf "\n"
    local next_url
    _____x_cmd_tea_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_tea_curl get "$next_url"
        printf "\n"
        _____x_cmd_tea_next_url
    done
}

___x_cmd_tea_get_multi___json_prt(){
    local tmp
    tmp=$(mktemp)
    ___x_cmd_tea_curl get "$@" page limit > "$tmp"
    printf "\n" >> "$tmp"

    local next_url
    _____x_cmd_tea_next_url
    if [ -z "$next_url" ]; then
        cat "$tmp"
        rm "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_tea_curl get "$next_url" >> "$tmp"
        printf "\n" >> "$tmp"
        _____x_cmd_tea_next_url
    done
    < "$tmp" x jo q0 \*.\* . | awk 'BEGIN{ print "["}
        END{ print "]"}
        {
            if ($0 == "") next
            if ((NR != 1) && ( aaa == 0 )) print ","
            if (($0 == "{") || ( $0 == "[")) aaa++
            if (($0 == "}") || ( $0 == "]")) aaa--
            print $0
        }'
    rm "$tmp"
}

_____x_cmd_tea_next_url() {
    next_url="$(grep "link:" "$___X_CMD_TEA_TMP/.____x_cmd_tea_curl_header")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ]; then
        next_url="${tmp_url#*'.com'*}"
    else
        next_url=""
    fi
}

# EndSection

# Section 3: Parameter Utilities
alias ___x_cmd_tea_param_init_owner_repo='
    local owner_repo
    ___x_cmd_tea_param_normalize_repo  || return
'

# shellcheck disable=SC2034
___x_cmd_tea_param_normalize_repo() {
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$(printf "%s" "$op")"
        ;;
    "")
        owner_repo="$(_____x_cmd_git_repo)"
        ;;
    *)
        ___x_cmd_tea_current_owner 1>/dev/null 2>&1
        if [ -z "$___X_CMD_TEA_DEFAULT_OWNER" ]; then
            tea:error "No owner provided. Default owner not set."
            tea:warn "Check your current token setting.$(_____x_cmd_tea_help__token_setting)"
            return 1
        fi
        owner_repo="$(printf "%s" "$___X_CMD_TEA_DEFAULT_OWNER/$op")"
        ;;
    esac
}

___x_cmd_tea_default() {
    param_default "$@" 2>/dev/null || return 1
}

_____x_cmd_git_repo() {
    local repo
    repo="$(git config --get remote.origin.url 2>/dev/null)"
    repo="${repo##*".com:"}"
    repo="${repo##*".com/"}"
    repo="${repo%.*}"
    printf "%s" "$repo"
}
_____x_cmd_git_branch() {
    git symbolic-ref -q --short HEAD 2>/dev/null
}

___tea_ui_mutual() {
    local tmp="$1"
    shift 1
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 "$@"
    else
        # run ui table
        eval "$tmp"
    fi
    local ___tea_exit_code="$?"
    [ "$___tea_exit_code" -eq 0 ] || {
        ___x_cmd_ui_tf false "${___tea_error_msg:-"Couldn't find any data"}" ;
        return "$___tea_exit_code"
    }
}

_____x_cmd_tea_advise() {
    _____x_cmd_tea_advise_parse "$@" | x jo .\* .login | x ja '{printf("%s ", $0)}'
}

_____x_cmd_tea_advise_parse() {
    local op="$1"
    case "$op" in
        orgls) x ccmd 1d -- x tea org ls 2>/dev/null;;
    esac
}
# EndSection
