# shellcheck shell=sh
# shellcheck disable=SC2039,3043
___x_cmd_tea_org_membership(){
    param:subcmd ___x_cmd_tea_org_membership             \
        "ls|l"              "list membership"               \
        "info|i"            "get org membership user info"  \
        add                 "add org membership"            \
        "edit|ed"           "update org membership"         \
        rm                  "Remove membership"
    param:subcmd:try
    param:run


    ___x_cmd_tea_org_membership _param_help_doc
    return 1
}

# Section: List
# https://try.gitea.io/api/swagger#/organization/orgListMembers
___x_cmd_tea_org_membership_ls() {
    param:scope     ___x_cmd_tea
    param:dsl       '
options:
    --org           "org space address"                         <>:Address
    --limit         "Results per page"                          <>:Numbers="30"
    --page          "Page number of the results to fetch."      <>:Numbers="1"
    --json|-j       "output json data"
'
    param:run
    local ___tea_error_msg="get membership list fail"
    ___X_CMD_UI_STATIC=1 ___tea_ui_mutual '___ui_table_json Id=.id UserName=.login Url=.html_url -- $@' \
        ___x_cmd_tea_get_multi "/orgs/${org##*/}/members" limit page
}
# EndSection

# Section: info & add & rm
#TODO: not found this API
___x_cmd_tea_org_membership_info() {
    param:scope     ___x_cmd_tea
    param:dsl      <<A
options:
    #1                  "username:space address"    <>
    --org               "org space address"         <>:Address

    --json|-j   "output json data"
A
    param:run

    ___x_cmd_tea_curl get "/orgs/${org##*/}/memberships/${1##*/}" | (_____x_cmd_tea_org_membership_ui_utils Info)
}

#TODO: not found this API
___x_cmd_tea_org_membership_add() {
    param:scope     ___x_cmd_tea
    param:dsl       <<A
type:
    role = admin member
options:
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role="member"
    #n              "username"

    --json|-j   "output json data"
A
    param:run
    if [ $# -eq 0 ];then
        tea:error "provide at least one username"
        return 1
    fi

    for username in "$@"; do
        {
            ___x_cmd_tea_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | (_____x_cmd_tea_org_membership_ui_utils Add)
        }
    done
}

#TODO: not found this API
___x_cmd_tea_org_membership_edit() {
    param:scope     ___x_cmd_tea
    param:dsl       <<A
type:
    role = admin member
options:
    #1              "username"                                          <>:Username_multiple
    --org           "org space address"                                 <>:Address
    --role          "The role to give the user in the organization"     <>:role
    --json|-j       "output json data"
A
    param:run
    local username="$1"
    ___x_cmd_tea_curl put  "/orgs/${org##*/}/memberships/${username##*/}" -- role | (_____x_cmd_tea_org_membership_ui_utils Edit)
}

___x_cmd_tea_org_membership_rm() {
    param:scope     ___x_cmd_tea
    param:dsl       <<A
options:
    --org       "org space address"        <>:Address
    #1          "username"                 <>:Username_multiple
    --yes|-y    "Ignore remove prompt interception"
A
    param:run

    local username
    for username in "$@"; do
        {
            [ "$yes" = "true" ] || ___x_cmd_ui_yesno "Are you sure $org to remove user: $(___x_cmd_ui bold red "$username") ?" || continue
            ___x_cmd_tea_curl delete "/orgs/${org##*/}/members/${username##*/}" | (
                x jo env . tea_resp_err=.message
                if ___x_cmd_tea_http_error; then
                    ___x_cmd_ui_tf  true "del $username to organizations  success"
                else
                    ___x_cmd_ui_tf false "del $username to organizations fail"
                    ___x_cmd_tea____handle_resp
                    return 1
                fi
            )

        }
    done
}
# EndSection

# Section: org membership utils
_____x_cmd_tea_org_membership_ui_utils(){
    if  [ -n "$ENFORCE_JSON" ] || [ -n "$json" ]; then
        cat
        ___x_cmd_tea_http_error
        return
    fi

    local data
    local msg
    local error_msg
    case "$1" in
        Info)
            data="role=.role url=.organization_url name=.user.login"
            msg="get membership in organizations info  success"
            error_msg="get membership in organizations info fail."
            ;;
        Add|Edit)
            msg="$1 $username to organizations  success"
            error_msg="$1 $username to organizations fail."
            ;;
    esac
    eval x jo env . state=.state tea_resp_err=.message "$data"
    if [ -n "$state" ]; then
        ___x_cmd_ui_tf true "$msg" ${name+"Name: $name"}  ${role+"Role: $role"} ${state+"State: $state"} ${url+"Url: $url"}
    else
        ___x_cmd_ui_tf false "$error_msg"
        ___x_cmd_tea____handle_resp
        return 1
    fi
}
# EndSection