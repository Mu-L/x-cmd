# shellcheck shell=dash disable=SC2034

xrc cfgy
___x_cmd_gemini_cfg(){
    [ "$#" -gt 0 ] || {
        ___x_cmd_gemini_init
        return
    }

    local op="$1"; shift
    case "$op" in
        -h|--help)      x help -m gemini --cfg ;;
        *)              ___x_cmd_gemini_cfg___invoke "$op" "$@" ;;
    esac
}

___x_cmd_gemini_cur(){
    local X_help_cmd=; X_help_cmd='x help -m gemini --cur' help:arg:parse
    ___x_cmd_gemini_cfg --current "$@"
}

___x_cmd_gemini_init(){
    local cur_apikey=; local cur_model=; local cur_endpoint
    if [ -f "$(___x_cmd_gemini_cur --get config)" ]; then
        ___x_cmd_gemini_cur cur_apikey:=apikey cur_model:=model cur_endpoint:=endpoint
    fi

    ___x_cmd_gemini_cfg___invoke --init ${cur_apikey:+"--ctrl_exit_strategy"}     \
        apikey      "Set up the API key of gemini key"      "$cur_apikey"         \
                        '=~*'   "^[A-Za-z0-9-]+$"           --                    \
        model       "Set the model of gemini ai"           "${cur_model:-""}"     \
                        '='     text-bison-001 gemini-pro   --                    \
        endpoint    "Set endpoint, not necessary"           "$cur_endpoint"
}

# Config setting the key.
# set the default prompt

___X_CMD_GEMINI_CFG_VARLIST="apikey,model,endpoint"
___x_cmd_gemini_cfg___invoke(){
    ___x_cmd_cfgy_obj                                               \
        --prefix            ___X_CMD_GEMINI_CFG_DATA                \
        --default-config    "${___X_CMD_ROOT_CFG}/gemini/X.cfg.yml" \
        --current-config    "${___X_CMD_GEMINI_LOCAL_CONFIG}"       \
        --current-profile   "${___X_CMD_GEMINI_LOCAL_PROFILE}"      \
        --varlist           "$___X_CMD_GEMINI_CFG_VARLIST"          \
        "$@"
}

