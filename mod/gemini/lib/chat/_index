# shellcheck shell=dash

# ___X_CMD_CHAT_SESSION_DIR="$___X_CMD_ROOT_DATA/chat/session"


___x_cmd_gemini_chat(){
    local X_help_cmd='x help -m gemini chat'; help:arg:parse
    local op="$1";  shift
    case "$op" in
        request|preparehistory) #  preparehistory ？？
            ___x_cmd_gemini_chat_"$op"   "$@"   ;;
        *)  ___x_cmd_gemini_chat_request "$@"   ;;
    esac
}

# inner

# x gemini chat --request --timeline X --history 3 --question "" --example ""
___x_cmd_gemini_chat_request(){
    local X_help_cmd='x help -m gemini chat request'; help:arg:parse
    local question=""       # It should be a json
    local history=""
    local minion=""
    local session=""

    while [ $# -gt 0 ]; do
        case "$1" in
            --session)      session="$2";           shfit 2 ;;
            --minion)       minion="$2";            shift 2 ;;
            --history)      history_num="$2";       shift 2 ;;
            --question)     question="$2";          shift 2 ;;
            --model)        model="$2";             shift 2 ;;
            *)              question="$*";          break ;;
        esac
    done

    local cfg_history_num=; local cfg_session=;     local cfg_minion=
    ___x_cmd_chat_cfg --var cfg_history_num=history cfg_session=session cfg_minion=minion 2>/dev/null

    local cfg_model=
    local cfg_proxy=
    ___x_cmd_gemini_cfg --var cfg_model=model 2>/dev/null

    local chatid
    chatid="$(x pidid vlseqid ___X_CMD_CHAT_REC)"
    local content_dir="${___X_CMD_CHAT_SESSION_DIR}/${___X_CMD_CHAT_SESSION_CURRENT}/${chatid}"

    [ -n "$minion" ] || minion="default"
    local x_=; ___x_cmd_chat_minion_cache_json_ "$minion" || return
    local minion_json_cache="$x_"
    {

        x cawk  -E ___X_CMD_CHAT_SESSION_DIR,session,history_num,minion,question,model,chatid,minion_json_cache \
                -E cfg_history_num,cfg_session,cfg_minion,cfg_model  \
                -m j/json,j/jiter,j/jcp \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/history.awk"          \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/util.awk"             \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/minion.awk"           \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/creq.awk"             \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/cres.awk"             \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/gemini.awk"        \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/handlerequest.awk"
        # generate req.yml
        # generate requestbody.json
    } | {
        local model
        read -r model

        local requestbody
        read -r requestbody

        x retry --max 5 --interval 3 ___x_cmd_gemini_chat_request___try
    }
}

___x_cmd_gemini_chat_request___try(){
    local cache_file="${content_dir}/gemini.response.yml"
    [ -d "${content_dir}" ] || x mkdirp "${content_dir}"

    gemini:debug "Sending request to gemini server"
    ___x_cmd_gemini_request_generaxwtecontent "$requestbody" "$model" | \
        {
            local interative=
            if ___x_cmd_is_interactive; then interative=1; fi

            local errcode=0
            # generate res.yml + ui
            x cawk -E  ___X_CMD_CHAT_SESSION_DIR,session,interative,cache_file,chatid,cfg_session                   \
                    -m j/json,j/jiter,j/jcp                                      \
                    -f "$___X_CMD_ROOT_MOD/chat/lib/awk/minion.awk"              \
                    -f "$___X_CMD_ROOT_MOD/chat/lib/awk/util.awk"                \
                    -f "$___X_CMD_ROOT_MOD/chat/lib/awk/cres.awk"                \
                    -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/gemini.awk"           \
                    -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/handleresponse.awk" || errcode=$?

            # TODO: there is an option that can preserve the original response
            # X_retry_last=1
            case $errcode in
                0)      ;;
                *)      x rmrf "$content_dir" ;;
            esac
            return "$errcode"
        }
}
