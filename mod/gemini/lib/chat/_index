# shellcheck shell=dash

# ___X_CMD_CHAT_SESSION_DIR="$___X_CMD_ROOT_DATA/chat/session"


___x_cmd_gemini_chat(){
    local X_help_cmd='x help -m gemini chat'; help:arg:parse
    local op="$1";  shift
    case "$op" in
        request|preparehistory) #  preparehistory ？？
            ___x_cmd_gemini_chat_"$op"   "$@"   ;;
        *)  ___x_cmd_gemini_chat_request "$@"   ;;
    esac
}

# inner

# x gemini chat --request --timeline X --history 3 --question "" --example ""
___x_cmd_gemini_chat_request(){
    local X_help_cmd='x help -m gemini chat request'; help:arg:parse
    local question=""
    local history=""
    local minion=""
    local session=""
    local model=""
    local system=""
    local type="chat"
    local confirm_before_send=""

    while [ $# -gt 0 ]; do
        case "$1" in
            --session)      session="$2";           shfit 2 ;;
            --minion)       minion="$2";            shift 2 ;;
            --history|n)    history_num="$2";       shift 2 ;;
            --question)     question="$2";          shift 2 ;;
            --model)        model="$2";             shift 2 ;;
            --system)       system="$2";            shift 2 ;;
            --type)         type="$2";              shift 2 ;;
            -c)             confirm_before_send=1;  shift 1 ;;
            *)              question="${question}$*"; break ;;
        esac
    done

    local cfg_history_num=; local cfg_session=;     local cfg_minion=
    ___x_cmd_chat_cfg --var cfg_history_num=history cfg_session=session cfg_minion=minion 2>/dev/null

    local cfg_model=
    ___x_cmd_gemini_cfg --var cfg_model=model 2>/dev/null

    local chatid
    chatid="$(x pidid vlseqid ___X_CMD_CHAT_REC)"
    gemini:debug --chatid "$chatid" --confirm_before_send "$confirm_before_send"

    [ -n "$minion" ] || minion="default"
    local x_=; ___x_cmd_chat_minion_cache_json_ "$minion" || return
    local minion_json_cache="$x_"
    {

        x cawk  -E ___X_CMD_CHAT_SESSION_DIR,session,history_num,minion,question,model,chatid,minion_json_cache,system,type \
                -E cfg_history_num,cfg_session,cfg_minion,cfg_model  \
                -m j/json,j/jiter,j/jcp \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/history.awk"          \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/util.awk"             \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/minion.awk"           \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/creq.awk"             \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/cres.awk"             \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/gemini.awk"        \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/handlerequest.awk"
        # generate req.yml
        # generate requestbody.json
    } | (
        local content_dir
        read -r content_dir

        # generate a file for running
        ___x_cmd_gemini_chat_request___trapexit(){
            gemini:debug "Remove chat.running file"
            x rmrf "$content_dir/chat.running"
        }

        printf "%s\n" $$ >"$content_dir/chat.running"
        trap '___x_cmd_gemini_chat_request___trapexit' EXIT

        {
            read -r model

            local requestbody
            read -r requestbody

            x retry --max 3 --interval 3 ___x_cmd_gemini_chat_request___try
        } || {
            ___x_cmd_gemini_chat_request___trapexit
            return 1
        }
    )
}

___x_cmd_gemini_chat_request___try(){
    gemini:debug "Sending request to gemini server"
    [ -z "$confirm_before_send" ] || {
        printf "%s\n" "$requestbody" | x j2y | x bat -l yml
        x ui yesno "Do your want to send this message?" || return 0
    }

    ___x_cmd_gemini_request_generaxwtecontent "$requestbody" "$model" | \
    {
        local interative=
        if ___x_cmd_is_interactive; then interative=1; fi

        local errcode=0
        x cawk -E  content_dir,interative   \
                -m j/json,j/jiter,j/jcp                                      \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/minion.awk"              \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/util.awk"                \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/cres.awk"                \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/gemini.awk"           \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/handleresponse.awk" || errcode=$?

        case $errcode in
            0)      ;;
            *)  x rmrf "$content_dir/gemini.response.yml" "$content_dir/chat.response.yml" ;;
        esac
        return "$errcode"
    }
}
