# shellcheck shell=dash disable=SC2034

# ___X_CMD_CHAT_SESSION_DIR="$___X_CMD_ROOT_DATA/chat/session"

xrc:mod:lib     gemini      chat/exec
___x_cmd_gemini_chat(){
    local X_help_cmd='x help -m gemini chat'; help:arg:parse
    local op="$1";  shift
    case "$op" in
        request|preparehistory|exec) #  preparehistory ？？
            ___x_cmd_gemini_chat_"$op"   "$@"   ;;
        *)  N=gemini M="Not support such [subcmd=$op]" log:ret:64
    esac
}

# inner

# x gemini chat --request --timeline X --history 3 --question "" --example ""
___x_cmd_gemini_chat_request(){
    local X_help_cmd='x help -m gemini chat request'; help:arg:parse
    ___x_cmd chat --exec --provider gemini "$@"
}

___x_cmd_gemini_chat_request___launch(){
    local content_dir
    read -r content_dir

    # generate a file for running
    ___x_cmd_gemini_chat_request___trapexit(){
        gemini:debug "Remove chat.running file"
        x rmrf "$content_dir/chat.running"
    }

    printf "%s\n" $$ >"$content_dir/chat.running"
    trap '___x_cmd_gemini_chat_request___trapexit' EXIT

    {
        read -r model

        local requestbody
        read -r requestbody
        if [ -z "$count_token" ]; then
            x retry --max 3 --interval 3 ___x_cmd_gemini_chat_request___try
        else
            x retry --max 3 --interval 3 ___x_cmd_gemini_count_request___try
        fi
    } || {
        ___x_cmd_gemini_chat_request___trapexit
        return 1
    }
}

___x_cmd_gemini_chat_request___try(){
    gemini:debug "Sending request to gemini server"
    [ -z "$confirm_before_send" ] || {
        printf "%s\n" "$requestbody" | x j2y | x bat -l yml
        x ui yesno "Do your want to send this message?" || return 0
    }

    {
        ___x_cmd ccmd "$cache_time" -- \
            ___x_cmd_gemini_request_generaxwtecontent "$requestbody" "$model"
    } | {
        local interative=
        if ___x_cmd_is_interactive; then interative=1; fi

        local errcode=0
        x cawk -E  content_dir,interative   \
                -m j/json,j/jiter,j/jcp                                      \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/history.awk"             \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/util.awk"                \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/minion.awk"              \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/creq.awk"                \
                -f "$___X_CMD_ROOT_MOD/chat/lib/awk/cres.awk"                \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/gemini.awk"           \
                -f "$___X_CMD_ROOT_MOD/gemini/lib/chat/handleresponse.awk" || errcode=$?

        case $errcode in
            0)      ;;
            *)  x rmrf "$content_dir/gemini.response.yml" "$content_dir/chat.response.yml" ;;
        esac
        return "$errcode"
    }
}
