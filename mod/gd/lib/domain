# shellcheck shell=dash disable=SC2034

___X_CMD_CD_DOMAIN_0="$PWD"

# TODO: but wait until cfgy cloud design acomplished.
# x gd -d --set -g cur .
# x gd -d --set --global cur .

# x gd -d --set -c cur .
# x gd -d --set --cloud cur .

___x_cmd_gd_domain(){
    local X_help_cmd="x help -m gd -d"
    local op="$1"; [ "$#" -le 0 ] || shift
    case "$op" in
        --ls|-l)    ___x_cmd_gd_domain___ls ;;
        --cd)       ___x_cmd_gd_domain___goto "$@" ;;
        --set|--get|--init)
                    "___x_cmd_gd_domain___${op#--}" "$@" ;;
        --ws)
                    if [ "$#" -eq 0 ]; then ___x_cmd_gd_domain___goto_wsroot
                    else                    ___x_cmd_gd_domain___goto_wsroot_inner ":ws/$1"
                    fi
                    ;;
        --help|-h)  help:show:ret:0  ;;
        *)          help:show:ret:64 ;;
    esac
}

___x_cmd_gd_domain___magic(){
    local p="$1"
    case "$p" in
        :ls)        ___x_cmd_gd_domain___ls                                 ;;
        :|:/)       ___x_cmd_gd_origin "$___X_CMD_CD_DOMAIN_0"              ;;
        :/*)        ___x_cmd_gd_origin "$___X_CMD_CD_DOMAIN_0" \
                    && ___x_cmd_gd___main_magic "${p#:/}"                   ;;

        :ws|:ws/)   ___x_cmd_gd_domain___goto_wsroot                        ;;
        :ws/*)      ___x_cmd_gd_domain___goto_wsroot_inner "${p#*":ws/"}"   ;;

        :*/*)       ___x_cmd_gd_domain___goto_inner "${p#:}"                ;;
        :*)         shift; ___x_cmd_gd_domain___goto_or_set "${p#:}" "$@"   ;;
    esac
}

___x_cmd_gd_domain___ls(){
    ___x_cmd_gd_util___dict_inner print domain "\t=\t"
}

___x_cmd_gd_domain___goto_wsroot(){
    local x_
    x wsroot_ || return 1
    ___x_cmd_gd_origin "$x_" || return 1
}

___x_cmd_gd_domain___goto_wsroot_inner(){
    ___x_cmd_gd_domain___goto_wsroot && ___x_cmd_gd___main_magic "$1"
}

___x_cmd_gd_domain___goto_or_set(){
    if [ "$#" -eq 1 ]; then     ___x_cmd_gd_domain___goto "$1"
    else                        ___x_cmd_gd_domain___set "$1" "$2"
    fi
}

___x_cmd_gd_domain___goto_inner(){
    ___x_cmd_gd_domain___goto "${1%%/*}" && ___x_cmd_gd___main_magic "${1#*/}"
}

___x_cmd_gd_domain___goto(){
    local x=; ___x_cmd_gd_util___dict_get_ domain "$1"
    [ -d "$x_" ] || return
    ___x_cmd_gd_origin "$x_"
}

___x_cmd_gd_domain___get(){
    local x_=; ___x_cmd_gd_util___dict_get_ domain "$1"
    printf "%s\n" "$x_"
}

___x_cmd_gd_domain___set(){
    # varname="$(printf "%s" "$1" | tr "[:lower:]" "[:upper:]")"  # optimized using bash/zsh inline

    # xrc "$varname"
    # if command "___x_cmd_$varname_gd" 2>/dev/
    local x_=; ___x_cmd_gd_domain___abs_dir_path "$2" || return
    ___x_cmd_gd_util___dict_set domain "${1#:}" "$x_"
}

___x_cmd_gd_domain___set_or_true(){
    ___x_cmd_gd_domain___set "$@" || true
}

___x_cmd_gd_domain___abs_dir_path(){
    [ -d "$1" ] || return
    x_=;    x abspath_ "$1"
    [ -d "$x_" ] || return
}

___x_cmd_gd_domain___init_put(){
    local x_=; ___x_cmd_gd_domain___abs_dir_path "$2" || return
    ___x_cmd_gd_util___dict_inner put domain "${1#:}" "$x_"
}

___x_cmd_gd_domain___init(){

    local domain_file="$___X_CMD_GD_DATA/domain"
    if [ -f "$domain_file" ]; then
        ___x_cmd_gd_util___dict_inner load domain "$domain_file"
        return
    fi

    ___x_cmd_gd_domain___init_put x                "$___X_CMD_ROOT_V_VERSION"
    ___x_cmd_gd_domain___init_put xr               "$HOME/.x-cmd.root"
    ___x_cmd_gd_domain___init_put xrg              "$HOME/.x-cmd.root/global"
    ___x_cmd_gd_domain___init_put xrl              "$HOME/.x-cmd.root/local"
    # gd :xrl/cfg

    # module
    ___x_cmd_gd_domain___init_put gita             "${___X_CMD_GITA_CACHE:-"$___X_CMD_ROOT_SHARED/gita/DEFAULT/cache"}"
    ___x_cmd_gd_domain___init_put gitb             "${___X_CMD_GITB_CACHE:-"$___X_CMD_ROOT_SHARED/gitb/DEFAULT/cache"}"
    ___x_cmd_gd_domain___init_put gitc             "${___X_CMD_GITA_CACHE:-"$___X_CMD_ROOT_SHARED/gitc/DEFAULT/cache"}"

    [ -z "$TMPDIR" ] || ___x_cmd_gd_domain___init_put "tmp" "$TMPDIR"

    local x_; x os name_
    case "$_" in
        linux)
            # TODO: ???
            ___x_cmd_gd_domain___init_put desk     "$HOME/Desktop"
            ___x_cmd_gd_domain___init_put doc      "$HOME/Documents"
            ___x_cmd_gd_domain___init_put down     "$HOME/Downloads"
            ;;

        darwin)
            ___x_cmd_gd_domain___init_put icloud   "$HOME/Library/Mobile Documents/com~apple~CloudDocs"
            ___x_cmd_gd_domain___init_put desk     "$HOME/Desktop"
            ___x_cmd_gd_domain___init_put doc      "$HOME/Documents"
            ___x_cmd_gd_domain___init_put down     "$HOME/Downloads"
            ;;

        win)
            # consult gitbash

            ___x_cmd_gd_domain___init_put bing     "$HOME"             # TODO: bing cloud position
            ___x_cmd_gd_domain___init_put desk     "$HOME/Desktop"
            ___x_cmd_gd_domain___init_put doc      "$HOME/Documents"
            ___x_cmd_gd_domain___init_put down     "$HOME/Downloads"
            ;;
    esac
    ___x_cmd_gd_util___dict_inner load domain "$domain_file"
    # Just For Mac

    # ___x_cmd_gd_domain___set "nm"  ".../Downloads"          # node_modules
    # ___x_cmd_gd_domain___set "git"  ".git"                  # .git directory

    # :http ==> http://
    # :https => https://
    # :ftp => ftp://
    # :docker => docker://
    # :ali => ali://

    # :git => git://
    # :ssh => ssh://

}


# mac

# :tmp
# :icloud
# :app

# linux

# :tmp

# win

# :tmp
# :app
