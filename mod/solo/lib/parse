# shellcheck shell=dash

___x_cmd_solo_parse(){
    local solofile="$1"
    local folder="$2"
    ___x_cmd_solo_parse_main "$@" <"$solofile"
}

___x_cmd_solo_parse_main(){
    local IFS="$___X_CMD_UNSEENCHAR_NEWLINE"

    local engine; engine=""
    local line; local i=0;
    while read -r line; do
        i=$((i+1)); [ "$i" -lt 10 ] || break
        case "$line" in
            *x-cmd/solo*:)
                {
                    printf "%s\n" "$line"
                    cat
                } | ___x_cmd_solo_parse___continue "$engine" >"$folder/.x-cmd/setup"
                return 0
            ;;

            *)  continue
        esac
    done
    # If there is not engine declaration, the file will run directly.
    return 0
}

___x_cmd_solo_parse___continue(){
    local line
    while read -r line; do
        case "$line" in
            x-cmd/solo\ engine*:)
                engine=${line#*:}
                printf "%s " x "$engine" "'""$solofile""'" >"$folder/.x-cmd/X"
            ;;

            x-cmd/solo\ cmd*:)
                line="${line#*:}"
                eval "$line"
            ;;

            x-cmd/solo\ npm*:)
                # Add type is module
                printf "%s " npm install --save "${line#*:}"     # Using x npm instead?
            ;;

            *x-cmd/solo\ pip*:)
                solo:debug "pip install ${line#*:}"
                printf "%s " pip install "${line#*:}"            # Using x pip instead?
            ;;

            x-cmd/solo\ bun*:)
                solo:debug "bun install ${line#*:}"
                printf "%s " bun install "${line#*:}"            # Using x pip instead?
            ;;

            x-cmd/solo\ deno*:)
                solo:debug "deno install ${line#*:}"
                printf "%s " deno install "${line#*:}"            # Using x pip instead?
            ;;

            x-cmd/solo\ end*:)
                break
            ;;
        esac
    done
}


