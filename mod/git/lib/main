# shellcheck shell=dash     disable=SC2086,SC2089,SC2090,SC3003,SC2034,SC3030,SC2207

xrc:mod:lib git             quicks log commit sync meta is rootout branch checkout track submodule/main

___x_cmd_git___main(){
    local ___X_CMD_GIT_MAIN_OPTS=''; while true; do
        case "$1" in
            --version|--help|--man-path|--info-path)
                ___x_cmd___git_origin "$1"
                return
                ;;
            -p|--paginate|-P|--no-pager|\
            --no-replace-objects|--bare|\
            --exec-path=*|--work-tree=*|--namespace=*)
                x cmdstr ___X_CMD_GIT_MAIN_OPTS "$1";  shift
                ;;
            -C)
                x cmdstr ___X_CMD_GIT_MAIN_OPTS "$1" "$2"; shift 2
                ;;
            -h) ___x_cmd_git___help;   return 0;;
            *)
                break
        esac
    done

    local op="$1";      shift
    case "$op" in
        br)                 ___x_cmd_git_branch "$@" ;;
        cfg)                ___x_cmd_git_config "$@" ;;

        log)                ___x_cmd_git_log "$@" ;;
        ci|commit)          ___x_cmd_git_commit "$@" ;;
        co|checkout)        ___x_cmd_git_checkout "$@" ;;

        sm|submodule)       ___x_cmd_git_submodule "$@" ;;

        clone)              ___x_cmd_git_clone "$@" ;;

        last|unadd|\
        is|meta|\
        branch|\
        rootout|track|\
        sync)
                            ___x_cmd_git_"${op}" "$@" ;;
        *)                  ___x_cmd___git_origin "$op" "$@" ;;
    esac
}

___x_cmd_git_clone(){
    ___x_cmd___git_origin clone "$@"
    local code=$?
    if [ "$code" = 0 ]; then
        local clonefolder; eval clonefolder="\$$#"
        [ -d "$clonefolder" ] || {
            clonefolder="${clonefolder##*/}"
            clonefolder="${clonefolder%.git}"
            [ -d "$clonefolder" ]
        } && (
            cd "$clonefolder"
            x gitconfig apply
        )
    fi

    return "$code"
}

___x_cmd___git_origin(){
    eval set -- command git $___X_CMD_GIT_MAIN_OPTS "\"\$@\""
    "$@"
}

___x_cmd_git___help(){
    command -v ___x_cmd_advise_gen_help >/dev/null || xrc:mod advise/lib/gen_help
    ___x_cmd_advise_gen_help "$___X_CMD_ROOT_MOD/git/res/advise.jso"
}

___x_cmd_git___advise_ls_branch(){
    local IFS="$___X_CMD_UNSEENCHAR_NEWLINE"
    candidate_exec_arr=($(
        command git for-each-ref --format="%(refname:strip=2)" "refs/heads/*" "refs/heads/*/**"
        command git for-each-ref --format="%(refname:strip=2)" "refs/remotes/*" "refs/remotes/*/**"
    ))
}

___x_cmd_git___advise_ls_tag(){
    local IFS="$___X_CMD_UNSEENCHAR_NEWLINE"
    candidate_exec_arr=($(
        command git for-each-ref --format="%(refname:strip=2)" "refs/tags/*" "refs/tags/*/**"
    ))
}
