# shellcheck shell=sh disable=SC3043 # xrc

___x_cmd_theme_control(){
    local op="$1"
    case "$op" in
        set)                            shift; "___x_cmd_theme_control_use" "$@"   ;;
        ls|use|try|font|zinit|unset)    shift; "___x_cmd_theme_control_$op" "$@"   ;;
        -h|--help)                      _____x_cmd_theme_help                      ;;
        *)                              ___x_cmd_theme_control_app "$@"            ;;
    esac
}

# Section: ls and which
___x_cmd_theme_control_ls() {
    local op="$1"
    case "$op" in
        --no-cache)                 shift; local ___X_CMD_THEME_ASSET_NO_CACHE=1  ;;
        -h|--help)                  _____x_cmd_theme_help ls; return              ;;
    esac
    local _tgzfilepath
    ___x_cmd_theme___which_tgz___tgzfilepath   || return 1
    if [ -n "$___X_CMD_THEME_ASSET_NO_CACHE" ] || [ "$___X_CMD_HTTPGET_AGE" -lt 86400 ]; then # 1-Day
        x rmrf "${___X_CMD_ROOT_DATA}/theme/tgz"
    fi

    local filepath
    ___x_cmd_theme___which___filepath index.yml && \
        awk 'op==1{ if ($0 ~ /^-/) exit(0); if($2 != "") print $2; };  op==0{  if ($2 == "all") op=1; }' <"$filepath"
}

___x_cmd_theme___which___filepath(){
    local filename="${1:?Provide name}"

    local tmp_style_dir="$___X_CMD_ROOT_DATA/theme/tgz"
    if [ ! -f "$tmp_style_dir/$filename" ]; then
        local _tgzfilepath=""
        ___x_cmd_theme___which_tgz___tgzfilepath || return 1

        [ -d "$tmp_style_dir" ] || mkdir -p "$tmp_style_dir"

        local _src_code
        if ! tar xf "$_tgzfilepath" -C "$tmp_style_dir" "$filename" 2>/dev/null; then
            x log :theme error "Not found theme in cache sources. Check the theme name is exist."
            x log :theme info  "Can try run command to update theme sources." "${___X_CMD_UNSEENCHAR_033}[36m\`x theme ls --no-cache\`${___X_CMD_UNSEENCHAR_033}[0m"
            return 1
        fi
    fi
    filepath="$tmp_style_dir/$filename"
}

___x_cmd_theme___which_tgz___tgzfilepath(){
    _tgzfilepath="${___X_CMD_ROOT_SHARED}/theme/theme.tgz"
    local _expiration=86400 # 1-Day
    [ -z "$___X_CMD_THEME_ASSET_NO_CACHE" ] || _expiration='-'

    if ! x httpget gitx x-cmd theme main "dist/theme.tgz" "$_tgzfilepath" "$_expiration"; then
        if [ ! -f "$cache" ]; then
            x log :theme error "Unavailable theme.tgz. Unable to fetch theme.tgz."
            return 1
        fi
    fi
}

# EndSection

# Section: use
xrc:mod:lib theme   lib   style

___x_cmd_theme_control_use_default(){
    [ ! -f "${___X_CMD_ROOT_CFG}/theme/default" ] || . "${___X_CMD_ROOT_CFG}/theme/default"
}

___x_cmd_theme_control_use(){
    local name="${1:-ys}"
    case "$1" in
        --help|-h)    _____x_cmd_theme_help use; return ;;
        "")           ;;
        *)            shift ;;
    esac

    x ensurefp "${___X_CMD_ROOT_CFG}/theme/default"
    ___x_cmd_theme_control_try_inner "$name" "$*" && \
        printf "%s\n" "___x_cmd_theme_control_try_inner $name $*" >"${___X_CMD_ROOT_CFG}/theme/default" && \
        x boot rc add "x-theme" "xrc theme && ___x_cmd_theme_control_use_default"
}
# EndSection

# Section: try
___x_cmd_theme_control_try(){
    case "$1" in
        --help|-h)    _____x_cmd_theme_help try; return ;;
    esac

    [ -n "$1" ] || x log :theme error "Pealse provide theme name. e.g 'x theme try ys'"
    ___x_cmd_theme_control_try_inner "${1}"
}

___x_cmd_theme_control_try_inner(){
    local name="${1}"
    [ "$name" != "random" ] || local _XCMD_THEME_RANDOM="$2"
    case "$name" in
        ys|"")          ___x_cmd_theme_load_format "$___X_CMD_ROOT_MOD/theme/lib/ys" ;;
        */*)            ___x_cmd_theme_load_format "$(xrc which "$name")" ;;
        *)              local filepath; ___x_cmd_theme___which___filepath "style/$name" && \
                            ___x_cmd_theme_load_format "$filepath" || return 1
                        ;;
    esac
    ___X_CMD_THEME_NAME="$name"
    ! command -v _____x_cmd_theme_register_hook >/dev/null || _____x_cmd_theme_register_hook
}
# EndSection

# Section: zsh
___x_cmd_theme_control_zinit(){
    case "$1" in
        --help|-h)    _____x_cmd_theme_help zinit; return ;;
    esac
    [ -n "$ZSH_VERSION" ] || {
        x log :theme error "Only support Zsh shell"
        return 1
    }

    # load theme
    command -v ___x_cmd_theme_prompt_format >/dev/null || ___x_cmd_theme_control_use
    # load zsh plugins
    local ZSH_PLUGIN="${1:-"zsh-syntax-highlighting,zsh-autosuggestions,zsh-config"}"
    x pkg download zsh-plugin && x pkg populate zsh-plugin || return
    x pkg boot zsh-plugin
    x boot rc add \
        "x-zsh-plugin" "[ -z \"\$ZSH_VERSION\" ] || ZSH_PLUGIN=\"$ZSH_PLUGIN\" x pkg boot zsh-plugin"
    x log :theme "ZSH enhanced plugins and configure initialized"
    # load font
    [ -n "$SSH_CONNECTION" ] || [ -f "/.dockerenv" ] || ___x_cmd_theme_control_font
    x log :theme "Successfully initialized"
}
# EndSection

# Section: font
# shellcheck disable=2120
___x_cmd_theme_control_font() {
    case "$1" in
        --help|-h)    _____x_cmd_theme_help font; return ;;
    esac

    local _font_dir
    local _font_name='Fira Code Retina Nerd Font Complete.ttf'
    if [ "$(uname)" = "Darwin" ]; then
        # MacOS
        _font_dir="$HOME/Library/Fonts"
    else
        # Linux
        _font_dir="$HOME/.local/share/fonts"
        mkdir -p "$_font_dir"
    fi
    if [ -f "$_font_dir/$_font_name" ]; then
        x log :theme "Font already installed to $_font_dir"
    else
        local cache="$_font_dir/nerdfont.tgz"
        local expiration=""
        if ! x httpget gitx x-cmd theme main "font/nerdfont.tgz" "$cache" "$expiration"; then
            x log :theme error "Nerdfont install failed"
            return 1
        fi

        tar -zxf "$cache" -C "$_font_dir" || return 1

        if command -v fc-cache >/dev/null 2>&1; then
            x log :theme "Resetting font cache, this may take a moment..."
            command fc-cache -f "$_font_dir"
        fi
    fi
}
# EndSection

# Section: unset
___x_cmd_theme_control_unset(){
    case "$1" in
        "") ;;
        --help|-h)
            _____x_cmd_theme_help unset
            return
            ;;
        plugin|zplugin)
            x boot rc del "x-zsh-plugin"
            x log :theme "Unset ZSH plugins successfully." "${___X_CMD_UNSEENCHAR_033}[1;33mNow you can restart your terminal.${___X_CMD_UNSEENCHAR_033}[0m"
            return
            ;;
        all)
            x boot rc del "x-zsh-plugin"
            ;;
        *)
            x log :theme error -h 'x theme unset [zplugin|all]' "Invalid argument"
            return 1
            ;;
    esac

    x boot rc del x-theme
    ! command -v _____x_cmd_theme_unset_hook >/dev/null || _____x_cmd_theme_unset_hook
    x log :theme "Unset the theme ${1:+"and ZSH plugin "}successfully." "${___X_CMD_UNSEENCHAR_033}[1;33mNow you can restart your terminal.${___X_CMD_UNSEENCHAR_033}[0m"
}
# EndSection

# Section: app
___x_cmd_theme_control_app(){
    if ___x_cmd_theme___which___filepath index.yml; then
        xrc theme/lib/app
        local ___X_CMD_THEME_FINAL_COMMAND
        local ___X_CMD_THEME_APP_FINAL_NAME
        ___x_cmd_theme_app
        if [ "$___X_CMD_THEME_FINAL_COMMAND" = "ENTER" ]; then
            ___x_cmd_theme_control_use "$___X_CMD_THEME_APP_FINAL_NAME"
        fi
    fi
}

# EndSection

# Section: help
# shellcheck disable=2120
_____x_cmd_theme_help(){
    x help -m theme "$@" 1>&2
    return 1
}
# EndSection

xrc setmain ___x_cmd_theme_control
